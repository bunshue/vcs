

// *****************************************************
// Dependencies
// *****************************************************
#include <stdio.h>
#include <stdlib.h>
#include "xil_cache.h"
#include "platform.h"
#include "main.h"
#include "xuartps_hw.h"
#include "periphs.h"
#include "mixer.h"
#include "gpio.h"
#include "ulpi.h"
#include "xiicps.h"

#include "xparameters.h"
#include "xsdps.h"

#include <stdio.h>

typedef unsigned char bool_t;

typedef enum xilSDResult
{
   XILSD_SUCCESS = 0,
   XILSD_NO_CARD,
   XILSD_WRITE_PROTECTION,
   XILSD_ERR_WRITING,
   XILSD_ERR_READING
} xilSDResult_t;

#define SD_DEVICE_ID    XPAR_XSDPS_1_DEVICE_ID
#define SD_BASEADDR     XPAR_PS7_SD_1_BASEADDR
#define SD_CLK_FREQ_HZ  XPAR_PS7_SD_1_SDIO_CLK_FREQ_HZ

#define CARD_INSERTED(a) ((a & XSDPS_PSR_CARD_INSRT_MASK) >> 16) ? TRUE : FALSE
#define WRITE_PROTECTED(a) ((a & XSDPS_PSR_WPS_PL_MASK) >> 18) ? TRUE :FALSE

static XSdPs gXilSdPsInst;

bool_t isCardInTheSocket(void);
bool_t isCardWriteProtected(void);
bool_t xilSdInit(void);
xilSDResult_t xilSdWrite(uint8_t* buff, uint32_t blkId, uint32_t numBlks);
xilSDResult_t xilSdRead(uint8_t* buff, uint32_t blkId, uint32_t numBlks);

//----------------------------------------------------
// MAIN FUNCTION
//----------------------------------------------------

int main()
{
    usleep(200000);usleep(200000);usleep(200000);usleep(200000);

    xil_printf("\n\n\n\n\n\nTest\n\r");
    xil_printf("Compiled time: %s %s\n\r", __DATE__, __TIME__);
    xil_printf("%s:%s(%d)\n\r\n\r",__FILE__,__func__,__LINE__);

    bool_t status;
    uint8_t write[3*512] = {0,0,0};
    uint8_t read[3*512] = {0,0,0};
    uint8_t read1[3*512] = {0,0,0};
    uint32_t i = 0;

    printf("XIL SD PS DRIVER TEST\n");

    for(i=0; i < (3*512); i++)
    {
       write[i] = 0xAB;
    }

    status = xilSdInit();

    printf("SD Controller init with status = %d\n\r", status);

    //status = xilSdRead(read1, 3000, 3);
    status = xilSdRead(read, 3000, 3);

    printf("SD Reading with status = %d\n\r", status);

    printf("Read1 v1 = 0x%x v2 = 0x%x v3 = 0x%x\n\r", read[0], read[1], read[511]);

    status = xilSdWrite(write, 3000, 3);

    printf("SD Writing with status = %d\n\r", status);

    printf("Write v1 = 0x%x v2 = 0x%x v3 = 0x%x\n\r", write[1], write[512-1], write[3*512-1]);

    status = xilSdRead(read, 3000, 3);

    printf("SD Reading with status = %d\n\r", status);

    printf("Read2 v1 = 0x%x v2 = 0x%x v3 = 0x%x\n\r", read[1], read[511], read[2*513]);

    printf("\n\r\n\r\n\r");

    while(1)
    {
    	xil_printf("X");
    	usleep(200000);
        usleep(200000);
        usleep(200000);
        usleep(200000);
    	usleep(200000);
        usleep(200000);
        usleep(200000);
    }
    return 0;
}


bool_t isCardInTheSocket(void)
{
   bool_t   ret;
   uint32_t statusReg;

   statusReg = XSdPs_GetPresentStatusReg(SD_BASEADDR);

   ret = CARD_INSERTED(statusReg);

   return ret;
}

bool_t isCardWriteProtected(void)
{
   bool_t   ret;
   uint32_t statusReg;

   statusReg = XSdPs_GetPresentStatusReg(SD_BASEADDR);

   ret = WRITE_PROTECTED(statusReg);

   return ret;
}

bool_t xilSdInit(void)
{
   bool_t ret = TRUE;

   uint32_t status;
   XSdPs *sdInstPtr = &gXilSdPsInst;
   XSdPs_Config *ConfigPtr;

   //Check if it is possible to write in card (card must be inserted)

   //Write enable can also be checked if it is routed on HW
   if(isCardInTheSocket() != TRUE)
   {
      printf("SD device is not inserted\n\r", NULL);
      return FALSE;
   }

   /*
    * If card can be written, controller is initialized
    */
   ConfigPtr = XSdPs_LookupConfig(SD_DEVICE_ID);
   if (ConfigPtr == NULL)
   {
      printf("SD device does not exist\n\r", NULL);
      ret = FALSE;
   }


   status = XSdPs_CfgInitialize(sdInstPtr, ConfigPtr, ConfigPtr->BaseAddress);
   if (status != XST_SUCCESS)
   {
      printf("SD controller could not be initialized\n\r", NULL);
      ret = FALSE;
   }

   status = XSdPs_CardInitialize(sdInstPtr);
   if(status != XST_SUCCESS)
   {
      printf("SD card could not be initialized\n\r", NULL);
      ret = FALSE;
   }
   printf("SD device init OK\n\r", NULL);

   return ret;

}

xilSDResult_t xilSdWrite(uint8_t* buff, uint32_t blkId, uint32_t numBlks)
{
   XSdPs *sdInstPtr = &gXilSdPsInst;
   uint32_t statusReg;
   xilSDResult_t ret;

   statusReg = XSdPs_WritePolled(sdInstPtr,blkId, numBlks, buff);
   if(statusReg != XST_SUCCESS)
   {
      printf("SD WRITING did not end correctly. Block = %d Blocks-count = %d", blkId, numBlks);
      ret = XILSD_ERR_WRITING;
   }

   return ret;
}

xilSDResult_t xilSdRead(uint8_t* buff, uint32_t blkId, uint32_t numBlks)
{
   XSdPs *sdInstPtr = &gXilSdPsInst;
   uint32_t statusReg;
   xilSDResult_t ret;

   statusReg = XSdPs_ReadPolled(sdInstPtr,blkId, numBlks, buff);
   if(statusReg != XST_SUCCESS)
   {
      printf("SD READING did not end correctly. Block = %d Blocks-count = %d\n\r", blkId, numBlks);
      ret = XILSD_ERR_READING;
   }

   return ret;
}


systemticks_t gfxSystemTicks(void)
{
	return g_ms_tick;
}

systemticks_t gfxMillisecondsToTicks(delaytime_t ms)
{
	return ms;
}
/////////////////////////////////////

uint32_t tusb_tick_get(void)
{
  //return system_ticks;
  return g_ms_tick;
}

