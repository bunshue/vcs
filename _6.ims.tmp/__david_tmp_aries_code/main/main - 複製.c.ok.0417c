// *****************************************************
// Dependencies
// *****************************************************
#include <stdio.h>
#include <stdlib.h>
//#include <time.h>		//for struct tm
#include <unistd.h>		//for sleep
#include "xil_cache.h"
#include "platform.h"
#include "main.h"
#include "xuartps_hw.h"
#include "periphs.h"
#include "mixer.h"
#include "gpio.h"
#include "ulpi.h"
#include "gfx.h"
#include "gdisp_lld_framebuffer.h"	//for gdisp_lld_control test
#include "xdmaps.h"
#include "xadcps.h"

//#define SW_RELEASE
//#define USE_DEBUG_CONSOLE
#define USE_DATA_INPUT		//key in id no, name, sex, age, birthday
#define USE_DEBUG_MESSAGE		//compile count, use count, compile time, temperature....
#define USE_DEBUG_PICTURE
//#define USE_DEBUG_VIDEO_OUTPUT
#define USE_PREVENT_REUSE
//#define USE_IMS_LINK

//default setup
#define FAN_ON
#define START_STATUS	STOP	//START or STOP

#define USE_Z7020
//#define USE_Z7015
#define USE_CARRIER_BLACK
//#define USE_CARRIER_RED

//#define TEMPERATURE_DEBUG
#define DEBUG_LENGTH		600

#ifdef SW_RELEASE
	#undef USE_DEBUG_CONSOLE
	#undef USE_DEBUG_PICTURE
	#undef USE_DEBUG_VIDEO_OUTPUT
	#undef USE_DEBUG_MESSAGE
	#undef USE_DATA_INPUT
	#undef FAN_OFF
	#undef START_STATUS
	#define START_STATUS	STOP
	#undef TEMPERATURE_DEBUG
	#undef USE_PREVENT_REUSE
	//#define USE_PREVENT_REUSE
#endif

#define XPS_SYS_CTRL_BASEADDR	0xF8000000U	/* AKA SLCR */
#define BOOT_MODE_REG			(XPS_SYS_CTRL_BASEADDR + 0x25C)
#define BOOT_MODES_MASK			0x00000007 /**< FLASH types */

#define ZOOM_CUT			8			//pixel
#define CUT_PIXEL1			171			//cut = 1.5*(H >> 3) H = 912, cut1 = 171
#define CUT_PIXEL2			90			//cut = 1.5*(H >> 3) H = 912, cut1 =  90

#define SN_PAGE				0x09		//serial
#define DATE_PAGE0			0x0A		//serial date
#define DATE_PAGE1			0x0B		//use  1 minute
#define DATE_PAGE2			0x0C		//every 1 minute, write an X
#define DATE_PAGE3			0x0D		//use 30 minutes
#define ERROR_PAGE			0x0E		//error code
#define ERROR_DATE			0x0F		//error date

#define CAMERA_INFO_POS_X	690
#define CAMERA_INFO_POS_Y1	950 - 11
#define CAMERA_INFO_POS_Y2	950 - 11 + 34
#define CAMERA_INFO_POS_Y3	950 - 11 + 68
#define CAMERA_INFO_POS_Y4	950 - 11 + 102

#define WIDTH1		150		//for ID NO, NAME
#define WIDTH2		370		//for Doraemon, 9/3/2112
#define WIDTH3		460		//for S/N : 2DCF-XXXXXX
#define WIDTH4		180
#define WIDTH5		80		//for Sun, Mon...
#define THICK1		40

// for I2C ST
#include "xparameters.h"
#include "xiicps.h"
#include "xil_printf.h"

#define IIC_DEVICE_ID		XPAR_XIICPS_1_DEVICE_ID

//#define IIC_SLAVE_ADDR	0xE0	//TCA9546A
#define IIC_SLAVE_ADDR		0x68	//RTC DS1308
#define IIC_SCLK_RATE		100000

#define EEPROM_IIC_SLAVE_ADDR		0x53	//EEPROM 24C256

#define I2C_BUFFER_SIZE		8
#define INFO_BUFFER_SIZE	1024

#define RTC_SS		0		//second
#define RTC_MM		1		//minute
#define RTC_HH		2		//hour
#define RTC_WD		3		//weekday
#define RTC_MD		4		//monthday
#define RTC_MON		5		//month
#define RTC_YEAR	6		//year
#define RTC_CONTROL	7		//control data
#define abs(a, b)	(((a) > (b)) ? (a - b) : (b - a))

#ifdef USE_PREVENT_REUSE
#define THIRTY_MINUTE						5
#define ONE_MINUTE							60
#define VIDEO_OK							0
#define VIDEO_FORBID_ALL					1
#define VIDEO_FORBID_DIFFERENT_CAMERA		2
#define VIDEO_FORBID_POWEROFF_LONG_1M		3
#define VIDEO_FORBID_POWEROFF_LONG_1M30M	4
#define VIDEO_FORBID_POWEROFF_LONG_30M		5
#define VIDEO_FORBID_PULL_OUT_LONG_1M		6
#define VIDEO_FORBID_PULL_OUT_LONG_30M		7

int flag_forbid_video = FALSE;
int flag_forbid_video_old = FALSE;
int flag_video_status = VIDEO_OK;

#define CAMERA_NEW		0
#define CAMERA_1M		1
#define CAMERA_30M		2
#define CAMERA_USED		3

int flag_camera_status = CAMERA_NEW;
int flag_same_camera = FALSE;
int flag_donot_care_power_off = FALSE;
int flag_check_pull_out_time = FALSE;
int flag_camera_invalid = FALSE;
int flag_camera_invalid_id = 0;

int system_power_on_count = 0;
int system_power_on_count_from_eeprom = 0;
unsigned char write_every_minute = 0;
#endif


int flag_enable_debug_console = TRUE;
int flag_camera_access = 0;

int IicPsMasterInit(u16 DeviceId);
XIicPs Iic;							/**< Instance of the IIC Device */

//u8 SendBuffer[I2C_BUFFER_SIZE];		/**< Buffer for Transmitting Data */
//u8 RecvBuffer[I2C_BUFFER_SIZE];		/**< Buffer for Receiving Data */

u8 SetInfoBuffer[INFO_BUFFER_SIZE + 2];	//data and offset
u8 GetInfoBuffer[INFO_BUFFER_SIZE];

u8 eeprom_page_buffer[1024];

#define DRAW_CMD_LEN	10
int draw_command[DRAW_CMD_LEN];
int draw_command_index = 0;
//int draw_command_pic = 0;

int XIicPs_SetDate(XIicPs *InstancePtr, u32 year, u8 month, u8 date, u8 day, u8 hour, u8 minutes, u8 seconds);
int XIicPs_SetData(XIicPs *InstancePtr, u8 addr, u8 data);
void ShowDateInfo(u8 *RecvBuffer);
int XIicPs_SetInfo();
int XIicPs_GetInfo();
void get_RTC_data();
int update_RTC_data();
void check_draw_command(void);
void add_draw_command(int cmd, int pic);
void update_widget_data(u8 *RecvBuffer);
int XIicPs_ReadEepromData(uint16_t page, uint16_t addr, uint16_t len, u8 *Buffer);
int XIicPs_WriteEepromData(uint16_t page, uint16_t addr, uint16_t len, u8 *Buffer);
int XIicPs_ReadEepromPage(uint16_t page, u8 *eeprom_page_buffer);
int XIicPs_EraseEepromPage(uint16_t page);
int XIicPs_EraseEeprom(uint16_t page, uint16_t addr0, uint16_t len);
int XIicPs_WriteEepromPage(uint16_t page);
int XIicPs_EraseEepromAll(void);
int XIicPs_ReadEepromAll(void);
int XIicPs_WriteEepromAll(void);
void read_camera_info_from_eeprom(void);
void read_last_power_off_time_from_eeprom(void);
void write_camera_serial_to_eeprom(void);
void write_total_power_off_time_to_eeprom(void);
uint32_t check_dongle_usage_count(void);
void XIicPs_PrintPageData(int page, u8 *eeprom_page_buffer);
void XIicPs_PrintPageDataRaw(int page, u8 *eeprom_page_buffer);
void increase_dongle_usage_count(void);
void show_dongle_usage_count(uint32_t dongle_usage_count);
void show_dongle_usage_count_eng(uint32_t dongle_usage_count);
void increase_power_on_count(void);
void show_fw_write_count(uint32_t fw_write_count);
int read_RTC_data();
int XIicPs_SetRTCData(XIicPs *InstancePtr, u8 type, u8 data);
// for I2C SP

// for DMA ST
#define DMA_DEVICE_ID 			XPAR_XDMAPS_1_DEVICE_ID
#define DMA_DONE_INTR_0			XPAR_XDMAPS_0_DONE_INTR_0
#define DMA_DONE_INTR_1			XPAR_XDMAPS_0_DONE_INTR_1
#define DMA_DONE_INTR_2			XPAR_XDMAPS_0_DONE_INTR_2
#define DMA_DONE_INTR_3			XPAR_XDMAPS_0_DONE_INTR_3
#define DMA_DONE_INTR_4			XPAR_XDMAPS_0_DONE_INTR_4
#define DMA_DONE_INTR_5			XPAR_XDMAPS_0_DONE_INTR_5
#define DMA_DONE_INTR_6			XPAR_XDMAPS_0_DONE_INTR_6
#define DMA_DONE_INTR_7			XPAR_XDMAPS_0_DONE_INTR_7
#define DMA_FAULT_INTR			XPAR_XDMAPS_0_FAULT_INTR

#define DMA_LENGTH		8192*30		//Length of the Dma Transfers 2048 * 4 * 30
#define TIMEOUT_LIMIT 	0x20000		//Loop count for timeout

static u32 DMA_src[DMA_LENGTH] = {0};
static u32 DMA_dst[DMA_LENGTH] = {0};

int SetupInterruptSystem(XScuGic *GicPtr, XDmaPs *DmaPtr);
void DmaDoneHandler(unsigned int Channel, XDmaPs_Cmd *DmaCmd, void *CallbackRef);
int dma_copy(u32 SrcAddr, u32 DstAddr, int length);

void print_screen_data(int frame);
void print_layer0_data(int frame);
void print_surface_1_data();
void print_surface_1c_data();

uint32_t empty_pic[1216 * 4];
uint32_t tmp_pic[400 * 4];
uint32_t addr_empty_pic;
uint32_t addr_tmp_pic;

//reserve picture position info
coord_t pic_dx = 228;			//destination canvas start position x
coord_t pic_dy = 264;			//destination canvas start position y
coord_t pic_width = 760;		//destination canvas start position x
coord_t pic_height = 384;		//destination canvas start position y

struct pic_size
{
	coord_t w;
	coord_t h;
	coord_t dx;
	coord_t dy;
};

#define	TOTAL_PICTURES	4
struct pic_size pic_sizes[TOTAL_PICTURES];

// for DMA SP

// for ADC ST
#define XADC_DEVICE_ID 		XPAR_XADCPS_0_DEVICE_ID
int XAdcInit(u16 DeviceId);
int XAdcGetData();
int XAdcGetCurrentTemperature();
static int XAdcFractionToInt(float FloatNum);
static XAdcPs XAdcInst;      /* XADC driver instance */

u32 temperature_array_index = 0;
u32 temperature_array[DEBUG_LENGTH] = {0};

u32 temperature_current = 0;

// for ADC SP

u8 camera_serial_old[16] = {0};
u8 camera_serial_new[16] = {0};
u8 camera_serial_tmp[16] = {0};

/* global timer registers*/
#define SCU_GLOBAL_TIMER_COUNT_L32	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR)
#define SCU_GLOBAL_TIMER_COUNT_U32	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x04)
#define SCU_GLOBAL_TIMER_CONTROL	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x08)
#define SCU_GLOBAL_TIMER_ISR		(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x0C)
#define SCU_GLOBAL_TIMER_COMP_L32	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x10)
#define SCU_GLOBAL_TIMER_COMP_U32	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x14)
#define SCU_GLOBAL_TIMER_AUTO_INC	(XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR+0x18)
static const char ims_logo[] = "ims-small-logo.png";
static const char step_1[] = "step1.png";
static const char step_2[] = "step2.png";
static const char step_3[] = "step3.png";
#ifdef USE_PREVENT_REUSE
static const char forbid_1[] = "forbid1.png";
static const char forbid_2[] = "forbid2.png";
static const char forbid_3[] = "forbid3.png";
static const char forbid_4[] = "forbid4.png";
static const char forbid_5[] = "forbid5.png";
static const char forbid_6[] = "forbid6.png";
static const char forbid_7[] = "forbid7.png";
#endif
#ifdef USE_DEBUG_PICTURE
static const char cameraa[] = "camera.png";
static const char recorder_oka[] = "recorder_ok.png";
static const char recorder_nonea[] = "recorder_none.png";
static const char recorder_faila[] = "recorder_fail.png";
#endif

void pixmap_draw(GDisplay* pixmap, pixel_t* surface, coord_t pm_width, coord_t pm_height, gdispImage *p_Image, uint32_t s_x, uint32_t s_y, uint32_t d_x, uint32_t d_y, u8 alpha, u8 position);
void clear_layer1_all(int frame, int enable);
void clear_layer1(int frame);
void layer1_blit(struct pic_size s, int frame);
void layer1_blit_corners(int frame);
void preload_picture_to_memory(void);
void preload_forbid_picture_to_memory(int pic);
void dma_restore_picture(int pic);
void dma_backup_picture(void);
void draw_layer_boundary(void);
void switch_to_framebuffer(int frame);
void lock_monitor_test(periphs_t* p_periphs_inst);	//useage: lock_monitor_test(&periphs_inst);
void RequestShowPicture(int pic);
void RequestShowPicture2(int pic);
void init_system();
uint8_t keycode_to_ascii2(uint8_t modifier, uint8_t keycode);
int process_function_key(uint8_t keycode);
int process_arrow_key(uint8_t keycode);
int usb_keyboard_send_keycode(uint8_t modifier, uint8_t keycode);
void confirm_enter_key(int flag_modify_pinfo_mode);
void backup_old_data(int flag_modify_pinfo_mode);
void restore_old_data0(int flag_modify_pinfo_mode);
void restore_old_data(int flag_modify_pinfo_mode);
void update_user_data(uint8_t keycode);
void update_pinfo_on_widget(uint8_t ch);
int read_serial_from_camera(void);
void write_serial_to_camera(void);
void write_user_serial_to_camera(void);
int read_date_from_camera(uint16_t page);
int read_data_from_camera(uint16_t page);
void write_date_to_camera(uint16_t page);
void write_error_code_to_camera(int error);
int read_error_code_from_camera(void);
void show_camera_serial(int enable);
void show_camera_date(int enable);
void read_camera_info_from_camera_eng(void);
void show_camera_info_eng(void);
void clear_connect_timer(void);
void clear_disconnect_timer(void);
void keep_current_setup_value(int item);
void modify_current_setup_value(int add);
void refresh_current_setup_value0(void);
void refresh_current_setup_value(void);
void apply_current_setting(void);
void confirm_language_item(void);

void console_test(void);
void font_test(void);

#define ALPHA 0xcf

volatile uint32_t g_ms_uptime = 0;
volatile uint32_t g_ms_tick = 0;
volatile uint32_t g_ms_tick_wait = 0;
volatile uint32_t g_ms_tick_start = 0;

uint32_t start_time_total = 0;
uint32_t stop_time_total = 0;
uint32_t start_time_this = 0;
uint32_t stop_time_this = 0;
uint32_t start_count_total = 0;
uint32_t stop_count_total = 0;
uint32_t start_count_this = 0;
uint32_t stop_count_this = 0;

uint32_t g_dongle_plugged = 0;
uint32_t g_camera_plugged = 0;
uint32_t g_conn_status = DONGLE_NONE;
uint32_t g_conn_status_old = DONGLE_NONE;
u8 alpha = ALPHA;

GHandle		ghLabel1, ghLabel2, ghLabel3, ghLabel4, ghLabel5, ghLabel6, ghLabel7, ghLabel8;

uint32_t esc_mode = 0;

static gdispImage myImage;
static GDisplay* pixmap_1;
static pixel_t* surface_1;
static GDisplay* pixmap_2;
static pixel_t* surface_2;
//static GDisplay* pixmap_3;
//static pixel_t* surface_3;

static pixel_t* surface_10;			//surface_1 empty
static pixel_t* surface_1a;			//surface_1 + step_1
static pixel_t* surface_1b;			//surface_1 + step_2
static pixel_t* surface_1c;			//surface_1 + step_3
static pixel_t* surface_1d;			//surface_1 + forbid

// The handle for our console
static GHandle	GW;		//for console test
#ifdef USE_DEBUG_CONSOLE
static GHandle	GW0a;	//for debug message
static GHandle	GW1a;
#endif
static GHandle	GW0b;	//for usb debug message
static GHandle	GW1b;
GWindowInit		wic;

static void createWidgets(void);
static void createConsoleWidgets(void);
static void updateConsoleWidgets(void);
void main_loop(void);
void get_usb_descriptor(void);
void read_usb_registers(void);
void parse_uart_command(void);
void parse_uart_esc_command(void);
void get_system_up_time(void);
void set_time(void);
void get_time(void);
void show_engineering_mode0(void);
void show_engineering_mode(void);
void show_systeminfo(void);
void show_help_menu(void);
void show_help2_menu(void);
void ps_gpio_setup(periphs_t* p_periphs_inst, u32 Pin, u32 Data);
void draw_picture(int pic);
void draw_picture0(int pic);
u32 ReadRegister(u32 reg);
u32 WriteRegister(u32 reg, u32 value);
void pirnt_mixer_data(void);
void GetScuInfo(XScuGic *InstancePtr);
void SetDongleLedRedStatus(int status);
void SetDongleLedGreenStatus(int status);

static char last_command[100] = "help";
static int last_command_length = 0;
int SelectedLanguage = 0;	// 0: TC,	1: SC,	2: English
int SelectedLanguage_eng = 0;

int flag_get_usb_descriptor_done = 0;

#define REGISTER_BOOT_MODE		0xF800025C
#define REGISTER_PSS_IDCODE		0xF8000530

int flag_check_camera_reuse = CHECK_CAMERA_REUSE_NONE;
#ifdef USE_DEBUG_VIDEO_OUTPUT
int flag_use_2_framebuffers = FALSE;
#else
int flag_use_2_framebuffers = TRUE;
#endif
int current_framebuffer = 0;
int next_framebuffer = 1;
#define FRAMEBUFFER0	0
#define FRAMEBUFFER1	1

int flag_check_engineering_mode = 0;
int engineering_mode_setup_item = 0;
int cut_pixel = CUT_PIXEL1;

struct patient_info
{
	unsigned int id_no;
	unsigned char name[20];
	char sex;
	int age;
	unsigned char birthday[12];
};

struct patient_info p_info = {21120903, "Doraemon", 1, -94, "9/3/2112"};
//struct patient_info p_info = {21141202, "Dorami", 2, -97, "12/2/2114"};

struct patient_info p_infos[5] = {
		{21120903, "Doraemon", 1, -94, "9/3/2112"},
		{21141202, "Dorami", 2, -97, "12/2/2114"},
		{19281118, "Mickey", 1, 90, "11/18/1928"},
		{20000814, "Benny", 1, 18, "8/14/2000"},
		{20130417, "Cony", 2, 5, "4/17/2013"}
};
int p_info_index = 0;

#define KEY_F0				0xF1
#define KEY_F1				0xF1
#define KEY_F2				0xF2
#define KEY_F3				0xF3
#define KEY_F4				0xF4
#define KEY_F5				0xF5
#define KEY_TAB				0xA0
#define KEY_RIGHT			79
#define KEY_LEFT			80
#define KEY_DOWN			81
#define KEY_UP				82

#define LENGTH_DATA			23
uint8_t p_info_data[LENGTH_DATA];
uint8_t p_info_data_old[LENGTH_DATA];
int p_info_data_index = 0;

int flag_modify_pinfo_mode = 0;

#define ReadDeviceID	 	0xE0
#define ReadUSERCODE		0xC0
#define ReadStatusRegister 	0x3C
#define ReadBusyFlag		0xF0

int power_on_count = 0;
uint32_t check_fw_write_count(void);
void write_compile_time_count(void);
uint32_t read_compile_time_count(void);
char compile_time[8] = {0};

void forbid_video(void);
void enable_camera(int enable);
void write_camera_use_time_to_camera(int minute);
void write_camera_nouse_time_to_eeprom(int minute);
void read_camera_fpga(uint16_t page);

int camera_use_time_from_eeprom = 0;
int camera_nouse_time_from_eeprom = 0;
int camera_use_time_from_camera = 0;

int read_camera_use_time_from_camera(void);
void write_date_to_eeprom(void);
void write_invalid_to_eeprom(int forbid_id);
void read_date_from_eeprom(void);
void write_camera_use_time_to_eeprom(int minute);
void write_system_uptime_to_eeprom(int minute);

void ims_printf0( const char8 *ctrl1);
void ims_printf( const char8 *ctrl1);

void debug_console_init(void);
void debug_console_print(const char8 *ctrl1);
void debug_console_print_time(unsigned long s);
void debug_console_close(void);

unsigned long get_total_sec(struct tm t);
int diff_time(struct tm t1, struct tm t2);

#define CAMERA_1MIN		0
#define CAMERA_30MIN	1
#define EEPROM_1MIN		2
#define EEPROM_30MIN	3
#define LAST_POWER_OFF	4
#define CURRENT_TIME	5
void print_time(unsigned long s);
unsigned long get_time_interval(int index);
unsigned long total_power_off_time = 0;
unsigned long total_power_off_time_sec = 0;
unsigned long last_power_off_time = 0;
unsigned long camera_pull_out_time = 0;
unsigned long camera_plug_in_time = 0;
unsigned long camera_plug_interval = 0;
int check_camera_serial(void);
void show_camera_status(void);
int get_camera_status(void);
int tick_cnt = 1;
int time_tick = 0;
int flag_updateShowCameraDate = 0;
void updateShowCameraDate(void);
int check_camera_reuse(void);
void check_camera_reuse_clear(void);
void make_camera_expired(void);
void write_expired_date_to_camera(void);

//R=180;y=0:1:(R-1);x=R*(1-sind(acosd((R-y)/R)));plot(floor(x),y,'r');hold on;plot(round(x),y,'g');hold on;
/*
u8 cuts[180] =
{
180, 161, 153, 147, 142, 138, 134, 130, 127, 124, 121, 118, 115, 113, 110, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 87,
85, 84, 82, 81, 79, 78, 76, 75, 73, 72, 71, 69, 68, 67, 66, 64, 63, 62, 61, 60, 59, 58, 57, 56, 54, 53, 52,
51, 50, 50, 49, 48, 47, 46, 45, 44, 43, 42, 42, 41, 40, 39, 38, 38, 37, 36, 35, 35, 34, 33, 32, 32, 31, 30,
30, 29, 28, 28, 27, 26, 26, 25, 25, 24, 24, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15,
15, 15, 14, 14, 13, 13, 13, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 6, 6,
6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
*/

u8 cuts[250] =
{
250, 228, 218, 211, 205, 200, 196, 191, 187, 184, 180, 177, 173, 170, 168, 165, 162, 159, 157, 154, 152, 150, 147, 145, 143, 141, 139,
137, 135, 133, 131, 129, 128, 126, 124, 122, 121, 119, 118, 116, 114, 113, 111, 110, 108, 107, 105, 104, 103, 101, 100, 99, 97, 96,
95, 94, 92, 91, 90, 89, 88, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 75, 74, 73, 72, 71, 70, 70, 69, 68, 67,
66, 65, 64, 63, 62, 61, 60, 60, 59, 58, 57, 56, 55, 55, 54, 53, 52, 52, 51, 50, 49, 49, 48, 47, 46, 46, 45,
44, 44, 43, 42, 42, 41, 40, 40, 39, 38, 38, 37, 36, 36, 35, 35, 34, 33, 33, 32, 32, 31, 31, 30, 30, 29, 29,
28, 28, 27, 26, 26, 26, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 20, 19, 19, 18, 18, 18, 17, 17, 16,
16, 16, 15, 15, 15, 14, 14, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8,
8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2,
2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0};

/*
int cuts[360] =
{
360, 333, 322, 314, 306, 300, 295, 289, 285, 280, 276, 272, 268, 264, 261, 257, 254, 251, 248, 245, 242, 239, 236, 233, 231, 228, 226,
223, 221, 218, 216, 214, 212, 209, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 188, 186, 184, 182, 180, 179, 177, 175, 174, 172,
170, 169, 167, 166, 164, 163, 161, 160, 158, 157, 155, 154, 152, 151, 149, 148, 147, 145, 144, 143, 141, 140, 139, 137, 136, 135, 134,
132, 131, 130, 129, 128, 126, 125, 124, 123, 122, 121, 120, 119, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104,
103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 93, 92, 91, 90, 89, 88, 87, 86, 86, 85, 84, 83, 82, 81, 81, 80,
79, 78, 77, 77, 76, 75, 74, 74, 73, 72, 71, 71, 70, 69, 68, 68, 67, 66, 65, 65, 64, 63, 63, 62, 61, 61, 60,
59, 59, 58, 57, 57, 56, 55, 55, 54, 54, 53, 52, 52, 51, 51, 50, 49, 49, 48, 48, 47, 47, 46, 45, 45, 44, 44,
43, 43, 42, 42, 41, 41, 40, 40, 39, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 34, 33, 33, 32, 32, 31, 31, 30,
30, 30, 29, 29, 28, 28, 28, 27, 27, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20,
20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 12, 12, 12, 12,
11, 11, 11, 11, 10, 10, 10, 10, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6,
6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0};
*/

#ifdef USE_IMS_LINK
u8 gui_cmd[5] = {0};
u8 gui_cmd_index = 0;
u8 start_data = 0;
u8 flag_receive_camera_serial = 0;
u8 received_camera_serial[16] = {0};
u8 received_camera_serial_index = 0;
u16 CalcCheckSum(u8 *pData, u16 len);
void Send_IMS_Data_Cmd(u8 cmd1, u8 cmd2, u8 cmd3);
#endif

// *****************************************************
// Main program entry point
// *****************************************************
int main()
{
	// Local variables
	int status = 0;
	coord_t swidth, sheight;
	gdispImage *p_Image;
	//uint8_t *p_byte, byte;
	//uint32_t i;
	//uint32_t j;
	//uint32_t Index;
	uint32_t g_ms_tick_tmp;

	p_Image = &myImage;

	// Setup UART and caches
    init_platform();

    init_system();

    // Initialize peripherals
    status = periphs_init
    (
    	&periphs_inst,
    	//XPAR_CONTROL_PATH_AXI_GPIO_0_DEVICE_ID,
    	//XPAR_CONTROL_PATH_AXI_IIC_0_BASEADDR,
		//XPAR_XIICPS_0_DEVICE_ID,
		XPAR_PS7_GPIO_0_DEVICE_ID,
#ifdef USE_Z7020
		XPAR_VIDEO_PATH_VIDEO_OUT_VIDEO_LOCK_MONITOR_VS_MIXER_SW_RST_DEVICE_ID,	//7020
#else
		XPAR_VIDEO_PATH_VIDEO_OUT_VIDEO_LOCK_MONITOR_DEVICE_ID,	//7015
#endif
		XPAR_PS7_SCUGIC_0_DEVICE_ID,
		XPAR_PS7_SCUTIMER_0_DEVICE_ID,
		XPAR_PS7_UART_0_DEVICE_ID,
		//XPAR_VIDEO_PATH_CAMERA_IN_V_TC_VTD_DEVICE_ID,
    	//XPAR_VIDEO_PATH_TPG_OLD_TPG_OLD_DEVICE_ID,
		XPAR_VIDEO_PATH_V_TPG_0_DEVICE_ID,
		//XPAR_VIDEO_PATH_CAMERA_SCALER_V_PROC_SS_1_DEVICE_ID,
		XPAR_VIDEO_PATH_CAMERA_SCALER_FREEZE_V_PROC_SS_1_DEVICE_ID,
		XPAR_VIDEO_PATH_FRAMEBUFFER_AXI_VDMA_CAMERA_DEVICE_ID,
		XPAR_VIDEO_PATH_FRAMEBUFFER_AXI_VDMA_CAMERA_FREEZE_DEVICE_ID,
		//XPAR_VIDEO_PATH_FRAMEBUFFER_OUTPUT_AXI_VDMA_GUI_DEVICE_ID,
		XPAR_VIDEO_PATH_OUTPUT_MIXER_V_MIX_0_DEVICE_ID,
		XPAR_VIDEO_PATH_VIDEO_OUT_V_TC_TFP410_DEVICE_ID,
		XPAR_VIDEO_PATH_VIDEO_OUT_V_TC_CH7038_DEVICE_ID,
		XPAR_PS7_USB_0_DEVICE_ID,
    	FRAMEBUFFER_CAMERA_START_ADDR,
		FRAMEBUFFER_CAMERA_FREEZE_START_ADDR,
		FRAMEBUFFER_GUI_START_ADDR
    );
	if (status != PERIPHS_SUCCESS)
	{
		xil_printf("Initialization failed.\n\r");
		return -1;
	}
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__,__func__,__LINE__);

	SetDongleLedRedStatus(0);		//ensure turn off red led on dongle
	SetDongleLedGreenStatus(0);		//ensure turn off green led on dongle

    // Initialize uGFX
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) call gfxInit ST\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	g_ms_tick_tmp = g_ms_tick;
    gfxInit();	//use 2.2 sec
    xil_printf("tick(%d) = %d;\t%%%s:%s(%d) call gfxInit SP, spend %d msec\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__, (g_ms_tick - g_ms_tick_tmp) * 1);

	// Set up pixmap for layer 1
	xil_printf("setup layer 1 create W = %d H = %d\n\r", LAYER1_WIDTH, LAYER1_HEIGHT);
    pixmap_1 = gdispPixmapCreate(LAYER1_WIDTH, LAYER1_HEIGHT);
    surface_1 = gdispPixmapGetBits(pixmap_1);

    surface_10 = gfxAlloc(LAYER1_WIDTH * LAYER1_HEIGHT * 4);
    surface_1a = gfxAlloc(LAYER1_WIDTH * LAYER1_HEIGHT * 4);
    surface_1b = gfxAlloc(LAYER1_WIDTH * LAYER1_HEIGHT * 4);
    surface_1c = gfxAlloc(LAYER1_WIDTH * LAYER1_HEIGHT * 4);
    surface_1d = gfxAlloc(LAYER1_WIDTH * LAYER1_HEIGHT * 4);

    xil_printf("Addr of surface_1  is 0x%08x\n\r", surface_1);
    xil_printf("Addr of surface_10 is 0x%08x\n\r", surface_10);
    xil_printf("Addr of surface_1a is 0x%08x\n\r", surface_1a);
    xil_printf("Addr of surface_1b is 0x%08x\n\r", surface_1b);
    xil_printf("Addr of surface_1c is 0x%08x\n\r", surface_1c);
    xil_printf("Addr of surface_1d is 0x%08x\n\r", surface_1d);

    // Draw transparency required on layer 1
	// Set up pixmap for layer 2
    xil_printf("setup layer 2 create W = %d H = %d\n\r", LAYER2_WIDTH, LAYER2_HEIGHT);
    pixmap_2 = gdispPixmapCreate(LAYER2_WIDTH, LAYER2_HEIGHT);
    surface_2 = gdispPixmapGetBits(pixmap_2);
    // Draw transparency required on layer 2
    pixmap_draw(pixmap_2, surface_2, LAYER2_WIDTH, LAYER2_HEIGHT, NULL, 0, 0, 0, 0, 0, POSITION_MIDDLE_CENTER);

	// Open image for layer 3
	// Get the display dimensions
	swidth = gdispGetWidth();
	xil_printf("swidth: %d\r\n", swidth);
	sheight = gdispGetHeight();
	xil_printf("sheight: %d\r\n", sheight);

	// Set up IO for our image
	status = gdispImageOpenFile(p_Image, ims_logo);
	//xil_printf("status mainopen: %d\r\n", status);
//	p_byte = (uint8_t *)p_Image->priv;
//	xil_printf("status: %d\r\n", status);
//	xil_printf("p_Image->type: %d\r\n", p_Image->type);
//	xil_printf("p_Image->flags: %x\r\n", p_Image->flags);
//	xil_printf("p_Image->bgcolor: %x\r\n", p_Image->bgcolor);
//	xil_printf("p_Image->memused: %d\r\n", p_Image->memused);
//	xil_printf("p_Image->maxmemused: %d\r\n", p_Image->maxmemused);
//
//	xil_printf("p_Image->priv->flags: %x\r\n", p_byte[0]);
//	xil_printf("p_Image->priv->bitdepth: %x\r\n", p_byte[1]);
//	xil_printf("p_Image->priv->mode: %x\r\n", p_byte[2]);
//	xil_printf("p_Image->priv->bpp: %x\r\n", p_byte[3]);

	status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2, sheight - p_Image->height - BORDER_Y * 2, p_Image->width, p_Image->height, 0, 0);
	//xil_printf("status maindraw: %d\r\n", status);
	gdispImageClose(p_Image);

	//clear_layer1(FRAMEBUFFER0);
	clear_layer1_all(current_framebuffer, TRUE);
	if(flag_use_2_framebuffers == TRUE)
		clear_layer1_all(next_framebuffer, TRUE);
	layer1_blit_corners(current_framebuffer);
	if(flag_use_2_framebuffers == TRUE)
		layer1_blit_corners(next_framebuffer);

	// Blit surface_2 to the real display at the new position
	gdispBlitArea(BORDER_X, LAYER0_HEIGHT - LAYER2_HEIGHT - BORDER_Y, LAYER2_WIDTH, LAYER2_HEIGHT, surface_2);

	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) preload ST\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	g_ms_tick_tmp = g_ms_tick;
	preload_picture_to_memory();
    xil_printf("tick(%d) = %d;\t%%%s:%s(%d) preload SP, spend %d msec\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__, (g_ms_tick - g_ms_tick_tmp) * 1);

	Xil_DCacheFlush();

	// Set up Mixer Layers
	RunMixer(periphs_inst.p_vid_output_mixer_l2_inst);

	XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) video output OK\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);

	/*
	 * Run the Iic polled example in master mode, specify the Device
	 * ID that is specified in xparameters.h.
	 */
	status = IicPsMasterInit(IIC_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("IicPsMasterInit Failed\r\n");
		return XST_FAILURE;
	}
	xil_printf("Successfully ran IicPsMasterInit\r\n");
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__,__func__,__LINE__);

	/*
	 * Run the polled example, specify the Device ID that is
	 * generated in xparameters.h.
	 */
	status = XAdcInit(XADC_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("XAdcInit Failed\r\n");
		return XST_FAILURE;
	}
	xil_printf("Successfully ran XAdcInit\r\n");

	#ifdef USE_DEBUG_MESSAGE
	dongle_usage_count = check_dongle_usage_count();
	xil_printf("dongle_usage_count = %d\r\n", dongle_usage_count);

	fw_write_count = check_fw_write_count();
	xil_printf("fw_write_count = %d\n\r", fw_write_count);
	#endif

	// Set the widget defaults
	//gwinSetDefaultFont(gdispOpenFont("*"));
	gwinSetDefaultFont(gdispOpenFont("iskpota232"));
	gwinSetDefaultStyle(&BlackWidgetStyle, FALSE);
	//gdispClear(White);

	// create the widget
	createWidgets();

	// Detect Dongle status and draw image
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	//xil_printf("check dongle status ST\n\r");
	g_conn_status = psuart0_dongle_ping();
	g_conn_status_old = g_conn_status;
	//xil_printf("check dongle status SP\n\r");
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);

#ifdef USE_PREVENT_REUSE
	read_camera_info_from_eeprom();
	get_RTC_data();
	camera_pull_out_time = get_time_interval(CURRENT_TIME);
	xil_printf("camera_pull_out_time = %d Seconds\n\r", camera_pull_out_time);

	last_power_off_time = get_time_interval(LAST_POWER_OFF);
	g_ms_uptime = 0;

	xil_printf("difftime_LAST_POWER_OFF = %d seconds\n\r", last_power_off_time);
	xil_printf("difftime_LAST_POWER_OFF = ");
	print_time(last_power_off_time);

	write_system_uptime_to_eeprom(system_power_on_count);
	write_every_minute = (rtc.tm_sec + 10) % 60;
	xil_printf("write_every_minute = %02d\n\r", write_every_minute);

	total_power_off_time_sec = total_power_off_time * 60;
	total_power_off_time += (last_power_off_time + g_ms_uptime / 1000)/60;
	total_power_off_time_sec += last_power_off_time + g_ms_uptime / 1000;

	xil_printf("\n\rtotal_power_off_time = %3d minutes\n\r", total_power_off_time);
	xil_printf("\n\rtotal_power_off_time = %3d seconds\n\r", total_power_off_time_sec);
	char str[40];
	sprintf(str, "total_power_off_time : %ld minutes\n", total_power_off_time);
	debug_console_print(str);
	write_total_power_off_time_to_eeprom();

	xil_printf("camera_use_time_from_eeprom = %d\n\r", camera_use_time_from_eeprom);
	xil_printf("camera_nouse_time_from_eeprom = %d\n\r", camera_nouse_time_from_eeprom);
	xil_printf("flag_camera_invalid = %d\n\r", flag_camera_invalid);

	if(flag_camera_invalid == FALSE)
	{
		xil_printf("flag_camera_invalid = FALSE\n\r");
		if(camera_use_time_from_eeprom == 0)
			flag_camera_status = CAMERA_NEW;
		else if(camera_use_time_from_eeprom < THIRTY_MINUTE)
			flag_camera_status = CAMERA_1M;
		else
			flag_camera_status = CAMERA_30M;

		if(flag_camera_status == CAMERA_1M)
		{
			if((total_power_off_time > THIRTY_MINUTE) && (last_power_off_time > 130))
			{
				flag_camera_invalid = TRUE;
				write_invalid_to_eeprom(VIDEO_FORBID_POWEROFF_LONG_1M);
				xil_printf("Invalid a VIDEO_FORBID_POWEROFF_LONG_1M, total_power_off_time = %d min, last = %d sec\n\r", total_power_off_time, last_power_off_time);
				debug_console_print("Invalid camera for POWEROFF_LONG_1M\n");
			}
		}
		else if(flag_camera_status == CAMERA_30M)
		{
			if((total_power_off_time_sec > 130) && (last_power_off_time > 130))			//1min for CAMERA_30M power off 1min = 130 sec
			{
				flag_camera_invalid = TRUE;
				write_invalid_to_eeprom(VIDEO_FORBID_POWEROFF_LONG_30M);
				xil_printf("Invalid b VIDEO_FORBID_POWEROFF_LONG_30M, total_power_off_time_sec = %d sec, last = %d\n\r", total_power_off_time_sec, last_power_off_time);
				debug_console_print("Invalid camera for POWEROFF_LONG_30M\n");
			}
		}
	}
	else
	{
		xil_printf("flag_camera_invalid == TRUE, do nothing.\n\r");
	}






	#endif

	//Xil_DCacheEnable();
	if(g_conn_status == DONGLE_NONE)
	{
			xil_printf("no dongle or camera step_1\n\r");
			SetDongleLedGreenStatus(0);		//turn off green led on dongle
			// Set Flags
			g_dongle_plugged = 0;
			g_camera_plugged = 0;
			// Show Message
			RequestShowPicture(0);
	}
	else if (g_conn_status == CAMERA_NONE)
	{
			xil_printf("\n\r\n\rdongle only step_2\n\r");
			SetDongleLedGreenStatus(0);		//turn off green led on dongle
			// Set Flags
			g_dongle_plugged = 1;
			g_camera_plugged = 0;
			// Show Message
			RequestShowPicture(1);
	}
	else	//CAMERA_OK
	{
			xil_printf("dongle+camera step_3 power on\n\r");
			SetDongleLedGreenStatus(1);		//turn on green led on dongle
			// Set Flags
			g_dongle_plugged = 1;
			g_camera_plugged = 1;
			if(g_procedure_started == STOP)
			{
				// Show Message
				RequestShowPicture(2);
			}
			else
			{
				// Clear Message
				RequestShowPicture(-1);
			}
			XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);

			xil_printf("tick(%d) = %d;\t%%%s:%s(%d) power on check\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
			//debug_console_print("power on check\n");
			//read_serial_from_camera();
			//check_camera_serial();
	}

	psuart0_exposure(3);

	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) USB init ST\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	// USB Init
	ulpi_init();
	ulpi_set_vbus(TRUE);

	tusb_init(); // initialize tinyusb stack

	keyboard_host_app_init(); // Keyboard Host Init
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) USB init SP\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	//mouse_host_app_init(); // Mouse Host Init
	//Xil_DCacheFlush(); // Flush DCache after USB Init();

	// create the widget
	#ifndef USE_DEBUG_VIDEO_OUTPUT
	createConsoleWidgets();
	#endif

	draw_picture(g_conn_status);
	if(g_conn_status == CAMERA_OK)				//all plugged, dongle + camera
		flag_check_camera_reuse = CHECK_CAMERA_REUSE;
	else										//no dongle, no camera
		flag_check_camera_reuse = CHECK_CAMERA_REUSE_CLEAR;

	#ifdef USE_DEBUG_MESSAGE
	show_dongle_usage_count(dongle_usage_count);
	show_fw_write_count(fw_write_count);
	#endif

	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) bootup OK\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);


	//font_t font = gdispOpenFont("DejaVu*");

	//gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	//gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	//gdispDrawString(680, 950, "0", font, Red);

	//gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));

	if(flag_use_2_framebuffers == TRUE)
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));

	#ifdef USE_DEBUG_MESSAGE
	show_dongle_usage_count(dongle_usage_count);
	show_fw_write_count(fw_write_count);
	#endif

	createWidgets();

	status = gdispImageOpenFile(p_Image, ims_logo);

	status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2, sheight - p_Image->height - BORDER_Y * 2, p_Image->width, p_Image->height, 0, 0);
	gdispImageClose(p_Image);

	//gdispDrawBox(LAYER0_WIDTH - LAYER1_WIDTH - BORDER_X, BORDER_Y, LAYER1_WIDTH, LAYER1_HEIGHT, Blue);
	//gdispFillCircle(1850, 950, 10, White);	//for showing using 2 framebuffers

#ifdef USE_DEBUG_CONSOLE
	if(flag_enable_debug_console == TRUE)
	{
		debug_console_init();
	}
#endif
	//gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
	if(flag_use_2_framebuffers == TRUE)
	{
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	//gdispDrawString(680, 950, "1", font, Red);

    pixmap_draw(pixmap_2, surface_2, LAYER2_WIDTH, LAYER2_HEIGHT, NULL, 0, 0, 0, 0, 0, POSITION_MIDDLE_CENTER);
	// Blit surface_2 to the real display at the new position
	gdispBlitArea(BORDER_X, LAYER0_HEIGHT - LAYER2_HEIGHT - BORDER_Y, LAYER2_WIDTH, LAYER2_HEIGHT, surface_2);

	//gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	}

#ifdef FAN_OFF
	xil_printf("\n\rTurn off fan\n\r");
	ps_gpio_setup(&periphs_inst, GPIO_FAN_EN, 0);
	fan_speed = 0;
#endif

#ifdef TEMPERATURE_DEBUG
	xil_printf("\n\r\n\r");
	XAdcGetData();
	xil_printf("\n\r\n\r");
#endif

	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) main_loop ST\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
	main_loop();

    cleanup_platform();
    return 0;
}

#define RELEASE_INFO "Insight Medical Solutions Inc., August-17-2018\n"
#define PROMPT "[aries@ims]# "
#define UART_BUFFER_LEN 20
u8 buffer[UART_BUFFER_LEN];
u8 esc_buffer[3];
u8 ptr = 0;
u8 esc_ptr = 0;
u8 length = 0;
u8 vid_error_cnt = 0;

u8 iii = 0;

void main_loop()
{
	// Local variables
	char c[1]  = {0};
	uint32_t skip_usb_check_cnt = 0;
	uint32_t cnt = 0;
	u32 DataRead;
	u8 SW_Start_old = 0;
	u8 SW_Brighten_old = 0;
	XGpioPs *Gpio = periphs_inst.p_ps_gpio_inst;

#ifdef USE_DEBUG_VIDEO_OUTPUT
	uint32_t cnt2 = 0;
#endif

#ifdef USE_IMS_LINK
	unsigned int DongleAddr;
	unsigned char DongleData;
#endif

	while (1)	// Main loop
	{
#ifdef USE_DEBUG_VIDEO_OUTPUT
		if((cnt2 > 7000) && (cnt2 < 18000) && ((cnt2 % 800) == 0))
		{
			char str[40];
			font_t font = gdispOpenFont("iskpota232");

			sprintf(str, "%d - %c", g_ms_tick, 0x41+(cnt2-7000)/800);
			gdispFillArea(0, 1020, 150, 40, Black);
			//gdispFillString(700, 300 + ((cnt2-7000)/800)*35, str, font, White, Red);
			gdispFillString(0, 1020, str, font, White, Red);

			xil_printf("tick(%d) = %d;\t%%%s:%s(%d) - cnt2 = %d\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__, cnt2);

		}
		cnt2++;
#endif

		if((cnt++) == 10000)
		{
			DataRead = XGpioPs_Read(Gpio, XGPIOPS_BANK2);

			//xil_printf("DataRead = 0x%08x\r\n", DataRead);
			cnt = 0;

			if((DataRead & LED_1) && (DataRead & LED_CEN) && (DataRead & SW_SMART))
			{
				going_to_engineering_mode_cnt++;
				xil_printf("Going to engineering mode %d\r\n", going_to_engineering_mode_cnt);
			}
			else
			{
				if(going_to_engineering_mode_cnt > 0)
				{
					going_to_engineering_mode_cnt--;
				}
			}
		}

#ifdef USE_PREVENT_REUSE
		if(flag_check_camera_reuse != CHECK_CAMERA_REUSE_NONE)
		{
			if(flag_check_camera_reuse == CHECK_CAMERA_REUSE_CLEAR)	//no dongle, no camera
			{
				check_camera_reuse_clear();
			}
			else if(flag_check_camera_reuse == CHECK_CAMERA_REUSE)	//dongle + camera OK
			{
				check_camera_reuse();
			}
			flag_check_camera_reuse = CHECK_CAMERA_REUSE_NONE;
		}

		if(flag_updateShowCameraDate == 1)
		{
			flag_updateShowCameraDate = 0;
			updateShowCameraDate();
		}
#endif

		if((flag_engineering_mode == 0) && (flag_camera_access == 0))
		{
		if(update_dongle_status == 1)
		{
			update_dongle_status = 0;

		//xil_printf("ping.\n\r");
		g_conn_status = psuart0_dongle_ping();

		if((g_conn_status_old != g_conn_status) && (flag_camera_access == 0))
		{
			if(g_conn_status == DONGLE_NONE)
			{
				xil_printf("no dongle or camera step_1\n\r");
				SetDongleLedGreenStatus(0);		//turn off green led on dongle
				// Set Flags
				g_dongle_plugged = 0;
				g_camera_plugged = 0;
				// Show Message
				RequestShowPicture2(0);
				//time_tick = 0;
				time_tick = stop_time_total;
#ifdef USE_PREVENT_REUSE
				char str[40];
				sprintf(str, "no dongle : %s", asctime(&rtc));
				debug_console_print(str);
#endif
			}
			else if (g_conn_status == CAMERA_NONE)
			{
				xil_printf("\n\r\n\rdongle only step_2\t%s\n\r", asctime(&rtc));
				SetDongleLedGreenStatus(0);		//turn off green led on dongle
				clear_connect_timer();
				start_time_total += start_time_this;
				start_time_this = 0;
				start_count_total += start_count_this;
				start_count_this = 0;
				//time_tick = 0;
				time_tick = stop_time_total;

				// Set Flags
				g_dongle_plugged = 1;
				g_camera_plugged = 0;
				// Show Message
				RequestShowPicture2(1);
				g_ms_tick_start = g_ms_tick;

#ifdef USE_PREVENT_REUSE
				if(flag_forbid_video == TRUE)
				{
					xil_printf("do not update camera pull out time\n\r");
				}
				else
				{
					camera_pull_out_time = get_time_interval(CURRENT_TIME);
					xil_printf("camera_pull_out_time = %d Seconds\n\r", camera_pull_out_time);

					if(g_conn_status_old == CAMERA_OK)
					{
						xil_printf("let flag_donot_care_power_off = TRUE\n\r");
						flag_donot_care_power_off = TRUE;
					}
					else
					{
						xil_printf("do not let flag_donot_care_power_off = TRUE, g_conn_status_old = %d\n\r", g_conn_status_old);
					}
				}
				if(g_procedure_started == START) {
					xil_printf("g_procedure_started = START\n\r");
				}
				else
					xil_printf("g_procedure_started = STOP\n\r");

				char str[40];
				sprintf(str, "pull out : %s", asctime(&rtc));
				debug_console_print(str);
#endif
			}
			else	//CAMERA_OK
			{
#ifdef USE_PREVENT_REUSE
				char str[40];
				sprintf(str, "plug in : %s", asctime(&rtc));
				debug_console_print(str);

				if(flag_forbid_video == TRUE)
				{
					xil_printf("\n\r\n\rforbid video mode.... abort\t%s", asctime(&rtc));
					xil_printf("\n\r%s", PROMPT);
				}
				else
#endif
				{
					xil_printf("\n\r\n\rdongle+camera step_3 --------------\t%s\n\r", asctime(&rtc));
					SetDongleLedGreenStatus(1);		//turn on green led on dongle
					clear_disconnect_timer();
					stop_time_total += stop_time_this;
					stop_time_this = 0;
					stop_count_total += stop_count_this;
					stop_count_this = 0;
					//time_tick = 0;
					time_tick = start_time_total;
					// Set Flags
					g_dongle_plugged = 1;
					g_camera_plugged = 1;

					if(g_procedure_started == STOP)
					{
						// Show Message
						RequestShowPicture2(2);
						clear_connect_timer();
						start_time_total += start_time_this;
						start_time_this = 0;
						start_count_total += start_count_this;
						start_count_this = 0;
					}
					else
					{
						// Clear Message
						RequestShowPicture2(-1);
						clear_disconnect_timer();
						stop_time_total += stop_time_this;
						stop_time_this = 0;
						stop_count_total += stop_count_this;
						stop_count_this = 0;
					}

					if(XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1) == 0)
					{
						XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
					}
					g_ms_tick_start = g_ms_tick;

#ifdef USE_DEBUG_MESSAGE
					increase_dongle_usage_count();
					show_dongle_usage_count(dongle_usage_count);
					if(flag_use_2_framebuffers == TRUE)
					{
						gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
						show_dongle_usage_count(dongle_usage_count);
						gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
					}
#endif
				}
			}
			//Xil_DCacheFlush();
			//Xil_DCacheDisable();

			draw_picture(g_conn_status);
			if(g_conn_status == CAMERA_OK)		//all plugged, dongle + camera
				flag_check_camera_reuse = CHECK_CAMERA_REUSE;
			else								//no dongle, no camera
				flag_check_camera_reuse = CHECK_CAMERA_REUSE_CLEAR;
			g_conn_status_old = g_conn_status;

			psuart0_exposure(3);
		}

		if(g_conn_status == DONGLE_NONE) // Nothing is plugged in
		{
			if(g_procedure_started == START) { // Procedure not started

			}
			else {
				if(g_dongle_plugged || g_camera_plugged){
					// Update Flags
					g_dongle_plugged = 0;
					g_camera_plugged = 0;
					// Dongle unplugged
					xil_printf("no dongle or camera step_1\n\r");
					SetDongleLedGreenStatus(0);		//turn off green led on dongle
					// Show Message to plug in dongle
					XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
					RequestShowPicture2(0);
					xil_printf("\n\r%s", PROMPT);
				}
			}
		}
		else if(g_conn_status == CAMERA_NONE){ // Only dongle is plugged in

			if(g_procedure_started == START){ // Procedure started

			}
			else { // Procedure hasn't started
				if(g_dongle_plugged == 0 || g_camera_plugged){
					// Update Flags
					g_dongle_plugged = 1;
					g_camera_plugged = 0;
					// Dongle plugged
					xil_printf("dongle plugged step_2\n\r");
					SetDongleLedGreenStatus(0);		//turn off green led on dongle
					clear_connect_timer();
					start_time_total += start_time_this;
					start_time_this = 0;
					start_count_total += start_count_this;
					start_count_this = 0;
					XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
					RequestShowPicture2(1);
					xil_printf("\n\r%s", PROMPT);
				}
			}
		}
		else { // Everything is plugged in		//CAMERA_OK
			if(g_procedure_started == START) { // Procedure not started

			}
			else {
				if(g_dongle_plugged == 0 || g_camera_plugged == 0){
					// Update Flags
					g_dongle_plugged = 1;
					g_camera_plugged = 1;
					// Dongle plugged

					//Xil_DCacheEnable();
					xil_printf("all plugged step_3\n\r");
					SetDongleLedGreenStatus(1);		//turn on green led on dongle
					clear_disconnect_timer();
					stop_time_total += stop_time_this;
					stop_time_this = 0;
					stop_count_total += stop_count_this;
					stop_count_this = 0;
					XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
					RequestShowPicture2(2);
#ifdef USE_DEBUG_MESSAGE
					increase_dongle_usage_count();
					show_dongle_usage_count(dongle_usage_count);
					if(flag_use_2_framebuffers == TRUE)
					{
						gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
						show_dongle_usage_count(dongle_usage_count);
						gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
					}
#endif
					xil_printf("\n\r%s", PROMPT);
				}
			}
		}

		}
		else if(update_usb_status == 1)
		{
			update_usb_status = 0;

			//xil_printf("david0823: %s:%s(%d) ST usb_reset_status = %d\r\n",__FILE__,__func__,__LINE__,usb_reset_status);

			if((usb_reset_status_old == 0) && (usb_reset_status == 1))
			{
				xil_printf("A");
				skip_usb_check_cnt++;
				g_ms_tick_wait = g_ms_tick;
				usb_reset_status_old = 1;
			}
			else if((usb_reset_status_old == 1) && (usb_reset_status == 1))
			{
				xil_printf("B %d ", skip_usb_check_cnt);
				skip_usb_check_cnt++;
				//xil_printf("david0823: %s:%s(%d) wait %d\r\n",__FILE__,__func__,__LINE__,skip_usb_check_cnt);
				if(skip_usb_check_cnt > 3)
				{
					xil_printf("C");
					//xil_printf("david0823: %s:%s(%d) OK\r\n",__FILE__,__func__,__LINE__);
					skip_usb_check_cnt = 0;
					usb_reset_status = 0;
					usb_reset_status_old = 0;
				}
			}
			else
			{
				updateConsoleWidgets();
			}
		}
		else if((flag_is_keyboard_mounted == 1) && (flag_get_usb_descriptor_done == 0))
		{
			//First time get usb descriptor
			flag_get_usb_descriptor_done = 1;
			get_usb_descriptor();
		}
		else if((update_usb_descriptor_status == 1) && (flag_get_usb_descriptor_done == 1) && (g_ms_tick > 6000) && (usb_reset_status == 0))
		{
			//Get usb descriptor when keyboard is mounted
			update_usb_descriptor_status = 0;
			//xil_printf("G\r\n");
			get_usb_descriptor();	//here

			psusb0_hal_interrupt_disable(0);
			hal_interrupt_disable(0);
			get_usb_descriptor();
			hal_interrupt_enable(0);
			psusb0_hal_interrupt_enable(0);

		}
		else if((update_usb_descriptor_status == 1) && (flag_is_keyboard_mounted == 0) && (g_ms_tick > 6000) && (usb_reset_status == 0))
		{
			//Get usb descriptor when keyboard is un-mounted
			//xil_printf("\n\r3333\t");
			update_usb_descriptor_status = 0;
			//get_usb_descriptor();
			//xil_printf("f");


			psusb0_hal_interrupt_disable(0);
			hal_interrupt_disable(0);
			xil_printf("Uxxxxxxxxxxx\r\n");
			get_usb_descriptor();
			hal_interrupt_enable(0);
			psusb0_hal_interrupt_enable(0);

		}
		else if((flag_is_keyboard_mounted == 1) && (flag_is_keyboard_mounted_old == 0))
		{
			xil_printf("tick(%d) = %d;\t%%%s:%s(%d) KEYBOARD OK\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
			draw_picture(KEYBOARD_OK);
			flag_is_keyboard_mounted_old = flag_is_keyboard_mounted;
			xil_printf("\n\r%s", PROMPT);
		}
		else if((flag_is_keyboard_mounted == 0) && (flag_is_keyboard_mounted_old == 1))
		{
			draw_picture(KEYBOARD_NONE);
			flag_is_keyboard_mounted_old = flag_is_keyboard_mounted;
		}
		else if(flag_is_keyboard_mounted == 0)
		{
			flag_get_usb_descriptor_done = 0;
		}
		else if(flag_setup_exposure == 1)	//for DARKEN button
		{
			flag_setup_exposure = 0;
			psuart0_exposure(g_exposure);
		}
		}

		if(flag_camera_access == 0)
		{
		if(g_updated) {
			g_updated = 0;
#ifdef USE_PREVENT_REUSE
			if(flag_forbid_video == TRUE)
			{
				xil_printf("\n\r\n\rforbid video mode.... abort\r\n");
				xil_printf("\n\r%s", PROMPT);
			}
			else
#endif
			{
				if(g_procedure_started == START) { // Remove all pictures
					xil_printf("\n\r\n\rupdate remove picture START\t%s", asctime(&rtc));
					xil_printf("\n\r%s", PROMPT);
					RequestShowPicture2(-1);
					clear_disconnect_timer();
					stop_time_total += stop_time_this;
					stop_time_this = 0;
					stop_count_total += stop_count_this;
					stop_count_this = 0;

					if(g_conn_status_old != CAMERA_OK)
					{
						g_conn_status_old = CAMERA_CLEAR;		//force draw picture again
					}
					g_ms_tick_start = g_ms_tick;
				}
				else { // Add back picture
					xil_printf("\n\r\n\rupdate add picture START step_3 ----------------\t%s", asctime(&rtc));
					xil_printf("\n\r%s", PROMPT);
					RequestShowPicture2(2);
					clear_connect_timer();
					start_time_total += start_time_this;
					start_time_this = 0;
					start_count_total += start_count_this;
					start_count_this = 0;
				}
				psuart0_exposure(g_exposure);
			}
		}
		}

		//  Run USB Host Task Handlers
		tusb_task_runner(); // USB House Keeping
	    keyboard_host_app_task(NULL); // Keyboard tasks
	    //mouse_host_app_task(NULL); // Mouse Tasks
		//Xil_DCacheFlush();

	    if(update_RTC_status == 1)
	    {
	    	update_RTC_status = 0;
	    	//xil_printf("tick(%d) = %d;\t%%%s:%s(%d) call update_RTC_data mm = %d ss = %d\r\n", tick_cnt++, g_ms_tick, __FILE__,__func__,__LINE__,rtc.tm_min, rtc.tm_sec);
	    	update_RTC_data();

	    	check_draw_command();

	    	if(flag_engineering_mode == TRUE)
	    	{
	    		XAdcGetCurrentTemperature();
	    	}

	    	#ifdef TEMPERATURE_DEBUG
    		XAdcGetCurrentTemperature();
	    	if(temperature_array_index <= DEBUG_LENGTH)
	    	{
	    		XAdcGetData();
	    	}
			#endif

	    	/*
	    	iii++;
	    	xil_printf("%x %d %c", 0x40+iii, 0x40+iii, 0x40+iii);
	    	if(iii > 26)
	    		iii = 0;
	    	*/
	    }

	    /* old engineering mode
	    if((flag_engineering_mode_old == 0) && (flag_engineering_mode == 1))
		{
	    	flag_engineering_mode_old = 1;
	    	show_engineering_mode();
		}
		*/

		//if((cnt++) == 100)
		{
		DataRead = XGpioPs_Read(Gpio, XGPIOPS_BANK2);

		if(DataRead & 0x1000)
		{
			if(SW_Start_old == 0)
			{
				xil_printf("\n\rS 0x%08x\t%s\r\n", DataRead, asctime(&rtc));
				xil_printf("tick(%d) = %d;\t%%%s:%s(%d) press key\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
				SW_Start_old = 1;
				// Check if we are in a active session
#ifdef USE_PREVENT_REUSE
				if(flag_forbid_video == FALSE)
#endif
				{
					if(g_procedure_started == START) { // We are in a active session
						if(g_conn_status == CAMERA_OK)	//dongle + camera
						{
							xil_printf("turn off\r\n");
							g_updated = 1;
							g_procedure_started = STOP;
							time_tick = 0;
						}
						else
						{
							xil_printf("no turn off, no dongle or camera\r\n");
						}
					}
					else
					{
						if(g_conn_status == CAMERA_OK)	//dongle + camera
						{
							xil_printf("turn on\r\n");
							g_updated = 1;
							g_procedure_started = START;
							time_tick = start_time_total;
						}
						else
						{
							xil_printf("no turn on, no dongle or camera\r\n");
						}
					}
				}
			}
		}
		else
			SW_Start_old = 0;

		if(DataRead & 0x8000)
		{
			if(SW_Brighten_old == 0)
			{
				xil_printf("B 0x%08x\r\n", DataRead);
				SW_Brighten_old = 1;
				//xil_printf("BRIGHT\r\n");
				// Only lower exposure if at values above 1
				if(g_exposure < 5) {
					g_exposure++;
					psuart0_exposure(g_exposure);
					switch(g_exposure) {

						case 1:
							XGpioPs_WritePin(Gpio, GPIO_LED_1, 1);
							XGpioPs_WritePin(Gpio, GPIO_LED_2, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_3, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_4, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_5, 0);
							xil_printf("LED_1\r\n");
							break;
						case 2:
							XGpioPs_WritePin(Gpio, GPIO_LED_1, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_2, 1);
							XGpioPs_WritePin(Gpio, GPIO_LED_3, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_4, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_5, 0);
							xil_printf("LED_2\r\n");
							break;

						case 3:
							XGpioPs_WritePin(Gpio, GPIO_LED_1, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_2, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_3, 1);
							XGpioPs_WritePin(Gpio, GPIO_LED_4, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_5, 0);
							xil_printf("LED_3\r\n");
							break;

						case 4:
							XGpioPs_WritePin(Gpio, GPIO_LED_1, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_2, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_3, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_4, 1);
							XGpioPs_WritePin(Gpio, GPIO_LED_5, 0);
							xil_printf("LED_4\r\n");
							break;

						case 5:
							XGpioPs_WritePin(Gpio, GPIO_LED_1, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_2, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_3, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_4, 0);
							XGpioPs_WritePin(Gpio, GPIO_LED_5, 1);
							xil_printf("LED_5\r\n");
							break;
						default:
							xil_printf("Bright Function Error\r\n");
							break;
					}
				}
				usleep(200000);
			}
		}
		else
			SW_Brighten_old = 0;
		}

		c[0] = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);

		#ifndef USE_IMS_LINK

		if(c[0] == 0)
			continue;

		buffer[ptr] = c[0];
		esc_buffer[esc_ptr] = c[0];
		ptr++;

		if(c[0] == 0x0d)	//Enter
		{
			/*
			for(i=0;i<ptr;i++)
			{
				xil_printf("0x%x ", buffer[i]);
			}
			xil_printf("\n\r");
			*/

			length = ptr;
			ptr = 0;
			/*
			//for(i = 0 ; i < (length - 1); i++)
				//xil_printf("%c", 0x18);
			for(i = 0 ; i < (length - 1); i++)
				xil_printf("%c", 0x7F);
			xil_printf("---");
			*/

			if(length == 1)
			{
				last_command_length = 0;
				last_command[0] = 'h';
				last_command[1] = 'e';
				last_command[2] = 'l';
				last_command[3] = 'p';
			}
			parse_uart_command();
			xil_printf("\n\r%s", PROMPT);
		}
		else if(c[0] == 0x03)	//ctrl + C
		{
			#ifdef TEMPERATURE_DEBUG
				xil_printf("\n\r\n\rbreak temperature debug...\n\r");
				temperature_array_index = DEBUG_LENGTH + 1;
			#endif
				length = 0;
				ptr = 0;
				xil_printf("\n\r%s", PROMPT);
				continue;
		}
		else
		{
			if(c[0] == 0x1B)
			{
				esc_mode = 1;
				buffer[0] = c[0];
				ptr = 1;
				continue;
			}
			else if(c[0] == 0x7F)
			{
				if(ptr >= 2)
				{
					xil_printf("%c", 0x7F);
					//xil_printf(".");
					ptr -= 2;
				}
				else
					ptr--;

				continue;
			}

			if(esc_mode == 1)
			{
				if(ptr == 3)
				{
					//ptr = 0;
					parse_uart_esc_command();
					esc_mode = 0;
				}
				continue;
			}

			if(isprint(c[0]))
				xil_printf("%c", c[0]);
			else
				xil_printf("0x%02x", c[0]);
		}
		usleep(100);
	#else	//USE_IMS_LINK

		uint32_t status;
		if(flag_receive_camera_serial == 1)
		{
			received_camera_serial[received_camera_serial_index] = c[0];
			received_camera_serial_index++;
			if(received_camera_serial_index == 16)
			{
				received_camera_serial_index = 0;
				flag_receive_camera_serial = 0;

				int i;
				char str[40];
				sprintf(str, "sn: %02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x\n\r",
						received_camera_serial[0], received_camera_serial[1], received_camera_serial[2], received_camera_serial[3],
						received_camera_serial[4], received_camera_serial[5], received_camera_serial[6], received_camera_serial[7],
						received_camera_serial[8], received_camera_serial[9], received_camera_serial[10], received_camera_serial[11],
						received_camera_serial[12], received_camera_serial[13], received_camera_serial[14], received_camera_serial[15]);
				debug_console_print(str);

				for(i = 0;i < 16 ; i++)
				{
					user_serial_data[i] = received_camera_serial[i];		//data prepare to write to flash

				}
				xil_printf("\n\rcamera erase data\n\r");
				xil_printf("\n\rENABLE_CONFIGURE\n\r");
				ENABLE_CONFIGURE(1);
				xil_printf("\n\rSET_ADDRESS\n\r");
				SET_ADDRESS(SN_PAGE);
				xil_printf("\n\rERASE_UFM\n\r");
				ERASE_UFM();
				xil_printf("\n\rDISABLE_CONFIGURE\n\r");
				ENABLE_CONFIGURE(0);
				//xil_printf("\n\rwrite_serial_to_camera 111\n\r");

				xil_printf("\n\rsleep st\n\r");
				sleep(4);	//must be 2
				xil_printf("\n\rsleep sp\n\r");
				//xil_printf("\n\rwrite_serial_to_camera\n\r");

				write_user_serial_to_camera();
				sleep(1);
				flag_camera_access = 0;
			}



		}
		else if((start_data == 0) && ((c[0] == 0xAA) || (c[0] == 0xA0) || (c[0] == 0xC0) || (c[0] == 0xC1) || (c[0] == 0xD1) || (c[0] == 0xFF)))
		{
			start_data = 1;
			gui_cmd[gui_cmd_index] = c[0];
			gui_cmd_index++;
			//xil_printf("david0410: %s:%s(%d) ST\r\n", __FILE__, __func__, __LINE__);
			g_conn_status = psuart0_dongle_ping();	//???? needed
		}
		else if(start_data == 1)
		{
			gui_cmd[gui_cmd_index] = c[0];
			gui_cmd_index++;
			if(gui_cmd_index == 5)
			{
				gui_cmd_index = 0;
				start_data = 0;

				u16 checksum = CalcCheckSum(gui_cmd, 4);

				char str[40];
				if(gui_cmd[4] != checksum)
				{
					sprintf(str, "cmd %02x %02x %02x %02x %02x command fail checksum fail\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
					debug_console_print(str);
				}
				else
				{
					//xil_printf("cmd ok %2x %2x %2x %2x %2x\n", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
					if(gui_cmd[0] == 0xAA)
					{
						if((gui_cmd[1] == 0x00) && (gui_cmd[2] == 0xAA) && (gui_cmd[3] == 0xAA))	//camera serial
						{
							sprintf(str, "cmd ok %02x %02x %02x %02x %02x   camera serial read\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
							debug_console_print(str);

							xil_printf("\n\rread_serial_from_camera\n\r");
							status = read_serial_from_camera();			//camera 0xA

							usleep(500000);

							if(status == XST_SUCCESS)
							{
								Send_IMS_Data_Cmd(0xC1, 0x00, 0x00);
								int i;
								for(i = 0; i < 16; i++)
								{
									xil_printf("%c", camera_serial_new[i]);
								}
								sleep(1);
							}
							else
							{
								Send_IMS_Data_Cmd(0xFF, 0xFF, 0xFF);
							}


						}
						else if((gui_cmd[1] == 0x01) && (gui_cmd[3] == 0xAA))	//camera flash
						{
							int page = gui_cmd[2];
							sprintf(str, "cmd ok %02x %02x %02x %02x %02x   camera flash read\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
							debug_console_print(str);
							sprintf(str, "camera flash read, page = 0x%x = %d\n\r", page, page);
							debug_console_print(str);

							if((page < 0x9) ||(page > 0xF))
							{
								xil_printf("\n\rread_serial_from_camera, abort\n\r");

							}
							else
							{
								int i;
								xil_printf("camera flash read, page = 0x%x = %d\n\r", page, page);
								u8 camera_data_tmp[16] = {0};
								read_data_from_camera(page);
								for(i = 0; i < 16; i++)
								{
									camera_data_tmp[i] = page_data[i];
								}
								sleep(1);

								Send_IMS_Data_Cmd(0xD1, page, 0x00);
								for(i = 0; i < 16; i++)
								{
									xil_printf("%c", camera_data_tmp[i]);
								}
							}




						}
						else
						{




						}

					}
					else if(gui_cmd[0] == 0xA0)
					{
						DongleAddr = gui_cmd[1] << 8 | gui_cmd[2];
						DongleData = gui_cmd[3];

						dongle_write_data(DongleAddr, DongleData);
					}
					else if(gui_cmd[0] == 0xC0)
					{
						if((gui_cmd[1] == 0x12) && (gui_cmd[2] == 0x34) && (gui_cmd[3] == 0x56))
						{
							flag_camera_access = 1;
							sprintf(str, "cmd ok %02x %02x %02x %02x %02x   camera serial write\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
							debug_console_print(str);
							//wait pc send data......
							flag_receive_camera_serial = 1;
						}
					}
					else if(gui_cmd[0] == 0xC1)
					{
						if((gui_cmd[1] == 0xAB) && (gui_cmd[2] == 0xCD) && (gui_cmd[3] == 0xEF))
						{
							flag_camera_access = 1;
							sprintf(str, "cmd ok %02x %02x %02x %02x %02x   camera serial read\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
							debug_console_print(str);

							xil_printf("\n\rread_serial_from_camera\n\r");
							read_serial_from_camera();			//camera 0xA

							sleep(1);

							Send_IMS_Data_Cmd(0xC1, 0x00, 0x00);
							int i;
							for(i = 0; i < 16; i++)
							{
								xil_printf("%c", camera_serial_new[i]);
							}
							sleep(1);
							flag_camera_access = 0;
						}
					}
					else if(gui_cmd[0] == 0xD1)
					{

						int page = gui_cmd[1];
						sprintf(str, "cmd ok %02x %02x %02x %02x %02x   camera flash read\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
						debug_console_print(str);
						sprintf(str, "camera flash read, page = 0x%x = %d\n\r", page, page);
						debug_console_print(str);


						if((page < 0x9) ||(page > 0xF))
						{
							xil_printf("\n\rread_serial_from_camera, abort\n\r");

						}
						else
						{
							int i;
							xil_printf("camera flash read, page = 0x%x = %d\n\r", page, page);
							u8 camera_data_tmp[16] = {0};
							read_data_from_camera(page);
							for(i = 0; i < 16; i++)
							{
								camera_data_tmp[i] = page_data[i];
							}
							sleep(1);

							Send_IMS_Data_Cmd(0xD1, page, 0x00);
							for(i = 0; i < 16; i++)
							{
								xil_printf("%c", camera_data_tmp[i]);
							}
						}
					}
					else if(gui_cmd[0] == 0xFF)
					{
						if((gui_cmd[1] == 0xAA) && (gui_cmd[2] == 0xBB) && (gui_cmd[3] == 0xCC))
						{
							sprintf(str, "cmd ok %02x %02x %02x %02x %02x   read dongle status\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
							debug_console_print(str);
				#ifdef USE_PREVENT_REUSE
							if(flag_forbid_video == FALSE)
				#endif
							{
								if(g_procedure_started == START) { // We are in a active session
									if(g_conn_status == CAMERA_OK)	//dongle + camera
									{
										xil_printf("turn off\r\n");
										g_updated = 1;
										g_procedure_started = STOP;
										//time_tick = 0;
									}
									else
									{
										xil_printf("no turn off, no dongle or camera\r\n");
									}
								}
								else
								{
									if(g_conn_status == CAMERA_OK)	//dongle + camera
									{
										xil_printf("turn on\r\n");
										g_updated = 1;
										g_procedure_started = START;
										//time_tick = start_time_total;
									}
									else
									{
										xil_printf("no turn on, no dongle or camera\r\n");
									}
								}
							}
						}
						else
						{
						sprintf(str, "cmd ok %02x %02x %02x %02x %02x   read dongle status\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
						debug_console_print(str);
						g_conn_status = psuart0_dongle_ping();
						Send_IMS_Data_Cmd(0xFF, g_conn_status, 0x00);
					}
					}
					else
					{
						sprintf(str, "cmd ok %02x %02x %02x %02x %02x   unknown command\n\r", gui_cmd[0], gui_cmd[1], gui_cmd[2], gui_cmd[3], gui_cmd[4]);
						debug_console_print(str);
					}


				}


			}
			g_conn_status = psuart0_dongle_ping();
		}
		else if(c[0] == 0)
		{
			//debug_console_print("got 0 ");
		}

		//g_conn_status = psuart0_dongle_ping();

		#endif
	}
}

static void updateConsoleWidgets(void)
{
	/* Set a font */
	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	uint8_t reg;
	uint8_t val0 = 0;
	uint8_t val1 = 0;
	uint8_t val2 = 0;
	uint8_t val3 = 0;
	uint8_t val4 = 0;
	uint8_t val5 = 0;
	uint8_t val6 = 0;
	uint8_t val7 = 0;
	uint8_t val8 = 0;
	uint8_t val9 = 0;
	int i;
	uint32_t value = 0;

	reg = ULPI_FC_CTRL;					val0 = ulpi_ReadReg(reg);
	reg = ULPI_IFC_CTRL;				val1 = ulpi_ReadReg(reg);
	reg = ULPI_OTG_CTRL;				val2 = ulpi_ReadReg(reg);
	reg = ULPI_USB_INT_EN_RISE;			val3 = ulpi_ReadReg(reg);
	reg = ULPI_USB_INT_EN_FALL;			val4 = ulpi_ReadReg(reg);

	reg = ULPI_USB_INT_STS;				val5 = ulpi_ReadReg(reg);
	reg = ULPI_USB_INT_LATCH;			val6 = ulpi_ReadReg(reg);
	reg = ULPI_HS_TX_BOOST;				val7 = ulpi_ReadReg(reg);
	reg = ULPI_VENDOR_RID_CONVERSION;	val8 = ulpi_ReadReg(reg);
	reg = ULPI_USB_IO_POWER_MAN;		val9 = ulpi_ReadReg(reg);

	//xil_printf("read value : %02X\n\r", val0);

	if((flag_updateConsoleWidgets == 0) && (flag_updateConsoleWidgets_old == 1))
	{
		flag_updateConsoleWidgets_old = 0;
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
		gwinSetBgColor(GW0b, Black);
		gwinClear(GW0b);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
		gwinSetBgColor(GW1b, Black);
		gwinClear(GW1b);
	}

	//gwinPrintf(GW, "System up time : %d seconds\n", g_ms_uptime / 1000);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	gwinSetBgColor(GW0b, Purple);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	gwinSetBgColor(GW1b, Purple);
	if(vendor_id_tmp != 0x0426)
	{
		if(vid_error_cnt < 3)
		{
			if(flag_updateConsoleWidgets == 1)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
				gwinPrintf(GW0b, "\n%02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %d %04X %04X ", val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, flag_is_keyboard_mounted,vendor_id_tmp, product_id_tmp);
				gwinSetColor(GW0b, Red);
				gwinPrintf(GW0b, "FAIL");
				gwinSetColor(GW0b, White);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
				gwinPrintf(GW1b, "\n%02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %d %04X %04X ", val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, flag_is_keyboard_mounted,vendor_id_tmp, product_id_tmp);
				gwinSetColor(GW1b, Red);
				gwinPrintf(GW1b, "FAIL");
				gwinSetColor(GW1b, White);
			}
		}
		else
		{
			if(flag_updateConsoleWidgets == 1)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
				gwinSetColor(GW0b, Red);
				gwinPrintf(GW0b, "\n\r U S B    F A I L ,   R E S E T   U S B        %d", vid_error_cnt - 2);
				gwinSetColor(GW0b, White);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
				gwinSetColor(GW1b, Red);
				gwinPrintf(GW1b, "\n\r U S B    F A I L ,   R E S E T   U S B        %d", vid_error_cnt - 2);
				gwinSetColor(GW1b, White);
			}
			if(vid_error_cnt > 3)
			{
				vid_error_cnt = 0;

				if(flag_updateConsoleWidgets == 1)
				{
					gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
					gwinSetColor(GW0b, Red);
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinSetColor(GW0b, White);

					gwinSetColor(GW0b, Red);
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW0b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
					gwinSetColor(GW1b, Red);
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinSetColor(GW1b, White);

					gwinSetColor(GW1b, Red);
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
					gwinPrintf(GW1b, "\nU S B   R e s e t t i n g . . . . . . . . . . . . . ");
				}

				xil_printf("\n\rusb HW reset\n\r");
				reset_usb();

				xil_printf("\n\rusb SW reset\n\r");
				tusb_init(); // initialize tinyusb stack
				value = 0x60;
				ulpi_WriteReg(value, ULPI_FC_CTRL);	//0x16
				port_connect_status_change_isr(0);
				tusb_isr(0);

				if(flag_updateConsoleWidgets == 1)
				{
					gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
					gwinSetColor(GW0b, White);
					gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
					gwinSetColor(GW1b, White);
					//gwinSetBgColor(GW, Black);
					//gwinClear(GW);
				}
			}
		}
		vid_error_cnt++;
	}
	else
	{
		if(flag_updateConsoleWidgets == 1)
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
			gwinPrintf(GW0b, "\n%02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X   %d   %04X %04X   O K", val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, flag_is_keyboard_mounted,vendor_id_tmp, product_id_tmp);
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
			gwinPrintf(GW1b, "\n%02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X  %02X   %d   %04X %04X   O K", val0, val1, val2, val3, val4, val5, val6, val7, val8, val9, flag_is_keyboard_mounted,vendor_id_tmp, product_id_tmp);
		}
		vid_error_cnt = 0;
	}
	flag_updateConsoleWidgets_old = flag_updateConsoleWidgets;

	if(val0 != 0x40)
	{
		if(flag_updateConsoleWidgets == 1)
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
			gwinSetColor(GW0b, Red);
			for(i = 0; i < 10; i++)
			{
				gwinPrintf(GW0b, "\nUSB FAIL, RESET USB");
				usleep(100000);
			}
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
			gwinSetColor(GW1b, Red);
			for(i = 0; i < 10; i++)
			{
				gwinPrintf(GW1b, "\nUSB FAIL, RESET USB");
				usleep(100000);
			}
		}
		reset_usb();
		if(flag_updateConsoleWidgets == 1)
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
			gwinSetColor(GW0b, White);
			gwinSetBgColor(GW0b, Black);
			gwinClear(GW0b);
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
			gwinSetColor(GW1b, White);
			gwinSetBgColor(GW1b, Black);
			gwinClear(GW1b);
		}
	}
	return;
}

static void createConsoleWidgets(void)
{
	/* Set a font */
	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	/* create the console window */
	GWindowInit		wi0;
	GWindowInit		wi1;

	gwinClearInit(&wi0);
	gwinClearInit(&wi1);
	wi0.show = TRUE;
	wi1.show = TRUE;

	wi0.x = gdispGetWidth() / 2 - 290;
	wi1.x = gdispGetWidth() / 2 - 290;
	wi0.y = gdispGetHeight() - 140;
	wi1.y = gdispGetHeight() - 140;
	wi0.width = 950;
	wi1.width = 950;
	wi0.height = 120;
	wi1.height = 120;

	xil_printf("W = %d, H = %d\n\r", wi0.width, wi0.height);

	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	GW0b = gwinConsoleCreate(0, &wi0);
	/* Set the fore- and background colors for the console */
	gwinSetColor(GW0b, White);
	gwinSetBgColor(GW0b, Black);
	gwinClear(GW0b);

	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
	GW1b = gwinConsoleCreate(0, &wi1);
	/* Set the fore- and background colors for the console */
	gwinSetColor(GW1b, White);
	gwinSetBgColor(GW1b, Black);
	gwinClear(GW1b);
	return;
}

static void createWidgets(void) {
	GWidgetInit	wi;
	int OFFSET = WIDTH1;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	//wi.text = "12345678901234567890";
	//wi.text = "1234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 0;
	wi.text = "ID NO:";
	ghLabel1 = gwinLabelCreate(0, &wi);
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 0;
#ifdef USE_DATA_INPUT
	font_t font = gdispOpenFont("iskpota232");

	wi.text = "12345678901234567890";
	sprintf((char *)wi.text, "%d", p_infos[p_info_index].id_no);
	ghLabel1 = gwinLabelCreate(0, &wi);
	gdispFillString(wi.g.x + 300 + 80, wi.g.y, "F1", font, White, Gray);
#endif

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 1;
	wi.text = "NAME:";
	ghLabel2 = gwinLabelCreate(0, &wi);
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 1;
#ifdef USE_DATA_INPUT
	wi.text = "12345678901234567890";
	wi.text = p_infos[p_info_index].name;
	ghLabel2 = gwinLabelCreate(0, &wi);
	gdispFillString(wi.g.x + 300 + 80, wi.g.y, "F2", font, White, Gray);
	gdispFillString(wi.g.x + 400 + 30, wi.g.y, "PgUp", font, White, Gray);
#endif

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 3;
	wi.text = "SEX:";
	ghLabel3 = gwinLabelCreate(0, &wi);
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 3;
#ifdef USE_DATA_INPUT
	if(p_infos[p_info_index].sex == 1)
		wi.text = "Male";
	else
		wi.text = "Female";
	ghLabel3 = gwinLabelCreate(0, &wi);
	gdispFillString(wi.g.x + 300 + 80, wi.g.y, "F3", font, White, Gray);
	gdispFillString(wi.g.x + 400 + 30, wi.g.y, "PgDn", font, White, Gray);
#endif

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 4;
	wi.text = "AGE:";
	ghLabel4 = gwinLabelCreate(0, &wi);
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 4;
#ifdef USE_DATA_INPUT
	wi.text = "12345678901234567890";
	sprintf((char *)wi.text, "%d", p_infos[p_info_index].age);
	ghLabel4 = gwinLabelCreate(0, &wi);
	gdispFillString(wi.g.x + 300 + 80, wi.g.y, "F4", font, White, Gray);
#endif

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 5;
	wi.text = "Birthday:";
	ghLabel5 = gwinLabelCreate(0, &wi);
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 5;
#ifdef USE_DATA_INPUT
	wi.text = "12345678901234567890";
	wi.text = p_infos[p_info_index].birthday;
	ghLabel5 = gwinLabelCreate(0, &wi);
	gdispFillString(wi.g.x + 300 + 80, wi.g.y, "F5", font, White, Gray);
#endif

	/*
	// Create label
	wi.g.width = wide; wi.g.height = thick; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + thick * 7;
	wi.text = "08/30/2018";
	ghLabel4 = gwinLabelCreate(0, &wi);

	// Create label
	wi.g.width = wide; wi.g.height = thick; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + thick * 8;
	wi.text = "00:00:00";
	ghLabel5 = gwinLabelCreate(0, &wi);
	*/


	/*
	// Create label
	wi.g.width = wide; wi.g.height = thick; wi.g.x = 1920/6, wi.g.y =600;
	wi.text = "XXXXXXXXXXXXXXXXXXXXXxx";
	ghLabel5 = gwinLabelCreate(0, &wi);
	*/

	return;
}

void pixmap_draw(GDisplay* pixmap, pixel_t* surface, coord_t pm_width, coord_t pm_height, gdispImage *p_Image, uint32_t s_x, uint32_t s_y, uint32_t d_x, uint32_t d_y, u8 alpha, u8 position)
{
	volatile uint32_t g_ms_tick_tmp1;
	volatile uint32_t g_ms_tick_tmp2;
	uint32_t i, j;
	uint32_t status;
	//color_t color = 0;

	//source image
	coord_t w;			//source image size width
	coord_t h;			//source image size height
	coord_t sx;			//source image start position x
	coord_t sy;			//source image start position y
	coord_t sWidth;		//source image capture size width
	coord_t sHeight;	//source image capture size height

	//destination canvas
	coord_t W;			//destination canvas size width
	coord_t H;			//destination canvas size height
	coord_t dx;			//destination canvas start position x
	coord_t dy;			//destination canvas start position y
	coord_t dWidth;		//destination canvas draw size width
	coord_t dHeight;	//destination canvas draw size height

	if(p_Image != NULL) {
		//source image
		w = p_Image->width;		//source image size width
		h = p_Image->height;	//source image size height
	}
	else {
		w = 0;					//source image size width
		h = 0;					//source image size height
	}
	sx = s_x;					//source image start position x
	sy = s_y;					//source image start position y
	sWidth = w;					//source image capture size width
	sHeight = h;				//source image capture size height

	//destination canvas
	W = pm_width;				//destination canvas size width
	H = pm_height;				//destination canvas size height
	dx = 0;						//destination canvas start position x
	dy = 0;						//destination canvas start position y
	dWidth = w;					//destination canvas draw size width
	dHeight = h;				//destination canvas draw size height

	//xil_printf("enter pixmap_draw\r\n");
	// Clear pixmap with 0
	memset(surface, 0, W * H * 4); // Clear buffer

	// Overlay file is necessary
	if(p_Image != NULL) {
		// Load image

		if(position == POSITION_USER)
		{
			dx = d_x;
			dy = d_y;
		}
		else if(position == POSITION_MIDDLE_CENTER)
		{
			dx = (W - w) >> 1;
			dy = (H - h) >> 1;
		}
		else if(position == POSITION_MIDDLE_LEFT)
		{
			dx = 0;
			dy = (H - h) >> 1;
		}
		else if(position == POSITION_MIDDLE_RIGHT)
		{
			dx = (W - w) >> 0;
			dy = (H - h) >> 1;
		}
		else if(position == POSITION_TOP_CENTER)
		{
			dx = (W - w) >> 1;
			dy = 0;
		}
		else if(position == POSITION_TOP_LEFT)
		{
			dx = 0;
			dy = 0;
		}
		else if(position == POSITION_TOP_RIGHT)
		{
			dx = (W - w) >> 0;
			dy = 0;
		}
		else if(position == POSITION_BOTTOM_CENTER)
		{
			dx = (W - w) >> 1;
			dy = (H - h) >> 0;
		}
		else if(position == POSITION_BOTTOM_LEFT)
		{
			dx = 0;
			dy = (H - h) >> 0;
		}
		else if(position == POSITION_BOTTOM_RIGHT)
		{
			dx = (W - w) >> 0;
			dy = (H - h) >> 0;
		}
		else
		{
			xil_printf("pixmap_draw, unknown position = %d, abort.\n\r", position);
			return;
		}
		xil_printf("pixmap_draw : w = %d, h = %d, sx = %d, sy = %d, sW =%d, sH = %d, W = %d, H = %d, dx = %d, dy = %d, dW = %d, dH = %d, alpha = %d, pos = %d\r\n", w, h, sx, sy, sWidth, sHeight, W, H, dx, dy, dWidth, dHeight, alpha, position);
		//ex: step_3              w = 760, h = 384, sx = 0, sy = 0, sW =760, sH = 384, W = 1216, H = 912, dx = 0, dy = 0, dW =760, dH = 384(center)
		g_ms_tick_tmp1 = g_ms_tick;
		status = gdispGImageDraw(pixmap, p_Image, dx, dy, sWidth, sHeight, sx, sy);
		g_ms_tick_tmp2 = g_ms_tick;
		xil_printf("draw pixmap, time1 = %d\n\r", g_ms_tick_tmp2 - g_ms_tick_tmp1);
		//xil_printf("status draw: %d\r\n", status);
		pic_dx = dx;
		pic_dy = dy;
	}
	else
	{
		xil_printf("pixmap_draw : clear image\n\r");
	}

	uint32_t r;
	uint32_t g;
	uint32_t b;
	int cut;

	if(H > 500)
		cut = CUT_PIXEL1;
	else
		cut = CUT_PIXEL2;

    // Draw transparency required on layer 1
    for(j = 0; j < H; j++) {
    	for(i = 0; i < W; i++) {
    		if((j > (cut - 1)) && (j < (H - cut))) {	//middle
    			//color = gdisp_lld_get_pixel_color(pixmap);
    			//xil_printf("color: %x\r\n", color);
    			if((i >= dx) && (i < dx + w) && (j >= dy) && (j < dy + h))
    			{
       				r = surface[j * W + i] & 0xff;
       				g = (surface[j * W + i] >> 8) & 0xff;
       				b = (surface[j * W + i] >> 16) & 0xff;
       				surface[j * W + i] = ABGR2COLOR(alpha, r, g, b);	//really picture
       				//surface[j * W + i] &= 0x000000FF;		//pure red
       				//surface[j * W + i] = 0x2200FF00;		//pure green
       				//surface[j * W + i] &= 0x00FF0000;		//pure blue
       				//surface[j * W + i] = 0x00FFFFFF;		//pure white
    			}
    			else
    			{
    				surface[j * W + i] = ABGR2COLOR(0x00, 0x00, 0x00, 0x00);	//OSD 0% black => all transparent
    			}
    		}
    		else {
    			if(j < cut) { // Top lines
    				if ((i < (cut - j)) || (i > ((W - cut) - 1 + j))) {
    					//surface[j * W + i] = ABGR2COLOR(0x80, 0xff, 0xff, 0xff);	//old
    					surface[j * W + i] = ABGR2COLOR(0xff, 0x00, 0x00, 0x00);		//OSD 100% black
    					//xil_printf("c: %x\r\n", surface_1[j*PIXMAP_WIDTH_1 + i]);
    				}
    				else {
    	    			if((i >= dx) && (i < dx + w) && (j >= dy) && (j < dy + h))
    	    			{
    	       				r = surface[j * W + i] & 0xff;
    	       				g = (surface[j * W + i] >> 8) & 0xff;
    	       				b = (surface[j * W + i] >> 16) & 0xff;
    	       				surface[j * W + i] = ABGR2COLOR(alpha, r, g, b);
    	    			}
    	    			else
    	    			{
    	    				surface[j*W + i] = ABGR2COLOR(0x00, 0x00, 0x00, 0x00);	//OSD 0% black => all transparent
    	    			}
    				}

				}
				else { // Bottom lines
					if((i < (j + cut - H) ) || i > ((W - (cut-(H - j))) -1 )){
						//surface[j * W + i] = ABGR2COLOR(0x80, 0xff, 0xff, 0xff);	//old
						surface[j * W + i] = ABGR2COLOR(0xff, 0x00, 0x00, 0x00);	//OSD 100% black
					}
					else {
    	    			if((i >= dx) && (i < dx + w) && (j >= dy) && (j < dy + h))
    	    			{
    	       				r = surface[j * W + i] & 0xff;
    	       				g = (surface[j * W + i] >> 8) & 0xff;
    	       				b = (surface[j * W + i] >> 16) & 0xff;

    	       				surface[j * W + i] = ABGR2COLOR(alpha, r, g, b);
    	    			}
    	    			else
    	    			{
    	    				surface[j * W + i] = ABGR2COLOR(0x00, 0x00, 0x00, 0x00);	//OSD 0% black => all transparent
    	    			}
					}
				}
     		}
    	}
    }
}


///* Global timer set up*/
//
///* start timer */
// void gtimer_start_clock(void)
//{
//	*(volatile unsigned int*)SCU_GLOBAL_TIMER_CONTROL = ((1 << 0) | // Timer Enable
//														 (1 << 1) | // Comparator Comparison Enable
//						      	  	  	  	  	  	  	 (1 << 3) | // Auto-increment
//														 (0 << 8) 	// Pre-scale
//	);
//}
//
///* stop timer and reset timer count regs */
// void gtimer_reset_clock(void)
//{
//	gtimer_disable_clock();
//	*(volatile unsigned int*)SCU_GLOBAL_TIMER_COUNT_L32 = 0; // Reset Clock
//	*(volatile unsigned int*)SCU_GLOBAL_TIMER_COUNT_U32 = 0;
//}
//
// /* Set Comparator values */
//  void gtimer_set_comparator(uint32_t L32, uint32_t U32)
// {
// 	*(volatile unsigned int*)SCU_GLOBAL_TIMER_COMP_L32 = L32;
// 	*(volatile unsigned int*)SCU_GLOBAL_TIMER_COMP_U32 = U32;
// }
//
///* stop timer */
// void gtimer_disable_clock(void)
//{
//	*(volatile unsigned int*)SCU_GLOBAL_TIMER_CONTROL = 0;
//}
//
///* Compute mask for given delay in miliseconds*/
//int get_number_of_cycles_for_delay(unsigned int delay)
//{
//  // GTC is always clocked at 1/2 of the CPU frequency (CPU_3x2x)
//  return (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ*delay/(2*1000));
//
//}
//
//void gtimer_reset_and_start_timer()
//{
//  	    gtimer_reset_clock();
//	    gtimer_start_clock();
//}

// uGFX SystemTick
systemticks_t gfxSystemTicks(void)
{
	return g_ms_tick;
}

systemticks_t gfxMillisecondsToTicks(delaytime_t ms)
{
	return ms;
}
/////////////////////////////////////

uint32_t tusb_tick_get(void)
{
  //return system_ticks;
  return g_ms_tick;
}

void reset_usb(void)
{
	uint8_t reg;
	uint8_t val = 0;

	usb_reset_status = 1;
	usb_reset_status_old = 0;
	//xil_printf("david0823: %s:%s(%d) ST usb_reset_status = %d\r\n",__FILE__,__func__,__LINE__,usb_reset_status);

	xil_printf("usb reset\n\r");
	reg = ULPI_OTG_CTRL;
	val = 0;
	val = ulpi_ReadReg(reg);
	xil_printf("read value : %02X\n\r", val);

	val &= 0xDF;
	xil_printf("set value : %02X\n\r", val);
	ulpi_WriteReg(val, reg);

	usleep(500000);

	val |= 0x20;
	xil_printf("set value : %02X\n\r", val);
	ulpi_WriteReg(val, reg);
}

void get_usb_descriptor(void)
{
	//xil_printf("\n\rGet usb descriptor\n\r");
	uint16_t vid_tmp = 0;
	uint16_t pid_tmp = 0;
	uint8_t ret = 0;
	ret = usb_command(&vid_tmp, &pid_tmp);

	if(ret == TUSB_ERROR_NONE)
	{
		vendor_id_tmp = vid_tmp;
		product_id_tmp = pid_tmp;
	}
	else
	{
		xil_printf("fail\n\r");
	}
}

void read_usb_registers(void)
{
	uint32_t value = 0;
	uint8_t i;

	xil_printf("\n\rRead usb registers\n\r");
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 0);xil_printf("%08X ", value);
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 4);xil_printf("%08X ", value);
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 8);xil_printf("%08X ", value);
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 0xc);xil_printf("%08X ", value);
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 0x10);xil_printf("%08X ", value);
	value = XUsbPs_ReadReg(XPAR_XUSBPS_0_BASEADDR, 0x14);xil_printf("%08X\n\r", value);

	xil_printf("\n\rRead ulpi registers\n\r");
	/*
	for(i = 0; i < 8; i++)
	{
		xil_printf("0x%02X ", i);
	}
	xil_printf("\n");
	*/

	for(i = 0; i < 64; i++)
	{
		value = ulpi_ReadReg(i);	//0x16
		xil_printf("%02X", value);
		if((i%8) == 7)
			xil_printf("\n\r");
		else
			xil_printf("  ");
	}
	xil_printf("\n\r");
	xil_printf("\n\r");

	xil_printf("Keyboard : ");
	if(flag_is_keyboard_mounted == 1)
	{
		xil_printf("mounted\n\r");
	}
	else
	{
		xil_printf("unmounted\n\r");
	}
	xil_printf("\n\r");
}

void parse_uart_esc_command(void)
{
	int i;
	if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 'A'))
	{
		//xil_printf("Up\t");
		//xil_printf("Up, len = %d\t", length);
		//xil_printf("Up, len = %d\t", last_command_length);
		xil_printf("\r%s", PROMPT);
		if(last_command_length == 1)
			xil_printf("%s", last_command);
		ptr = last_command_length - 1;
		for(i = 0; i < ptr; i++)
		{
			buffer[i] = last_command[i];
			xil_printf("%c", buffer[i]);
		}
		length = last_command_length;
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 'B'))
	{
		//xil_printf("Down\t");
		xil_printf("\r%s", PROMPT);
		xil_printf("%s", last_command);
		ptr = last_command_length - 1;
		for(i = 0; i < ptr; i++)
		{
			buffer[i] = last_command[i];
		}
		length = last_command_length;
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 'C'))
	{
		//xil_printf("Right\t");
		xil_printf("\r%s", PROMPT);
		xil_printf("%s", last_command);
		ptr = last_command_length - 1;
		for(i = 0; i < ptr; i++)
		{
			buffer[i] = last_command[i];
		}
		length = last_command_length;
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 'D'))
	{
		//xil_printf("Left\t");
		/*
		// not very good
		if(ptr >= 2)
		{
			xil_printf("%c", 0x08);
			//xil_printf(".");
			ptr -= 2;
		}
		else
			ptr--;
		*/
		xil_printf("\r%s", PROMPT);
		xil_printf("%s", last_command);
		ptr = last_command_length - 1;
		for(i = 0; i < ptr; i++)
		{
			buffer[i] = last_command[i];
		}
		length = last_command_length;
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == 0x4F)&&(buffer[2] == 'A'))
	{
		xil_printf("Ctrl + Up\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == 0x4F)&&(buffer[2] == 'B'))
	{
		xil_printf("Ctrl + Down\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == 0x4F)&&(buffer[2] == 'C'))
	{
		xil_printf("Ctrl + Right\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == 0x4F)&&(buffer[2] == 'D'))
	{
		xil_printf("Ctrl + Left\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x35))
	{
		xil_printf("PageUp\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x36))
	{
		xil_printf("PageDown\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x31))
	{
		xil_printf("Home\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x32))
	{
		xil_printf("Insert\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x33))
	{
		xil_printf("Delete\n\r");
	}
	else if((buffer[0] == 0x1B)&&(buffer[1] == '[')&&(buffer[2] == 0x34))
	{
		xil_printf("End\n\r");
	}
	else
	{
		xil_printf("XXXX ESC\t");
		for( i = 0; i<3; i++)
		{
			xil_printf("0x%x ", buffer[i]);
		}
		xil_printf("\n\r");
	}
}

int cnt = 0;
u8 exposure = 0x42;

void show_command_not_found(void)
{
	int i;
	xil_printf("\n\r");
	for(i = 0; i < (length-1); i++)
		xil_printf("%c", buffer[i]);
	xil_printf(": not found\n\r");
}

void parse_uart_command(void)
{
	int status;
	int i;
	//int j;
	uint32_t value = 0;
	uint8_t reg;
	uint8_t val = 0;

	if(length == 20)
	{
		if((buffer[0] == 'w')&&(buffer[1] == ' '))
		{
			u32 reg = 0;
			u32 value = 0;
			for(i = 2; i < 10; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					reg |= (buffer[i] - 'A' + 10) << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					reg |= (buffer[i] - 'a' + 10) << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					reg |= (buffer[i] - '0') << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			//xil_printf("reg = 0x%08x = %d\n\r", reg, reg);
			for(i = 11; i < 19; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					value |= (buffer[i] - 'A' + 10) << ((18 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					value |= (buffer[i] - 'a' + 10) << ((18 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					value |= (buffer[i] - '0') << ((18 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			//xil_printf("value = 0x%08x = %d\n\r", value, value);

			Xil_Out32(reg, value);
			xil_printf("\n\rRegister : 0x%08x\twrite value : 0x%08x\n\r",reg, value);

			value = Xil_In32(reg);
			xil_printf("\n\rRegister : 0x%08x\tread value : 0x%08x\n\r",reg, value);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 13)
	{
		if((buffer[0] == 'w')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 's')&&(buffer[4] == ' '))	//w cs #### ##
		{
			u32 reg = 0;
			u32 value = 0;
			for(i = 5; i <= 8; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					reg |= (buffer[i] - 'A' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					reg |= (buffer[i] - 'a' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					reg |= (buffer[i] - '0') << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			for(i = 10; i <= 11; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					value |= (buffer[i] - 'A' + 10) << ((11 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					value |= (buffer[i] - 'a' + 10) << ((11 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					value |= (buffer[i] - '0') << ((11 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			//xil_printf("\n\rreg = 0x%08x = %d\n\r", reg, reg);
			//xil_printf("value = 0x%08x = %d\n\r", value, value);
			dongle_write_data(reg, value);
			xil_printf("\n\rCamera Sensor Register : 0x%04x\twrite value : 0x%02x\n\r",reg, value);
		}
	}
	else if(length == 11)
	{
		if((buffer[0] == 's')&&(buffer[1] == 'y')&&(buffer[2] == 's')&&(buffer[3] == 't')&&(buffer[4] == 'e')&&(buffer[5] == 'm')&&(buffer[6] == 'i')&&(buffer[7] == 'n')&&(buffer[8] == 'f')&&(buffer[9] == 'o'))
		{
			show_systeminfo();
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c')&&(buffer[3] == ' ')&&(buffer[4] == 'y')&&(buffer[5] == ' '))
		{
			int year;
			if((buffer[6] < 0x30) || (buffer[6] > 0x39) || (buffer[7] < 0x30) || (buffer[7] > 0x39) || (buffer[8] < 0x30) || (buffer[8] > 0x39) || (buffer[9] < 0x30) || (buffer[9] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			year = (buffer[6] - 0x30) * 1000 + (buffer[7] - 0x30) * 100 + (buffer[8] - 0x30) * 10 + (buffer[9] - 0x30);
			if((year < 2019) || (year > 3000))
			{
				xil_printf("\n\rIllegal parameters, year = %d\n\r", year);
				return;
			}
			XIicPs_SetRTCData(&Iic, RTC_YEAR, (u8)(year - 2019));
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'o')&&(buffer[2] == 'n')&&(buffer[3] == 'g')&&(buffer[4] == 'l')&&(buffer[5] == 'e')&&(buffer[6] == ' ')&&(buffer[7] == 'o')&&(buffer[8] == 'f')&&(buffer[8] == 'f'))
		{
			xil_printf("\n\rTurn off dongle LEDs\n\r");
			SetDongleLedRedStatus(0);		//turn off red led on dongle
			SetDongleLedGreenStatus(0);		//turn off green led on dongle
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' '))
		{
			u32 reg = 0;
			u32 value = 0;
			for(i = 2; i < 10; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					reg |= (buffer[i] - 'A' + 10) << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					reg |= (buffer[i] - 'a' + 10) << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					reg |= (buffer[i] - '0') << ((9 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else
				{
					xil_printf("\n\rRead register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			//xil_printf("reg = 0x%08x = %d\n\r", reg, reg);
			value = Xil_In32(reg);
			xil_printf("\n\rRegister : 0x%08x\tread value : 0x%08x\n\r",reg, value);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 10)
	{
		u8 type;
		int data;
		if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c')&&(buffer[3] == ' ')&&(buffer[6] == ' '))	//for hh, mm, ss
		{
			if((buffer[4] == 'h')&&(buffer[5] == 'h'))
			{
				type = RTC_HH;
				if((buffer[7] < 0x30) || (buffer[7] > 0x39) || (buffer[8] < 0x30) || (buffer[8] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[7] - 0x30) * 10 + (buffer[8] - 0x30);
				if((data < 0) || (data > 23))
				{
					xil_printf("\n\rIllegal parameters, hour = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
			else if((buffer[4] == 'm')&&(buffer[5] == 'm'))
			{
				type = RTC_MM;
				if((buffer[7] < 0x30) || (buffer[7] > 0x39) || (buffer[8] < 0x30) || (buffer[8] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[7] - 0x30) * 10 + (buffer[8] - 0x30);
				if((data < 0) || (data > 59))
				{
					xil_printf("\n\rIllegal parameters, minute = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
			else if((buffer[4] == 's')&&(buffer[5] == 's'))
			{
				type = RTC_SS;
				if((buffer[7] < 0x30) || (buffer[7] > 0x39) || (buffer[8] < 0x30) || (buffer[8] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[7] - 0x30) * 10 + (buffer[8] - 0x30);
				if((data < 0) || (data > 59))
				{
					xil_printf("\n\rIllegal parameters, second = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
			else
			{
				show_command_not_found();
			}
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c')&&(buffer[3] == ' ')&&(buffer[5] == ' '))	//for hh, mm, ss
		{
			u8 addr;
			if((buffer[4] < 0x30) || (buffer[4] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			if((buffer[6] < 0x30) || (buffer[6] > 0x39) || (buffer[7] < 0x30) || (buffer[7] > 0x39) || (buffer[8] < 0x30) || (buffer[8] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			addr = (buffer[4] - 0x30);
			data = (buffer[6] - 0x30) * 100 + (buffer[7] - 0x30) * 10 + (buffer[8] - 0x30);
			if((addr < 0) || (addr > 7))
			{
				xil_printf("\n\rIllegal parameters, addr = %d\n\r", addr);
				return;
			}
			if((data < 0) || (data > 255))
			{
				xil_printf("\n\rIllegal parameters, data = %d\n\r", data);
				return;
			}
			XIicPs_SetData(&Iic, addr, data);
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'o')&&(buffer[2] == 'n')&&(buffer[3] == 'g')&&(buffer[4] == 'l')&&(buffer[5] == 'e')&&(buffer[6] == ' ')&&(buffer[7] == 'o')&&(buffer[8] == 'n'))
		{
			xil_printf("\n\rTurn on dongle LEDs\n\r");
			SetDongleLedRedStatus(1);		//turn on red led on dongle
			SetDongleLedGreenStatus(1);		//turn on green led on dongle
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 's')&&(buffer[4] == ' '))	//r cs ####
		{
			unsigned int reg = 0;
			for(i = 5; i <= 8; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					reg |= (buffer[i] - 'A' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					reg |= (buffer[i] - 'a' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					reg |= (buffer[i] - '0') << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], reg);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			unsigned char DongleData;
			DongleData = dongle_read_data(reg);
			xil_printf("\n\rCamera Sensor Register : 0x%04x\tread value : 0x%02x\n\r",reg, DongleData);
		}
		else if((buffer[0] == 'w')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 'f')&&(buffer[4] == ' '))	//w cf #### ##
		{
			int i;
			u32 reg = 0;
			u32 value = 0;
			if((buffer[5] >= 'A') && (buffer[5] <= 'F'))
			{
				reg |= (buffer[5] - 'A' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[5] >= 'a') && (buffer[5] <= 'f'))
			{
				reg |= (buffer[5] - 'a' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[5] >= '0') && (buffer[5] <= '9'))
			{
				reg |= (buffer[5] - '0');
				//xil_printf("%c %x", buffer[i], reg);
			}
			else
			{
				xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[5]);
				return;
			}

			for(i = 7; i <= 8; i++)
			{
				if((buffer[i] >= 'A') && (buffer[i] <= 'F'))
				{
					value |= (buffer[i] - 'A' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= 'a') && (buffer[i] <= 'f'))
				{
					value |= (buffer[i] - 'a' + 10) << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else if((buffer[i] >= '0') && (buffer[i] <= '9'))
				{
					value |= (buffer[i] - '0') << ((8 - i) * 4);
					//xil_printf("%c %x", buffer[i], value);
				}
				else
				{
					xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[i]);
					return;
				}
			}
			//xil_printf("\n\rreg = 0x%08x = %d\n\r", reg, reg);
			//xil_printf("value = 0x%08x = %d\n\r", value, value);
			camera_fpga_write_data(reg, value);
			xil_printf("\n\rCamera FPGA Register : 0x%x\twrite value : 0x%02x\n\r",reg, value);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 9)
	{
		u8 type;
		int data;
		if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c')&&(buffer[3] == ' ')&&(buffer[5] == ' '))	//for month(m), monthday(d)
		{
			if(buffer[4] == 'm')
			{
				type = RTC_MON;
				if((buffer[6] < 0x30) || (buffer[6] > 0x39) || (buffer[7] < 0x30) || (buffer[7] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[6] - 0x30) * 10 + (buffer[7] - 0x30);
				if((data < 1) || (data > 12))
				{
					xil_printf("\n\rIllegal parameters, month = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
			else if(buffer[4] == 'd')
			{
				type = RTC_MD;
				if((buffer[6] < 0x30) || (buffer[6] > 0x39) || (buffer[7] < 0x30) || (buffer[7] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[6] - 0x30) * 10 + (buffer[7] - 0x30);
				if((data < 0) || (data > 31))
				{
					xil_printf("\n\rIllegal parameters, month day = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
			else
			{
				show_command_not_found();
			}
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 8)
	{
		if((buffer[0] == 'c')&&(buffer[1] == 'o')&&(buffer[2] == 'n')&&(buffer[3] == 's')&&(buffer[4] == 'o')&&(buffer[5] == 'l')&&(buffer[6] == 'e'))
		{
			console_test();
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c')&&(buffer[3] == ' ')&&(buffer[5] == ' '))	//for weekday(w)
		{
			u8 type;
			int data;
			if(buffer[4] == 'w')
			{
				type = RTC_WD;
				if((buffer[6] < 0x30) || (buffer[6] > 0x39))
				{
					xil_printf("\n\rIllegal parameters.\n\r");
					return;
				}
				data = (buffer[6] - 0x30);
				if((data < 0) || (data > 6))
				{
					xil_printf("\n\rIllegal parameters, week day = %d\n\r", data);
					return;
				}
				XIicPs_SetRTCData(&Iic, type, data);
			}
		}
		else if((buffer[0] == 'f')&&(buffer[1] == 'a')&&(buffer[2] == 'n')&&(buffer[3] == ' ')&&(buffer[4] == 'o')&&(buffer[5] == 'f')&&(buffer[6] == 'f'))
		{
			xil_printf("\n\rTurn off fan\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_FAN_EN, 0);
			fan_speed = 0;
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'm')&&(buffer[3] == ' ')&&(buffer[4] == 'o')&&(buffer[5] == 'f')&&(buffer[6] == 'f'))
		{
			xil_printf("\n\rTurn off camera LED\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_CAM_LED, 0);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 7)
	{
		if((buffer[0] == 'u')&&(buffer[1] == 'p')&&(buffer[2] == 't')&&(buffer[3] == 'i')&&(buffer[4] == 'm')&&(buffer[5] == 'e'))
		{
			//Get System Up time
			get_system_up_time();
		}
		else if((buffer[0] == 'f')&&(buffer[1] == 'a')&&(buffer[2] == 'n')&&(buffer[3] == ' ')&&(buffer[4] == 'o')&&(buffer[5] == 'n'))
		{
			xil_printf("\n\rTurn on fan\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_FAN_EN, 1);
			fan_speed = 10;
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'm')&&(buffer[3] == ' ')&&(buffer[4] == 'o')&&(buffer[5] == 'n'))
		{
			xil_printf("\n\rTurn on camera LED\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_CAM_LED, 1);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == 'l')&&(buffer[2] == ' ')&&(buffer[3] == 'o')&&(buffer[4] == 'f')&&(buffer[5] == 'f'))
		{
			xil_printf("\n\rTurn off back light\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_LED_BL, 0);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 'f')&&(buffer[4] == ' '))	//r cf #
		{
			u32 reg = 0;

			if((buffer[5] >= 'A') && (buffer[5] <= 'F'))
			{
				reg |= (buffer[5] - 'A' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[5] >= 'a') && (buffer[5] <= 'f'))
			{
				reg |= (buffer[5] - 'a' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[5] >= '0') && (buffer[5] <= '9'))
			{
				reg |= (buffer[5] - '0');
				//xil_printf("%c %x", buffer[i], reg);
			}
			else
			{
				xil_printf("\n\rWrite register, illegal parameters %c, abort\n\r", buffer[5]);
				return;
			}
			unsigned char DongleData = 0;
			DongleData = camera_fpga_read_data(reg);
			xil_printf("\n\rCamera FPGA Register : 0x%x\tread value : 0x%02x\n\r",reg, DongleData);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 6)
	{
		if((buffer[0] == 'b')&&(buffer[1] == 'l')&&(buffer[2] == 'a')&&(buffer[3] == 'c')&&(buffer[4] == 'k'))
		{
			gdispClear(Black);
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'l')&&(buffer[2] == 'e')&&(buffer[3] == 'a')&&(buffer[4] == 'r'))
		{
			gdispClear(Black);
		}
		else if((buffer[0] == 'w')&&(buffer[1] == 'h')&&(buffer[2] == 'i')&&(buffer[3] == 't')&&(buffer[4] == 'e'))
		{
			xil_printf("\n\rmemory copy from WHITE to framebuffer 0\n\r");
			volatile uint32_t g_ms_tick_tmp;
			g_ms_tick_tmp = g_ms_tick;
			gdispClear(White);
			xil_printf("memory copy ok, time = %d\n\r", g_ms_tick - g_ms_tick_tmp);
		}
		else if((buffer[0] == 'e')&&(buffer[1] == ' ')&&(buffer[2] == 'a')&&(buffer[3] == 'l')&&(buffer[4] == 'l'))
		{
			XIicPs_EraseEepromAll();
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' ')&&(buffer[2] == 'a')&&(buffer[3] == 'l')&&(buffer[4] == 'l'))
		{
			XIicPs_ReadEepromAll();
		}
		else if((buffer[0] == 'w')&&(buffer[1] == ' ')&&(buffer[2] == 'a')&&(buffer[3] == 'l')&&(buffer[4] == 'l'))
		{
			XIicPs_WriteEepromAll();
		}
		else if((buffer[0] == 'p')&&(buffer[1] == 'r')&&(buffer[2] == 'i')&&(buffer[3] == 'n')&&(buffer[4] == 't'))
		{
			xil_printf("ABCDEFGHIJKLMNOPQ");
			sleep(3);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("%c", 0x08);
			xil_printf("abcdefg");
			sleep(3);
			xil_printf("\r");
			xil_printf("-------");

		}
		else if((buffer[0] == 'u')&&(buffer[1] == 's')&&(buffer[2] == 'b')&&(buffer[3] == 'r')&&(buffer[4] == '1'))
		{
			xil_printf("\n\rusb HW reset\n\r");
			reset_usb();
		}
		else if((buffer[0] == 'u')&&(buffer[1] == 's')&&(buffer[2] == 'b')&&(buffer[3] == 'r')&&(buffer[4] == '2'))
		{
			xil_printf("\n\rusb SW reset\n\r");
			tusb_init(); // initialize tinyusb stack
			value = 0x60;
			ulpi_WriteReg(value, ULPI_FC_CTRL);	//0x16
			port_connect_status_change_isr(0);
			tusb_isr(0);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == 'l')&&(buffer[2] == ' ')&&(buffer[3] == 'o')&&(buffer[4] == 'n'))
		{
			xil_printf("\n\rTurn on back light\n\r");
			ps_gpio_setup(&periphs_inst, GPIO_LED_BL, 1);
		}
		else if((buffer[0] == 'h')&&(buffer[1] == 'e')&&(buffer[2] == 'l')&&(buffer[3] == 'p')&&(buffer[4] == '2'))
		{
			show_help2_menu();
		}
		else if((buffer[0] == 's')&&(buffer[1] == 't')&&(buffer[2] == 'a')&&(buffer[3] == 'r')&&(buffer[4] == 't'))
		{
			xil_printf("\n\rVideo Mixer Start\n\r");
			XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_MASTER);
			XVMix_InterruptDisable(periphs_inst.p_vid_output_mixer_l2_inst); // use auto reload mode
			XVMix_Start(periphs_inst.p_vid_output_mixer_l2_inst);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == 'r')&&(buffer[2] == 'e')&&(buffer[3] == 'a')&&(buffer[4] == 'k'))
		{
			#ifdef TEMPERATURE_DEBUG
				xil_printf("\n\r\n\rbreak temperature debug...\n\r");
				temperature_array_index = DEBUG_LENGTH + 1;
			#endif
		}
		else if((buffer[0] == 'l')&&(buffer[1] == 'a')&&(buffer[2] == 'y')&&(buffer[3] == 'e')&&(buffer[4] == 'r'))
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
			draw_layer_boundary();
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			draw_layer_boundary();
		}
		else if((buffer[0] == 'u')&&(buffer[1] == 'g')&&(buffer[2] == 'f')&&(buffer[3] == 'x'))
		{
			if(buffer[4]  == '0')
			{
				xil_printf("\n\rufgx 0\n\r");

				uint32_t addr;
				addr = gdispGetFrameBufferAddr(0);
				xil_printf("frame buffer 0 addr = 0x%08x\n\r", addr);
				gdispSetuGFXFrameBufferAddr(addr);
				xil_printf("\n\rufgx 0 ok\n\r");
			}
			else if(buffer[4]  == '1')
			{
				xil_printf("\n\rufgx 1\n\r");

				uint32_t addr;
				addr = gdispGetFrameBufferAddr(1);
				xil_printf("frame buffer 1 addr = 0x%08x\n\r", addr);

				gdispSetuGFXFrameBufferAddr(addr);
				xil_printf("\n\rufgx 1 ok\n\r");
			}
			else
			{
				xil_printf("\n\rufgx unknown\n\r");
			}
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 'c')&&(buffer[2] == 'f')&&(buffer[3] == ' '))
		{
			u32 reg = 0;

			if((buffer[4] >= 'A') && (buffer[4] <= 'F'))
			{
				reg |= (buffer[4] - 'A' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[4] >= 'a') && (buffer[4] <= 'f'))
			{
				reg |= (buffer[4] - 'a' + 10);
				//xil_printf("%c %x", buffer[i], reg);
			}
			else if((buffer[4] >= '0') && (buffer[4] <= '9'))
			{
				reg |= (buffer[4] - '0');
				//xil_printf("%c %x", buffer[i], reg);
			}
			else
			{
				xil_printf("\n\rRead Camera Fpga, illegal parameters %c, abort\n\r", buffer[4]);
				return;
			}
			//xil_printf("\n\rRead Camera Fpga, illegal parameters %c, abort\n\r", buffer[4]);
			read_camera_fpga(reg);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 'r')&&(buffer[2] == ' '))
		{
			int page;
			if((buffer[3] < 0x30) || (buffer[3] > 0x39) || (buffer[4] < 0x30) || (buffer[4] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = (buffer[3] - 0x30) * 10 + (buffer[4] - 0x30);
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", page);
			XIicPs_ReadEepromPage(page, eeprom_page_buffer);
			XIicPs_PrintPageDataRaw(page, eeprom_page_buffer);
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 5)
	{
		if((buffer[0] == 'e')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39) || (buffer[3] < 0x30) || (buffer[3] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = (buffer[2] - 0x30) * 10 + (buffer[3] - 0x30);
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			XIicPs_EraseEepromPage(page);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 'f'))	//r cf
		{
			xil_printf("\n\rRead Camera FPGA registers\n\r");
			u32 reg = 0;
			unsigned char DongleData = 0;
			reg = 0x08;DongleData = camera_fpga_read_data(reg);xil_printf("CFGCR\t\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
			reg = 0x09;DongleData = camera_fpga_read_data(reg);xil_printf("CFGTXDR\t\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
			reg = 0x0A;DongleData = camera_fpga_read_data(reg);xil_printf("CFGSR\t\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
			reg = 0x0B;DongleData = camera_fpga_read_data(reg);xil_printf("CFGRXDR\t\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
			reg = 0x0C;DongleData = camera_fpga_read_data(reg);xil_printf("CFGIRQ\t\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
			reg = 0x0D;DongleData = camera_fpga_read_data(reg);xil_printf("CFGIRQEN\taddr : 0x%02x, read value : 0x%02x\n\r",reg, DongleData);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' ')&&(buffer[2] == 'c')&&(buffer[3] == 's'))
		{
			xil_printf("\n\rRead Camera Sensor registers\n\r");
			unsigned char DongleData;
			unsigned int DongleAddr;

			DongleAddr = 0x0100;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\t", DongleAddr, DongleData);
			if(DongleData == 0)
				xil_printf("Sleep\n\r");
			else if(DongleData == 1)
				xil_printf("Streaming\n\r");
			else
				xil_printf("impossible data = 0x%02x\n\r", DongleData);
			DongleAddr = 0x300a;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\tCHIP ID H\n\r", DongleAddr, DongleData);
			DongleAddr = 0x300b;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\tCHIP ID L\n\r", DongleAddr, DongleData);
			DongleAddr = 0x302a;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\tCHIP REVISION\n\r", DongleAddr, DongleData);
			DongleAddr = 0x3820;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\tIMAGE ORIENTATION\n\r", DongleAddr, DongleData);
			DongleAddr = 0x4A00;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%04x, data = 0x%02x\tFRAME COUNT\n\r", DongleAddr, DongleData);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39) || (buffer[3] < 0x30) || (buffer[3] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = (buffer[2] - 0x30) * 10 + (buffer[3] - 0x30);
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", page);
			XIicPs_ReadEepromPage(page, eeprom_page_buffer);
			XIicPs_PrintPageData(page, eeprom_page_buffer);
		}
		else if((buffer[0] == 'w')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39) || (buffer[3] < 0x30) || (buffer[3] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = (buffer[2] - 0x30) * 10 + (buffer[3] - 0x30);
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			XIicPs_WriteEepromPage(page);
		}
		else if((buffer[0] == 'h')&&(buffer[1] == 'e')&&(buffer[2] == 'l')&&(buffer[3] == 'p'))
		{
			show_help_menu();
		}
		else if((buffer[0] == 'u')&&(buffer[1] == 's')&&(buffer[2] == 'b')&&(buffer[3] == 'r'))
		{
			xil_printf("\n\rPlease use 'usbr1' or 'usbr2'\n\r");
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'a')&&(buffer[2] == 't')&&(buffer[3] == 'e'))
		{
			xil_printf("\n\r%s", asctime(&rtc));
			char now[30];
	        strftime(now, 30, "%m/%d/%Y %a", &rtc);
	        xil_printf("\r%s\n\r", now);
	        strftime(now, 30, "%H:%M:%S", &rtc);
	        xil_printf("%s\n\r", now);
		}
		else if((buffer[0] == 'l')&&(buffer[1] == 'i')&&(buffer[2] == 'n')&&(buffer[3] == 'e'))
		{
			xil_printf("\n\rline\n\r");
			coord_t width;
			coord_t height;
			// Get the screen size
			width = gdispGetWidth();
			height = gdispGetHeight();

			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
			for(i = 0; i < width; i += 100)
			{
				gdispDrawLine(i, 0, i, height, Gray);
			}
			for(i = 0; i < height; i += 100)
			{
				gdispDrawLine(0, i, width, i, Gray);
			}
			draw_layer_boundary();

			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			for(i = 0; i < width; i += 100)
			{
				gdispDrawLine(i, 0, i, height, Gray);
			}
			for(i = 0; i < height; i += 100)
			{
				gdispDrawLine(0, i, width, i, Gray);
			}
			draw_layer_boundary();
		}
		else if((buffer[0] == 's')&&(buffer[1] == 't')&&(buffer[2] == 'o')&&(buffer[3] == 'p'))
		{
			xil_printf("\n\rVideo Mixer Stop\n\r");
			XVMix_Stop(periphs_inst.p_vid_output_mixer_l2_inst);
		}
		else if((buffer[0] == 'l')&&(buffer[1] == 'o')&&(buffer[2] == 'c')&&(buffer[3] == 'k'))
		{
			lock_monitor_test(&periphs_inst);
		}
		else if((buffer[0] == 'f')&&(buffer[1] == 'o')&&(buffer[2] == 'n')&&(buffer[3] == 't'))
		{
			font_test();
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
			font_test();
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'r')&&(buffer[3] == 's'))
		{
			xil_printf("\n\rcamera read serial\n\r");
			read_serial_from_camera();

			/*
			xil_printf("\n\rENABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(1);
			xil_printf("\n\rSET_ADDRESS\n\r");
			SET_ADDRESS(SN_PAGE);
			usleep(100000);
			xil_printf("\n\rREAD_1PAGE\n\r");
			READ_1PAGE();
			xil_printf("\n\rDISABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(0);
			*/
			/*
			xil_printf("Page Data:\t");
			for(i = 0;i<16;i++)
			{
				xil_printf("%02x ", page_data[i]);
			}
			xil_printf("\n\r");
			*/

			show_camera_serial(1);
			if(flag_use_2_framebuffers == TRUE)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				show_camera_serial(1);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			}
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'w')&&(buffer[3] == 's'))
		{
			xil_printf("\n\rcamera write serial\n\r");
			write_serial_to_camera();
			xil_printf("\n\rcamera write serial OK\n\r");
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'r')&&(buffer[3] == 'd'))
		{
#ifdef USE_PREVENT_REUSE
			xil_printf("\n\rcamera read date\n\r");
			flag_camera_status = get_camera_status();
			show_camera_date(1);
			if(flag_use_2_framebuffers == TRUE)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				show_camera_date(1);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
				show_camera_date(1);
			}
#endif
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'w')&&(buffer[3] == 'd'))
		{
			xil_printf("\n\rcamera write date\n\r");
			write_date_to_camera(DATE_PAGE3);
			xil_printf("\n\rcamera write date OK\n\r");
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'e')&&((buffer[3] == 'e') || (buffer[3] == 'r')))
		{
			xil_printf("\n\rcamera erase data\n\r");
			xil_printf("\n\rENABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(1);
			xil_printf("\n\rSET_ADDRESS\n\r");
			SET_ADDRESS(SN_PAGE);
			xil_printf("\n\rERASE_UFM\n\r");
			ERASE_UFM();
			xil_printf("\n\rDISABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(0);

			sleep(2);	//must > 1

			xil_printf("\n\rcamera write serial\n\r");
			write_serial_to_camera();
			xil_printf("\n\rcamera write serial OK\n\r");


		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'r')&&(buffer[3] == 'e'))
		{
			xil_printf("\n\rcamera erase data\n\r");
			xil_printf("\n\rENABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(1);
			xil_printf("\n\rSET_ADDRESS\n\r");
			SET_ADDRESS(SN_PAGE);
			xil_printf("\n\rERASE_UFM\n\r");
			ERASE_UFM();
			xil_printf("\n\rDISABLE_CONFIGURE\n\r");
			ENABLE_CONFIGURE(0);
		}
		else if((buffer[0] == 'i')&&(buffer[1] == 'n')&&(buffer[2] == 'f')&&(buffer[3] == 'o'))
		{
#ifdef USE_PREVENT_REUSE
			xil_printf("\n\rTHIRTY_MINUTE = %d\n\r", THIRTY_MINUTE);
			xil_printf("camera_use_time_from_camera = %d\n\r", camera_use_time_from_camera);
			xil_printf("camera_use_time_from_eeprom = %d\n\r", camera_use_time_from_eeprom);
			xil_printf("camera_nouse_time_from_eeprom = %d\n\r", camera_nouse_time_from_eeprom);

			xil_printf("flag_camera_status = %d\t", flag_camera_status);

			switch(flag_camera_status)
			{
			case CAMERA_NEW:	xil_printf("CAMERA_NEW\r\n");break;
			case CAMERA_1M:		xil_printf("CAMERA_1M\r\n");break;
			case CAMERA_30M:	xil_printf("CAMERA_30M\r\n");break;
			default:			xil_printf("xxxxxxx\r\n");break;
			}
			xil_printf("flag_camera_status = %d\n\rlast_power_off_time = %d\n\rflag_donot_care_power_off = %d\n\rtotal_power_off_time = %d\n\r",
					flag_camera_status, last_power_off_time, flag_donot_care_power_off, total_power_off_time);
#endif
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 4)
	{
		if((buffer[0] == 'e')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = buffer[2] - 0x30;
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			XIicPs_EraseEepromPage(page);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = buffer[2] - 0x30;
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", page);
			XIicPs_ReadEepromPage(page, eeprom_page_buffer);
			XIicPs_PrintPageData(page, eeprom_page_buffer);
		}
		else if((buffer[0] == 'w')&&(buffer[1] == ' '))
		{
			int page;
			if((buffer[2] < 0x30) || (buffer[2] > 0x39))
			{
				xil_printf("\n\rIllegal parameters.\n\r");
				return;
			}
			page = buffer[2] - 0x30;
			if((page > 31) || (page < 0))
			{
				xil_printf("\n\rIllegal parameters, page = %d\n\r", page);
				return;
			}
			XIicPs_WriteEepromPage(page);
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 't')&&(buffer[2] == 'c'))
		{
			read_RTC_data();
		}
		else if((buffer[0] == 'u')&&(buffer[1] == 's')&&(buffer[2] == 'b'))
		{
			read_usb_registers();
		}
		else if((buffer[0] == 'e')&&(buffer[1] == 'n')&&(buffer[2] == 'g'))
		{
			flag_engineering_mode = TRUE;
			flag_check_engineering_mode = 0;
			show_engineering_mode();
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'o')&&(buffer[2] == 't'))
		{
			xil_printf("\n\rdot\n\r");
			//int x,y;
			coord_t width;
			coord_t height;
			// Get the screen size
			width = gdispGetWidth();
			height = gdispGetHeight();

			/*
			gdispDrawPixel(0, 0, White);

			//gdispDrawPixel(1, 0, White);
			//gdispDrawPixel(2, 0, White);
			//gdispDrawPixel(3, 0, White);

			gdispDrawPixel(0, 1, Red);
			gdispDrawPixel(0, 2, Green);
			gdispDrawPixel(0, 3, Blue);


			for(j = 0;j<200;j++)
			{
				for(i = 0;i<400 ;i++)
				{
					gdispDrawPixel(width / 2 - i, height / 2+ j, Blue);
				}
			}


			gdispDrawPixel(width / 3, height / 2, Red);

			gdispDrawPixel(width / 3, height / 2 + 100, Green);

			gdispDrawPixel(width / 3, height / 2 + 200, Blue);

			gdispDrawPixel(width / 3 + 1, height / 2 + 300, White);
			gdispDrawPixel(width / 3 + 2, height / 2 + 300, White);
			gdispDrawPixel(width / 3 + 3, height / 2 + 300, White);

			gdispDrawPixel(width -1, height - 1, White);

			*/

			for (coord_t x = 0; x < width; x += 20)
			{
				for (coord_t y = 0; y < height; y += 20)
				{
					gdispDrawPixel(x, y, Gray);
				}
			}
		}
		else if((buffer[0] == 't')&&(buffer[1] == 'i')&&(buffer[2] == 'c'))
		{
			g_ms_tick = 0;
		}
		else if((buffer[0] == 't')&&(buffer[1] == 'o')&&(buffer[2] == 'c'))
		{
			uint32_t tt = g_ms_tick;
			uint32_t hh;
			uint32_t mm;
			uint32_t ss;
			uint32_t dd;

			dd = tt % 1000 * 1;
			ss = (tt / 1000) % 60;
			mm = ((tt / 1000) / 60) % 60;
			hh = ((tt / 1000) / 60) / 60;

			xil_printf("\n\rElasped time is %02d:%02d:%02d.%03d\n\r", hh, mm, ss, dd);
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == '1'))
		{
			xil_printf("\n\rcamera test 1, toggle camera setup\n\r");
			unsigned char DongleData;
			unsigned int DongleAddr;

			DongleAddr = 0x3820;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%x, data = 0x%x ORIENTATION\n\r", DongleAddr, DongleData);

			cnt++;
			cnt %= 4;

			DongleData = 0x10 | (cnt << 2);
			xil_printf("DongleData to write = 0x%x\n\r", DongleData);

			dongle_write_data(DongleAddr, DongleData);

			usleep(200000);

			DongleAddr = 0x3820;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%x, data = 0x%x ORIENTATION\n\r", DongleAddr, DongleData);
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == '2'))
		{
			xil_printf("\n\rcamera test 2, test pattern setup\n\r");
			unsigned char DongleData;
			unsigned int DongleAddr;
			DongleAddr = 0x5080;
			DongleData = dongle_read_data(DongleAddr);
			xil_printf("addr = 0x%x, data = 0x%x test pattern registers\n\r", DongleAddr, DongleData);
			usleep(2000);
			cnt %= 5;
			if(cnt == 0)
				DongleData = (1<<7) | (0 << 2);
			else if(cnt == 1)
				DongleData = (1<<7) | (1 << 2);
			else if(cnt == 2)
				DongleData = (1<<7) | (2 << 2);
			else if(cnt == 3)
				DongleData = (1<<7) | (3 << 2);
			else if(cnt == 4)
				DongleData = 0;
			else
			{
				xil_printf("impossible\n\r");
			}
			cnt++;
			dongle_write_data(DongleAddr, DongleData);
			xil_printf("cnt = %d write data = 0x%x\n\r", cnt, DongleData);
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == '3'))
		{
			unsigned char addr;

			cnt += 17;
			cnt %= 255;

			addr = 0x02;

			xil_printf("\n\rwrite camera fpga addr = 0x%02x data = 0x%02x\n\r", addr, cnt);
			camera_fpga_write_data(addr, cnt);
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == '4'))
		{
			unsigned char addr;
			unsigned char DongleData;
			addr = 0x02;
			xil_printf("\n\r");
			DongleData = camera_fpga_read_data(addr);
			xil_printf("read camera fpga addr = 0x%02x, data = 0x%02x\n\r", addr, DongleData);
		}
		else if((buffer[0] == 'l')&&(buffer[1] == 'a')&&(buffer[2] == 'n'))
		{
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'w'))
		{
		}
		else if((buffer[0] == 'c')&&(buffer[1] == 'a')&&(buffer[2] == 'e'))
		{
		}
		else if((buffer[0] == 'e')&&(buffer[1] == 'e')&&(buffer[2] == 'e'))
		{
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'm')&&(buffer[2] == 'a'))
		{
			xil_printf("\n\rDMA test ST\n\r");

			/* Initialize source */
			for (i = 0; i < DMA_LENGTH; i++)
				DMA_src[i] = (u32)(DMA_LENGTH - i);

			/* Clear destination */
			for (i = 0; i < DMA_LENGTH; i++)
				DMA_dst[i] = (u32)0;

			status = dma_copy((u32)DMA_src, (u32)DMA_dst, DMA_LENGTH);

			if (status != XST_SUCCESS)
			{
				xil_printf("\n\rXDmaPs_Test fail\r\n");
			}
			else
			{
				xil_printf("\n\rXDmaPs_Test OK\r\n");
			}
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 'e')&&(buffer[2] == 'd'))
		{
			xil_printf("\n\rdma copy from RED to framebuffer 0\n\r");
			void* addr;
			uint32_t *f_ptr;
			int length;
			length = 2048 * 30;

			addr = gfxAlloc(length);	//DMA_LENGTH = 8192 * 30

			f_ptr = addr;
			for(i = 0; i< length; i++)
			{
				f_ptr[i] = 0xff0000ff;		//red
			}

			uint32_t addr0;
			uint32_t addr1;
			addr0 = (uint32_t)addr;
			addr1 = gdispGetFrameBufferAddr(0);

			int total_round = 1200 / 30 / 2;
			volatile uint32_t g_ms_tick_tmp;
			g_ms_tick_tmp = g_ms_tick;

			for(i = 0; i < total_round; i++)
			{
				dma_copy((u32) addr0, (u32) addr1 + length * 4 * i, length/2);
				//xil_printf("i = %02d as0 = 0x%08x ad = 0x%08x len = %d\n\r", i, (u32) addr0, (u32) addr1 + length * 4 * i, length);
			}
			xil_printf("dma copy ok, time = %d\n\r", g_ms_tick - g_ms_tick_tmp);
		}
		else if((buffer[0] == 'p')&&(buffer[1] == '1')&&(buffer[2] == 'c'))
		{
			print_surface_1c_data();
		}
		else if((buffer[0] == 'a')&&(buffer[1] == 'd')&&(buffer[2] == 'c'))
		{
			#ifdef TEMPERATURE_DEBUG
			xil_printf("\n\rTEMPERATURE_DEBUG restart....\n\r");
			temperature_array_index = 0;
			#else
			xil_printf("\n\rdo nothing\n\r");
			#endif
		}
		else if((buffer[0] == 'e')&&(buffer[1] == 'x')&&(buffer[2] == 'p'))
		{
			make_camera_expired();
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 3)
	{
		if((((buffer[0] == 'l')&&(buffer[1] == 's')))||((buffer[0] == 'l')&&(buffer[1] == 'l')))
		{
			xil_printf("\n\r");
			xil_printf("Type `help' to see help list.\n\r");
		}
		else if((buffer[0] == 'r')&&(buffer[1] == 'r'))
		{
			xil_printf("\n\rusb HW reset\n\r");
			reset_usb();
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'e'))
		{
			xil_printf("Xil_DCacheEnable()\n\r");
			Xil_DCacheEnable();
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'd'))
		{
			xil_printf("Xil_DCacheDisable()\n\r");
			Xil_DCacheDisable();
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'f'))
		{
			xil_printf("Xil_DCacheFlush()\n\r");
			Xil_DCacheFlush();
		}
		else if((buffer[0] == 's')&&(buffer[1] == 't'))
		{
			if(g_procedure_started == START) { // We are in a active session
				xil_printf("\n\rturn off\r\n");
				g_updated = 1;
				g_procedure_started = STOP;
			}
			else
			{
				xil_printf("\n\rturn on\r\n");
				g_updated = 1;
				g_procedure_started = START;
			}
		}
		else if(((buffer[0] == 'L')||(buffer[0] == 'l'))&&(buffer[1] == '0'))
		{
			xil_printf("Enabling/bypassing Layer 0.\n\r");
			status = XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_MASTER);
			if(status) { // Enabled
				XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_MASTER);
			} else {
				XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_MASTER);
			}
		}
		else if(((buffer[0] == 'L')||(buffer[0] == 'l'))&&(buffer[1] == '1'))
		{
			xil_printf("Enabling/bypassing Layer 1.\n\r");
			status = XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
			if(status) { // Enabled
				XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
			} else {
				XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
			}
		}
		else if(((buffer[0] == 'L')||(buffer[0] == 'l'))&&(buffer[1] == '2'))
		{
			xil_printf("Enabling/bypassing Layer 2.\n\r");
			status = XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
			if(status) { // Enabled
				XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
			} else {
				XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
			}
		}
		else if(((buffer[0] == 'L')||(buffer[0] == 'l'))&&(buffer[1] == '3'))
		{
			xil_printf("Enabling/bypassing Layer 3.\n\r");
			status = XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_3);
			if(status) { // Enabled
				XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_3);
			} else {
				XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_3);
			}
		}
		else if((buffer[0] == 'u')&&(buffer[1] == '0'))
		{
			xil_printf("USB Hub Power Down\n\r");
			reg = ULPI_OTG_CTRL;
			val = 0;
			val = ulpi_ReadReg(reg);
			xil_printf("read value : %02X\n\r", val);

			sleep(1);

			val &= 0xDF;
			xil_printf("set value : %02X\n\r", val);
			ulpi_WriteReg(val, reg);

			sleep(1);

			val = 0;
			val = ulpi_ReadReg(reg);
			xil_printf("read value : %02X\n\r", val);
		}
		else if((buffer[0] == 'u')&&(buffer[1] == '1'))
		{
			xil_printf("USB Hub Power Up\n\r");
			reg = ULPI_OTG_CTRL;
			val = 0;
			val = ulpi_ReadReg(reg);
			xil_printf("read value : %02X\n\r", val);

			sleep(1);

			val |= 0x20;
			xil_printf("set value : %02X\n\r", val);
			ulpi_WriteReg(val, reg);

			sleep(1);

			val = 0;
			val = ulpi_ReadReg(reg);
			xil_printf("read value : %02X\n\r", val);
		}
		else if((buffer[0] == 'p')&&(buffer[1] == '0'))
		{
			print_layer0_data(0);
		}
		else if((buffer[0] == 'p')&&(buffer[1] == '1'))
		{
			print_surface_1_data();
		}
		else if((buffer[0] == 't')&&(buffer[1] == '1'))
		{
			set_time();
		}
		else if((buffer[0] == 't')&&(buffer[1] == '2'))
		{
			get_time();
		}
		else if((buffer[0] == 'm')&&(buffer[1] == 'm'))
		{
			volatile uint32_t g_ms_tick_tmp;
			uint32_t addr0;
			uint32_t addr1;
			addr0 = gdispGetFrameBufferAddr(0);
			addr1 = gdispGetFrameBufferAddr(1);
			xil_printf("\n\rmemory copy from framebuffer 0 to framebuffer 1, size = W X H = 8192 X 1200\n\r");
			g_ms_tick_tmp = g_ms_tick;
			//for(i = 0; i< (1920 * 1080 * 4 / 2); i++)	//copy half screen
			for(i = 0; i< (1920 * 1080 * 4); i++)	//copy one screen
			{
				Xil_Out32(addr1 + i, (Xil_In32(addr0 + i)));
			}
			xil_printf("memory copy ok, time = %d\n\r", g_ms_tick - g_ms_tick_tmp);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == 'b'))
		{
			xil_printf("\n\rdma copy from framebuffer 0 to framebuffer 1\n\r");
			int length;
			length = 2048 * 30;
			uint32_t addr0;
			uint32_t addr1;
			addr0 = gdispGetFrameBufferAddr(0);
			addr1 = gdispGetFrameBufferAddr(1);

			int total_round = 1200 / 30 / 2;
			volatile uint32_t g_ms_tick_tmp;
			g_ms_tick_tmp = g_ms_tick;

			for(i = 0; i < total_round; i++)
			{
				dma_copy((u32) addr0 + length * 4 * i, (u32) addr1 + length * 4 * i, length / 2);
				//xil_printf("i = %02d as0 = 0x%08x ad = 0x%08x len = %d\n\r", i, (u32) addr0 + length * 4 * i, (u32) addr1 + length * 4 * i, length);
			}
			xil_printf("dma copy ok, time = %d\n\r", g_ms_tick - g_ms_tick_tmp);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == '0'))
		{
			switch_to_framebuffer(FRAMEBUFFER0);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == '1'))
		{
			switch_to_framebuffer(FRAMEBUFFER1);
		}
		else if((buffer[0] == 'b')&&(buffer[1] == 'a'))
		{
			xil_printf("\n\rshow framebuffer addresses\n\r\n\r");
			uint32_t addr;
			addr = gdispGetFrameBufferAddr(0);
			xil_printf("frame buffer 0 addr = 0x%08x\n\r", addr);
			addr = gdispGetFrameBufferAddr(1);
			xil_printf("frame buffer 1 addr = 0x%08x\n\r", addr);
		}
		else if((buffer[0] == 'f')&&(buffer[1] == 'b'))
		{
			if(flag_use_2_framebuffers == FALSE)
			{
				flag_use_2_framebuffers = TRUE;
				xil_printf("\n\rflag_use_2_framebuffers = TRUE\n\r");
			}
			else
			{
				flag_use_2_framebuffers = FALSE;
				xil_printf("\n\rflag_use_2_framebuffers = FALSE\n\r");
			}
		}
		else if((buffer[0] == 'd')&&(buffer[1] == 'c'))
		{
#ifdef USE_DEBUG_CONSOLE
			if(flag_enable_debug_console == TRUE)
			{
				xil_printf("Disable debug console\n\r");
				flag_enable_debug_console = FALSE;
				debug_console_close();
				// Blit surface_2 to the real display at the new position
				gdispBlitArea(BORDER_X, LAYER0_HEIGHT - LAYER2_HEIGHT - BORDER_Y, LAYER2_WIDTH, LAYER2_HEIGHT, surface_2);
			}
			else
			{
				xil_printf("Enable debug console\n\r");
				flag_enable_debug_console = TRUE;
				debug_console_init();
			}
#endif
		}
		else
		{
			show_command_not_found();
		}
	}
	else if(length == 2)
	{
		xil_printf("\n\r");
		if(buffer[0] == 's')
		{
#ifdef USE_PREVENT_REUSE
			if(flag_forbid_video == FALSE)
#endif
			{
				if(g_procedure_started == START) { // We are in a active session
					if(g_conn_status == CAMERA_OK)	//dongle + camera
					{
						xil_printf("turn off\r\n");
						g_updated = 1;
						g_procedure_started = STOP;
						time_tick = 0;
					}
					else
					{
						xil_printf("no turn off, no dongle or camera\r\n");
					}
				}
				else
				{
					if(g_conn_status == CAMERA_OK)	//dongle + camera
					{
						xil_printf("turn on\r\n");
						g_updated = 1;
						g_procedure_started = START;
						time_tick = start_time_total;
					}
					else
					{
						xil_printf("no turn on, no dongle or camera\r\n");
					}
				}
			}
		}
		else if(buffer[0] == '1')
		{
			xil_printf("psuart0_exposure(%c)\n\r",buffer[0]);psuart0_exposure(1);g_exposure = 1;
		}
		else if(buffer[0] == '2')
		{
			xil_printf("psuart0_exposure(%c)\n\r",buffer[0]);psuart0_exposure(2);g_exposure = 2;
		}
		else if(buffer[0] == '3')
		{
			xil_printf("psuart0_exposure(%c)\n\r",buffer[0]);psuart0_exposure(3);g_exposure = 3;
		}
		else if(buffer[0] == '4')
		{
			xil_printf("psuart0_exposure(%c)\n\r",buffer[0]);psuart0_exposure(4);g_exposure = 4;
		}
		else if(buffer[0] == '5')
		{
			xil_printf("psuart0_exposure(%c)\n\r",buffer[0]);psuart0_exposure(5);g_exposure = 5;
		}
		else if(buffer[0] == '+')
		{
			/*
			if(fan_speed < 5)
				fan_speed = 5;
			else if(fan_speed < 10)
				fan_speed++;
			xil_printf("fan_speed = %d\n\r", fan_speed);
			*/
			/*
			if(exposure <= 245)
				exposure += 10;
			psuart0_exposure_data(exposure);
			*/

			cut_pixel += 20;
			if(cut_pixel > 250)
				cut_pixel = 250;
			xil_printf("+, cut %d\n\r", cut_pixel);
			layer1_blit_corners(next_framebuffer);
			layer1_blit_corners(1 - next_framebuffer);
		}
		else if(buffer[0] == '-')
		{
			/*
			if(fan_speed > 5)
				fan_speed--;
			else
				fan_speed = 0;
			xil_printf("fan_speed = %d\n\r", fan_speed);
			*/
			if(exposure >= 10)
				exposure -= 10;
			psuart0_exposure_data(exposure);
		}
		else if(buffer[0] == '>')
		{
			if(alpha <= 239)
				alpha += 16;
			xil_printf("alpha = %d\n\r", alpha);
		}
		else if(buffer[0] == '<')
		{
			if(alpha >= 16)
				alpha -= 16;
			xil_printf("alpha = %d\n\r", alpha);
		}
		else if(buffer[0] == 'j')
		{
		}
		else if(buffer[0] == 't')
		{
			xil_printf("Enabling/bypassing camera TPG. fail now\n\r");
			//periphs_toggle_camera_tpg(&periphs_inst);
		}
		else if(buffer[0] == 'y')
		{
			xil_printf("Enabling/bypassing GUI TPG.\n\r");
			periphs_toggle_GUI_tpg(&periphs_inst);
		}
		else if(buffer[0] == 'u')
		{
			xil_printf("Park/Unpark Camera Freeze VDMA.\n\r");
			periphs_toggle_camera_freeze_vdma(&periphs_inst);
			// Determine if we're in TPG or passthrough mode
			if (periphs_inst.enable_camera_freeze_vdma == PERIPHS_SEL_ENABLE_PARK)
			{
				XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
			}
			else
			{
				XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
			}
		}
		else if(buffer[0] == 'c')
		{
			xil_printf("check dongle status\t");
			g_conn_status = psuart0_dongle_ping();
			if(g_conn_status == DONGLE_NONE){			// Nothing is plugged in
				xil_printf("no dongle or camera\n\r");
			}
			else if(g_conn_status == CAMERA_NONE){		// Only dongle is plugged in
				xil_printf("dongle plugged\n\r");
			}
			else if(g_conn_status == CAMERA_OK){		// Everything is plugged in
				xil_printf("all plugged\n\r");
			}
			else {										// Unknown
				xil_printf("unknown status\n\r");
			}

			if(g_conn_status_old != g_conn_status)
			{
				draw_picture(g_conn_status);
				g_conn_status_old = g_conn_status;
			}
#ifdef USE_DEBUG_MESSAGE
			dongle_usage_count = check_dongle_usage_count();
			xil_printf("dongle_usage_count = %d\r\n", dongle_usage_count);
#endif
		}
		else if(buffer[0] == 'a')
		{
			XAdcGetData();
		}
		else if(buffer[0] == 'f')
		{
			//psusb0_hal_interrupt_disable(0);
			//hal_interrupt_disable(0);
			//get_usb_descriptor();
			//hal_interrupt_enable(0);
			//psusb0_hal_interrupt_enable(0);

			uint32_t status = XVMix_IsLayerEnabled(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_1);
			xil_printf("\t\rfreeze, L1 status: 0x%x\n\r", status);
			if(status) { // Enabled
				XGpioPs *Gpio = periphs_inst.p_ps_gpio_inst;
				periphs_toggle_camera_freeze_vdma(&periphs_inst);
				// Determine if we're in TPG or passthrough mode
				if (periphs_inst.enable_camera_freeze_vdma == PERIPHS_SEL_ENABLE_PARK)
				{
					xil_printf("freeze\n\r");
					XVMix_LayerEnable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
					// Turn on Red light
					XGpioPs_WritePin(Gpio, GPIO_LED_RED, 1);
				}
				else
				{
					xil_printf("un-freeze\n\r");
					XVMix_LayerDisable(periphs_inst.p_vid_output_mixer_l2_inst, XVMIX_LAYER_2);
					// Turn off red light
					XGpioPs_WritePin(Gpio, GPIO_LED_RED, 0);
				}
			}
			else
				xil_printf("no work\n\r");
		}
		/*
		else if(buffer[0] == 'm')
		{
			xil_printf("METER\r\n");

			if(flag_updateConsoleWidgets == 0)
				flag_updateConsoleWidgets = 1;
			else
				flag_updateConsoleWidgets = 0;
		}
		*/
		/*
		else if(buffer[0] == 'd')
		{
			xil_printf("disable USB interrupt\n\r");
			psusb0_hal_interrupt_disable(0);
			hal_interrupt_disable(0);
		}
		else if(buffer[0] == 'e')
		{
			xil_printf("enable USB interrupt\n\r");
			hal_interrupt_enable(0);
			psusb0_hal_interrupt_enable(0);
		}
		*/
		else if(buffer[0] == 'g')
		{
			xil_printf("gdisp test for GDISP_CONTROL_BUFFERS_SWAP\n\r");
			gdisp_lld_control(GDISP);
		}
		else if(buffer[0] == 'p')
		{
#ifdef TEMPERATURE_DEBUG
			u32 TempRawData;
			float TempData;

			xil_printf("\n\r\n\rprint adc result\n\r\n\r");
			u32 i = 0;
			for(i = 0; i < DEBUG_LENGTH; i++)
			{
				TempRawData = temperature_array[i];
				TempData = XAdcPs_RawToTemperature(TempRawData);
				xil_printf("T(%d)=%0d.%03d;", i+1, (int)(TempData), XAdcFractionToInt(TempData));

				if((i%6) == 5)
					xil_printf("\n\r");
			}

			xil_printf("\n\r\n\r");
#endif
			print_screen_data(0);
		}
		else if(buffer[0] == 'l')
		{
			preload_picture_to_memory();
		}
		else if(buffer[0] == 'd')
		{
			//xil_printf("david test\n\r");

			/*
			uint32_t alpha;
			uint32_t r;
			uint32_t g;
			uint32_t b;
			uint32_t surface1;
			uint32_t surface2;

			surface1 = 0x12345678;
			alpha = 0x11;

			r = surface1 & 0xff;
			g = (surface1 >> 8) & 0xff;
			b = (surface1 >> 16) & 0xff;

			surface2 = ABGR2COLOR(alpha, r, g, b);

			xil_printf("0x%08x_%08x_%08x_%08x_%08x_0x%08x\n\r", surface1, alpha,r,g,b, surface2);

			u8 tttt[10];
			memset(tttt, 0x87, 10);
			xil_printf("tttt[3] = 0x%02x\n\r", tttt[3]);

			memset(tttt, 0x26, 10);
			xil_printf("tttt[3] = 0x%02x\n\r", tttt[3]);
			*/

			//printf("this is a printf test\n\r");


			//u32 CpuId = XScuGic_GetCpuID(); /**< CPU Core identifier */

			//xil_printf("CpuId = 0x%08x = %d\n\r", CpuId, CpuId);

			//xil_printf("Forbid video\n\r");
			//forbid_video();

			/*
			if(g_procedure_started == START) { // Procedure not started
				xil_printf("g_procedure_started == START\n\r");
			}
			else if(g_procedure_started == STOP) { // Procedure not started
				xil_printf("g_procedure_started == STOP\n\r");
			}
			else
				xil_printf("g_procedure_started == xxxxxxxx\n\r");
			*/

			//ims_printf("012345678901234567890123456789\n\r");
			//ims_printf("012345678901234567890123456789\n\r");
			//ims_printf("ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\r");

			/*
			xil_printf("size of int is %d\n\r", sizeof(int));
			xil_printf("size of unsigned long is %d\n\r", sizeof(unsigned long));
			xil_printf("size of unsigned long long is %d\n\r", sizeof(unsigned long long));
			xil_printf("size of u8 is %d\n\r", sizeof(u8));

			xil_printf("%s:%s(%d) tick = %d test sleep 10 sec ST\r\n",__FILE__,__func__,__LINE__,g_ms_tick);
			sleep(10);
			xil_printf("%s:%s(%d) tick = %d test sleep 10 sec SP\r\n",__FILE__,__func__,__LINE__,g_ms_tick);
			*/


			//xil_printf("%s:%s(%d) camera_use_time_from_eeprom = %d\r\n",__FILE__,__func__,__LINE__, camera_use_time_from_eeprom);
			//xil_printf("%s:%s(%d) camera_nouse_time_from_eeprom = %d\r\n",__FILE__,__func__,__LINE__, camera_nouse_time_from_eeprom);

			/*
			xil_printf("%s:%s(%d) tick = %d test sleep 10 sec ST\r\n",__FILE__,__func__,__LINE__,g_ms_tick);
			sleep(20);
			xil_printf("%s:%s(%d) tick = %d test sleep 10 sec SP\r\n",__FILE__,__func__,__LINE__,g_ms_tick);
			*/

			/*
			zoom_cut += 4;
			zoom_cut = 0;

		    testtest(&periphs_inst);

		    xil_printf("%s:%s(%d) zoom_cut = %d\r\n",__FILE__,__func__,__LINE__, zoom_cut);
		    */


			u8 camera_data_tmp[16] = {0};
			int page;
			for(page = 0xa; page <= 0xf; page++)
			{
				read_data_from_camera(page);
				for(i = 0; i < 16; i++)
				{
					camera_data_tmp[i] = page_data[i];
				}
				xil_printf("page 0x%x, data :\t", page);
				for(i = 0; i < 16; i++)
				{
					xil_printf("%02x ", camera_data_tmp[i]);
				}
				xil_printf("\n\r\n\r");
			}
		}
		else if(buffer[0] == 'q')
		{
			debug_console_print("lion-mouse\n");
		}
		else if(buffer[0] == '!')
		{
			debug_console_close();
		}
		else if(buffer[0] == '@')
		{
		}
		else if(buffer[0] == '#')
		{
			xil_printf("\n\rread_error_code_from_camera:\t");
#ifdef USE_PREVENT_REUSE
			int ret;
			flag_video_status = read_error_code_from_camera();

			switch(flag_video_status)
			{
			case VIDEO_OK:							xil_printf("VIDEO_OK\n");break;
			case VIDEO_FORBID_ALL:					xil_printf("VIDEO_FORBID_ALL\n");break;
			case VIDEO_FORBID_DIFFERENT_CAMERA:		xil_printf("VIDEO_FORBID_DIFFERENT_CAMERA\n");break;
			case VIDEO_FORBID_POWEROFF_LONG_1M:		xil_printf("VIDEO_FORBID_POWEROFF_LONG_1M\n");break;
			case VIDEO_FORBID_POWEROFF_LONG_1M30M:	xil_printf("VIDEO_FORBID_POWEROFF_LONG_1M30M\n");break;
			case VIDEO_FORBID_POWEROFF_LONG_30M:	xil_printf("VIDEO_FORBID_POWEROFF_LONG_30M\n");break;
			case VIDEO_FORBID_PULL_OUT_LONG_1M:		xil_printf("VIDEO_FORBID_PULL_OUT_LONG_1M\n");break;
			case VIDEO_FORBID_PULL_OUT_LONG_30M:	xil_printf("VIDEO_FORBID_PULL_OUT_LONG_30M\n");break;
			default:								xil_printf("unknown video status : %d\n", (int)flag_video_status);break;
			}

			xil_printf("\n\rread_serial_from_camera\n\r");
			read_serial_from_camera();			//camera 0xA
			xil_printf("\n\rread_date_from_camera page1\n\r");
			ret = read_date_from_camera(DATE_PAGE1);	//camera 0xB
			if(ret == 1)
				xil_printf("Page 0xD has date data, 1m data\n\r");
			else
				xil_printf("Page 0xD does not have date data\n\r");
			xil_printf("\n\rread_date_from_camera page3\n\r");
			ret = read_date_from_camera(DATE_PAGE3);	//camera 0xD
			if(ret == 1)
				xil_printf("Page 0xF has date data, 30m data\n\r");
			else
				xil_printf("Page 0xF does not have date data\n\r");
			xil_printf("\n\rread_camera_use_time_from_camera\n\r");
			camera_use_time_from_camera = read_camera_use_time_from_camera();	//camera 0xC
			xil_printf("\n\rcamera_use_time_from_camera = %d\n\r", camera_use_time_from_camera);
#endif
		}
		else if(buffer[0] == '$')
		{
#ifdef USE_PREVENT_REUSE
			/*
			#define CAMERA_1MIN		0
			#define CAMERA_30MIN	1
			#define EEPROM_1MIN		2
			#define EEPROM_30MIN	3
			#define	LAST_POWER_OFF	4
			*/

			unsigned long difftime = 0;
			difftime = get_time_interval(CAMERA_1MIN);
			xil_printf("difftime_CAMERA_1MIN = ");
			print_time(difftime);

			difftime = get_time_interval(CAMERA_30MIN);
			xil_printf("difftime_CAMERA_30MIN = ");
			print_time(difftime);

			difftime = get_time_interval(EEPROM_1MIN);
			xil_printf("difftime_EEPROM_1MIN = ");
			print_time(difftime);

			difftime = get_time_interval(EEPROM_30MIN);
			xil_printf("difftime_EEPROM_30MIN = ");
			print_time(difftime);

			difftime = get_time_interval(LAST_POWER_OFF);
			xil_printf("difftime_LAST_POWER_OFF = ");
			print_time(difftime);
#endif
		}
		else if(buffer[0] == 'w')
		{
			//xil_printf("write compile time to flash\n\r");
			//write_compile_time_count();

			//xil_printf("write some x to flash\n\r");
			//XIicPs_WriteEepromData(25, 8, 15, "XXXXXXXXXXXXXXX");
		}
		else if(buffer[0] == 'm')
		{
			pirnt_mixer_data();
		}
		else if(buffer[0] == 'W')
		{
			xil_printf("write eeprom data XIicPs_WritedEepromData\n\r");
			//char ims_info[] = "iiiiimmmmmsssss15iiiiimmmmmsssss15";
			char ims_info[] = "abcdefghijklmnopqrstuvwxyz";
			//char ims_info[] = "ims-v1.0.0.3 sn:12345_ims-v1.0.0.3 sn:12345";
			int len;
			len = sizeof(ims_info) - 1;
			XIicPs_WriteEepromData(0, 64 * 0, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 1, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 3, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 5, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 7, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 9, len, (u8*)ims_info);
			usleep(10000);
			XIicPs_WriteEepromData(0, 64 * 13, len, (u8*)ims_info);
			usleep(10000);
		}
		else if(buffer[0] == 'r')
		{
			/*
			u32 addr = 0x43030028;
			u32 value = 0;
			value = ReadRegister(addr);
			xil_printf("result : 0x%08x\n\r", value);
			*/
			u32 addr;
			u32 value = 0;

			xil_printf("\n\r");

			addr = REGISTER_BOOT_MODE;
			value = ReadRegister(addr);
			u32 boot_mode;
			boot_mode = value&0xf;
			xil_printf("REGISTER_BOOT_MODE : 0x%08x, boot_mode = %d\t", value, boot_mode);
			switch(boot_mode)
			{
			case 0:		xil_printf("JTAG");break;
			case 1:		xil_printf("QSPI");break;
			case 4:		xil_printf("NAND");break;
			case 5:		xil_printf("SD");break;
			default:	xil_printf("xxx unknown");break;
			}
			xil_printf(" mode\n\r");

			addr = REGISTER_PSS_IDCODE;
			value = ReadRegister(addr);
			xil_printf("REGISTER_PSS_IDCODE : 0x%08x\n\r", value);
			u32 device;
			device = (value >> 12)&0x1f;
			xil_printf("device : 0x%x\tDevice code: ", device);
			switch(device)
			{
			case 0x02:		xil_printf("7z010");break;
			case 0x1b:		xil_printf("7z015");break;
			case 0x07:		xil_printf("7z020");break;
			case 0x0c:		xil_printf("7z030");break;
			case 0x11:		xil_printf("7z045");break;
			default:	xil_printf("xxx unknown");break;
			}
			xil_printf("\n\r");
			u32 manufacturer_id;
			manufacturer_id = (value >>1)&0x7ff;
			xil_printf("manufacturer_id : 0x%x\n\r", manufacturer_id);
		}
		else if(buffer[0] == 'R')
		{
			int state;
			int page = 0;
			int addr = 0;
			int len = 512;
			u8 RecvBuffer[1024];

			xil_printf("read eeprom data XIicPs_ReadEepromData, page = %d, addr = %d, len = %d\n\r", page, addr, len);
			state = XIicPs_ReadEepromData(page, addr, len, RecvBuffer);

			if(state == XST_FAILURE)
			{
				xil_printf("xxxxxxx I2C fail, XIicPs_ReadEepromData\n\r");
			}
			else
			{
				xil_printf("data: \n\r");
				xil_printf("0123456789012345678901234567890123456789012345678901234567890123\n\r");
				for (i = 0; i < len; i++) {
					if(isprint(RecvBuffer[i]))
						xil_printf("%c", RecvBuffer[i]);
					else
					{
						//xil_printf("^");
						xil_printf("%02x", RecvBuffer[i]);
					}
					if((i % 64) == 63)
						xil_printf("\n\r");
				}
				xil_printf("\n\r");
			}
		}
		else if(buffer[0] == 'b')
		{
			/*
			xil_printf("\n\rGet usb descriptor\n\r");
			uint16_t vid_tmp = 0;
			uint16_t pid_tmp = 0;
			uint8_t ret = 0;
			ret = usb_command(&vid_tmp, &pid_tmp);

			if(ret == TUSB_ERROR_NONE)
			{
				vendor_id_tmp = vid_tmp;
				product_id_tmp = pid_tmp;
			}
			else
			{
				xil_printf("fail\n\r");
			}
			*/

			//xil_printf("\n\rUSB test\n\r");
			//usb_test();


		}
		else
		{
			show_command_not_found();
		}
	}
	else
	{
		if(length > 1)
		{
			show_command_not_found();
		}
	}

	last_command_length = length;
	for(i = 0; i < (last_command_length-1); i++)
	{
		last_command[i] = buffer[i];
	}

	length = 0;
}

void get_system_up_time(void)
{
	uint32_t tt = g_ms_uptime;
	uint32_t hh;
	uint32_t mm;
	uint32_t ss;
	uint32_t dd;

	dd = tt % 1000 * 1;
	ss = (tt / 1000) % 60;
	mm = ((tt / 1000) / 60) % 60;
	hh = ((tt / 1000) / 60) / 60;

	xil_printf("\n\rSystem up time is %02d:%02d:%02d.%03d\n\r", hh, mm, ss, dd);
}

struct timespec	ts;

void set_time(void)
{
	ts.tv_sec = g_ms_tick / 1000;
	ts.tv_nsec = (g_ms_tick % 1000) * 1000000;
}

void get_time(void)
{
	xil_printf("time is %ld.%ld\n\r",ts.tv_sec,ts.tv_nsec);
}

void ps_gpio_setup(periphs_t* p_periphs_inst, u32 Pin, u32 Data)
{
	XGpioPs *Gpio = p_periphs_inst->p_ps_gpio_inst;
	XGpioPs_WritePin(Gpio, Pin, Data);
}

void show_engineering_mode0(void)
{
	//int x,y;
	coord_t width;
	coord_t height;
	// Get the screen size
	width = gdispGetWidth();
	height = gdispGetHeight();

	for (coord_t x = 0; x < width; x += 100)
	{
		for (coord_t y = 0; y < height; y += 100)
		{
			//gdispDrawPixel(x, y, Gray);
		}
	}

	gdispDrawBox(400, 100, width - 100 * 2 - 300, height - 100 * 2, Yellow);
	/*
	for (coord_t x = 100; x < (height - 100); x += 100)
	{
		gdispDrawLine(100, x, width - 100, x, Yellow);
	}
	for (coord_t x = 100; x < (width - 100); x += 100)
	{
		gdispDrawLine(x, 100, x, height - 100, Yellow);
	}
	*/

	font_t font = gdispOpenFont("iskpota232");
	gdispFillString(400, 50, "Engineering Mode", font, White, Magenta);

	//font = gdispOpenFont("DejaVu*");
	gdispFillString(420, 150, "Time", font, White, Olive);
	gdispFillString(720, 150, "Info", font, White, Olive);
	gdispFillString(1120, 150, "Camera", font, White, Olive);
	//gdispFillString(1320, 150, "Selftest", font, White, Olive);
	gdispFillString(1620, 150, "Language", font, White, Olive);


	xil_printf("year : %d\n\r", rtc.tm_year + 119);
	xil_printf("month : %d\n\r", rtc.tm_mon);
	xil_printf("mday : %d\n\r", rtc.tm_mday);
	xil_printf("wday : %d\n\r", rtc.tm_wday);
	xil_printf("hour : %d\n\r", rtc.tm_hour);
	xil_printf("minute : %d\n\r", rtc.tm_min);
	xil_printf("second : %d\n\r", rtc.tm_sec);

    char str[40];
    sprintf(str, "%d", rtc.tm_year + 1900);
	gdispDrawString(420, 250, "Year :", font, Red);
	gdispDrawString(420 + 150, 250, str, font, Red);

    sprintf(str, "%d", rtc.tm_mon + 1);
	gdispDrawString(420, 350, "Month :", font, Red);
	gdispDrawString(420 + 150, 350, str, font, Red);

    sprintf(str, "%d", rtc.tm_mday);
	gdispDrawString(420, 450, "Day :", font, Red);
	gdispDrawString(420 + 150, 450, str, font, Red);

	switch(rtc.tm_wday)
	{
	case 0:		sprintf(str, "%s", "Sun");	break;
	case 1:		sprintf(str, "%s", "Mon");	break;
	case 2:		sprintf(str, "%s", "Tue");	break;
	case 3:		sprintf(str, "%s", "Wed");	break;
	case 4:		sprintf(str, "%s", "Thu");	break;
	case 5:		sprintf(str, "%s", "Fri");	break;
	case 6:		sprintf(str, "%s", "Sat");	break;
	default:	sprintf(str, "%s", "xxx");	break;
	}
	gdispDrawString(420 + 150, 550, str, font, Red);

	sprintf(str, "%d", rtc.tm_hour);
	gdispDrawString(420, 650, "Hour :", font, Red);
	gdispDrawString(420 + 150, 650, str, font, Red);
    sprintf(str, "%d", rtc.tm_min);
	gdispDrawString(420, 750, "Minute :", font, Red);
	gdispDrawString(420 + 150, 750, str, font, Red);
    sprintf(str, "%d", rtc.tm_sec);
	gdispDrawString(420, 850, "Second :", font, Red);
	gdispDrawString(420 + 150, 850, str, font, Red);

	const char * const txt1 = __DATE__;
	const char * const txt2 = __TIME__;

	gdispDrawString(720, 250, "Aries v3", font, Red);
	gdispDrawString(720, 350, "Model : FG-270-0008", font, Red);
	gdispDrawString(720, 450, "Serial : 2700008-1812-0001", font, Red);
	gdispDrawString(720, 550, txt1, font, Red);
	gdispDrawString(720, 650, txt2, font, Red);
	/*
    sprintf(str, "%d x %d", width, height);
    gdispDrawString(720, 750, str, font, Red);
    */

	switch(SelectedLanguage)
	{
	case 0:		sprintf(str, "%s", "T. Chinese");	break;
	case 1:		sprintf(str, "%s", "S. Chinese");	break;
	case 2:		sprintf(str, "%s", "English");		break;
	default:	sprintf(str, "%s", "xxx");			break;
	}
	gdispDrawString(1620, 250, str, font, Red);
	gdispFillString(1150, 1000, "F9 : Refresh", font, White, Gray);

    return;
}

void show_engineering_mode(void)
{
	xil_printf("\n\rdavid0211: %s:%s(%d) ST\r\n", __FILE__, __func__, __LINE__);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	show_engineering_mode0();
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	show_engineering_mode0();
	read_camera_info_from_camera_eng();
	show_camera_info_eng();
	return;
}

int IicPsMasterInit(u16 DeviceId)
{
	int Status;
	XIicPs_Config *Config;
	/*
	 * Initialize the IIC driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XIicPs_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	Status = XIicPs_SelfTest(&Iic);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the IIC serial clock rate.
	 */
	XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

	/*
	XIicPs_SetDate(&Iic, 2018, 9, 14, 5, 17, 59, 30);
	usleep(2000);
	XIicPs_SetInfo();
	usleep(2000);
	*/
	return XST_SUCCESS;
}

int XIicPs_SetDate(XIicPs *InstancePtr, u32 year, u8 month, u8 date, u8 day, u8 hour, u8 minutes, u8 seconds)
{
	/*	debug
    int j;

	for(j = 0; j < 7; j++)
	{
		SendBuffer[0] = j;	//offset
		SendBuffer[1] = 6;	//data
		Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 2, IIC_SLAVE_ADDR);
		if (Status != XST_SUCCESS) {
			xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
			return XST_FAILURE;
		}
	}
	*/

	int Status;
	xil_printf("raw data: %d/%d/%d %d %02d:%02d:%02d\r\n", year, month, date, day, hour, minutes, seconds);

	seconds = ((seconds / 10) << 4) + (seconds % 10);
	minutes = ((minutes / 10) << 4) + (minutes % 10);
	hour = ((hour / 10) << 4) + (hour % 10);
	date = ((date / 10) << 4) + (date % 10);
	month = ((month / 10) << 4) + (month % 10);
	year = (((year - 1900) / 10) << 4) + ((year - 1900) % 10);

	xil_printf("new data: %d/%d/%d %d %02d:%02d:%02d\r\n", year, month, date, day, hour, minutes, seconds);

	SendBuffer[0] = 0;			//offset
	SendBuffer[1] = seconds;	//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 1;			//offset
	SendBuffer[1] = minutes;	//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 2;			//offset
	SendBuffer[1] = hour;		//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 3;			//offset
	SendBuffer[1] = day;		//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 4;			//offset
	SendBuffer[1] = date;		//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 5;			//offset
	SendBuffer[1] = month;		//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	SendBuffer[0] = 6;			//offset
	SendBuffer[1] = year;		//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int XIicPs_SetData(XIicPs *InstancePtr, u8 addr, u8 data)
{
	int Status;
	xil_printf("\n\rXIicPs_SetData, addr = 0x%02x = %d, data = 0x%02x = %d\n\r", addr, addr, data, data);

	SendBuffer[0] = addr;	//offset
	SendBuffer[1] = data;	//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int XIicPs_SetInfo()
{
	int Status;
	int i;
	//char ims_info[] = "ims-v1.0.0.3 sn:12345";
	char ims_info[] = "iiiiimmmmmsssss15";

	for(i = 0; i < (INFO_BUFFER_SIZE + 1); i++)
	{
		if(i == 0)
			SetInfoBuffer[i] = '-';			//data
		else if(i <= 26)
			SetInfoBuffer[i] = 'A' - 1 + i;	//data
		else if(i == 27)
			SetInfoBuffer[i] = '{';			//data
		else if(i == 28)
			SetInfoBuffer[i] = '}';			//data
		else if(i <= 54)
			SetInfoBuffer[i] = 'a' - 29 + i;//data
		else if(i == 55)
			SetInfoBuffer[i] = '(';			//data
		else if(i == 56)
			SetInfoBuffer[i] = ')';			//data
		else
			SetInfoBuffer[i] = '~';			//data
	}

	xil_printf("old data: ");
	for(i = 0; i < (INFO_BUFFER_SIZE + 1); i++)
	{
		xil_printf("%c", SetInfoBuffer[i]);
	}
	xil_printf("\n\r");

	xil_printf("size of ims-info is %d\n\r", sizeof(ims_info));

	for(i = 0; i < (sizeof(ims_info) - 1); i++)
	{
		SetInfoBuffer[i+1] = ims_info[i];	//data
	}

	xil_printf("new data: ");
	for(i = 0; i < (INFO_BUFFER_SIZE + 1); i++)
	{
		xil_printf("%c", SetInfoBuffer[i]);
	}
	xil_printf("\n\r");

	SetInfoBuffer[0] = 0x08;			//offset

	xil_printf("    data:  ");
	for(i = 1; i < (INFO_BUFFER_SIZE + 1); i++)
	{
		xil_printf("%c",SetInfoBuffer[i]);
	}
	xil_printf("\n\r");

	Status = XIicPs_MasterSendPolled(&Iic, SetInfoBuffer,
			(INFO_BUFFER_SIZE + 1), IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int XIicPs_GetInfo()
{
	int Status;
	int Index;

	for (Index = 0; Index < INFO_BUFFER_SIZE; Index++) {
		GetInfoBuffer[Index] = '-';
	}

	SendBuffer[0] = 0x08;	//offset
	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			1, IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, GetInfoBuffer,
			INFO_BUFFER_SIZE, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	for (Index = 0; Index < INFO_BUFFER_SIZE; Index++) {
		if(isprint(GetInfoBuffer[Index]))
			xil_printf("%c", GetInfoBuffer[Index]);
		else
			xil_printf("^");
	}
	xil_printf("+++++\n\r");

	return XST_SUCCESS;
}

void ShowDateInfo(u8 *RecvBuffer)
{
	int i = 0;
	xil_printf("\n\rRTC data: \t0x ", i++);
	for (i = 0; i < I2C_BUFFER_SIZE; i++) {
		xil_printf("%02X ",RecvBuffer[i]);
	}
	xil_printf("\t");
	u8 ampm = 0;	//default is 24HR
	ampm = (RecvBuffer[2] >> 6) & 0x01;
	if(ampm == 1)
		xil_printf("12HR\n\r");
	else
		xil_printf("24HR\n\r");

	u8 seconds = (((RecvBuffer[0] >> 4) & 0x07) * 10) + (RecvBuffer[0] & 0x0f);
	u8 minutes = (((RecvBuffer[1] >> 4) & 0x07) * 10) + (RecvBuffer[1] & 0x0f);
	//u8 hour = (((RecvBuffer[2] >> 4) & 0x07) * 10) + (RecvBuffer[2] & 0x0f);
	u8 hour;
	if(ampm == 1)
		hour = (((RecvBuffer[2] >> 4) & 0x01) * 10) + (RecvBuffer[2] & 0x0f);
	else
		hour = (((RecvBuffer[2] >> 4) & 0x03) * 10) + (RecvBuffer[2] & 0x0f);

	u8 day = RecvBuffer[3] & 0x07;
	u8 date = (((RecvBuffer[4] >> 4) & 0x03) * 10) + (RecvBuffer[4] & 0x0f);
	u8 month = (((RecvBuffer[5] >> 4) & 0x01) * 10) + (RecvBuffer[5] & 0x0f);
	u32 year = (((RecvBuffer[6] >> 4) & 0x0f) * 10) + (RecvBuffer[6] & 0x0f) + 2019;

	xil_printf("\n\r");

	//xil_printf("raw data: %d/%d/%d %d %02d:%02d:%02d\r\n", RecvBuffer[6], RecvBuffer[5], RecvBuffer[4], RecvBuffer[3], RecvBuffer[2], RecvBuffer[1], RecvBuffer[0]);
	//xil_printf("new data: %d/%d/%d %d %02d:%02d:%02d\r\n", year, month, date, day, hour, minutes, seconds);
	xil_printf("Date: %02d/%02d/%02d ", year, month, date);
	switch(day)
	{
	case 0:		xil_printf("Sun");	break;
	case 1:		xil_printf("Mon");	break;
	case 2:		xil_printf("Tue");	break;
	case 3:		xil_printf("Wed");	break;
	case 4:		xil_printf("Thu");	break;
	case 5:		xil_printf("Fri");	break;
	case 6:		xil_printf("Sat");	break;
	default:	xil_printf("xxx");	break;
	}
	xil_printf(" %02d:%02d:%02d\t\t", hour, minutes, seconds);
}

void get_RTC_data()
{
	int Index;
	int Status;
	SendBuffer[0] = 0;

	for (Index = 0; Index < I2C_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}

	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			1, IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, RecvBuffer,
			I2C_BUFFER_SIZE, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return;
	}

	u8 ampm = 0;	//default is 24HR
	ampm = (RecvBuffer[2] >> 6) & 0x01;

	rtc.tm_sec    = (((RecvBuffer[0] >> 4) & 0x07) * 10) + (RecvBuffer[0] & 0x0f);
	rtc.tm_min    = (((RecvBuffer[1] >> 4) & 0x07) * 10) + (RecvBuffer[1] & 0x0f);

	if(ampm == 1)
		rtc.tm_hour = (((RecvBuffer[2] >> 4) & 0x01) * 10) + (RecvBuffer[2] & 0x0f);
	else
		rtc.tm_hour = (((RecvBuffer[2] >> 4) & 0x03) * 10) + (RecvBuffer[2] & 0x0f);

	rtc.tm_wday   =    RecvBuffer[3] & 0x07;
	rtc.tm_mday   = (((RecvBuffer[4] >> 4) & 0x03) * 10) + (RecvBuffer[4] & 0x0f);
	rtc.tm_mon    = (((RecvBuffer[5] >> 4) & 0x01) * 10) + (RecvBuffer[5] & 0x0f) - 1;
	rtc.tm_year   = (((RecvBuffer[6] >> 4) & 0x0f) * 10) + (RecvBuffer[6] & 0x0f) + 119;

	//xil_printf("\n\rsystem bootup time : %s\n\r", asctime(&rtc));
	xil_printf("tick(%d) = %d;\t%%%s:%s(%d) system bootup time : %s\r\n", tick_cnt++, g_ms_tick, __FILE__,__func__,__LINE__, asctime(&rtc));

	//xil_printf("new data: %d/%d/%d %d %02d:%02d:%02d\r\n", rtc.tm_year, rtc.tm_mon, rtc.tm_mday, rtc.tm_wday, rtc.tm_hour, rtc.tm_min, rtc.tm_sec);

	return;
}

int update_RTC_data()
{
	int Index;
	int Status;
	SendBuffer[0] = 0;

	for (Index = 0; Index < I2C_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}

	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			1, IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, RecvBuffer,
			I2C_BUFFER_SIZE, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	}

	//ShowDateInfo(RecvBuffer);
	update_widget_data(RecvBuffer);

	if(flag_use_2_framebuffers == TRUE)
	{
		switch_to_framebuffer(next_framebuffer);
	}

	//XIicPs_GetInfo();
	return XST_SUCCESS;
}

//int cccc = 0;

u8 bootup_time = 1;
u8 seconds_old = 0;
u8 minutes_old = 0;
u8 minutes_write = 0;
u8 hour_old = 0;
u8 day_old = 0;
u8 date_old = 0;
u8 month_old = 0;
u32 year_old = 0;

u8 seconds_eng = 0;
u8 minutes_eng = 0;
u8 hour_eng = 0;
u8 day_eng = 0;
u8 date_eng = 0;
u8 month_eng = 0;
u32 year_eng = 0;

void update_widget_data(u8 *RecvBuffer)
{
	GWidgetInit	wi;
	int weekday = 0;
	coord_t wide = 300;		//reserved for 1 framebuffer

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	wi.text = "12345678901234567890123456789012345678901234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	u8 ampm = 0;	//default is 24HR
	ampm = (RecvBuffer[2] >> 6) & 0x01;
	/*
	if(ampm == 1)
		xil_printf("12HR\n\r");
	else
		xil_printf("24HR\n\r");
	*/

	rtc.tm_sec    = (((RecvBuffer[0] >> 4) & 0x07) * 10) + (RecvBuffer[0] & 0x0f);
	rtc.tm_min    = (((RecvBuffer[1] >> 4) & 0x07) * 10) + (RecvBuffer[1] & 0x0f);
	//rtc.tm_hour   = (((RecvBuffer[2] >> 4) & 0x07) * 10) + (RecvBuffer[2] & 0x0f);
	//rtc.tm_hour   = (((RecvBuffer[2] >> 4) & 0x01) * 10) + (RecvBuffer[2] & 0x0f);

	if(ampm == 1)
		rtc.tm_hour = (((RecvBuffer[2] >> 4) & 0x01) * 10) + (RecvBuffer[2] & 0x0f);
	else
		rtc.tm_hour = (((RecvBuffer[2] >> 4) & 0x03) * 10) + (RecvBuffer[2] & 0x0f);

	rtc.tm_wday   =    RecvBuffer[3] & 0x07;
	rtc.tm_mday   = (((RecvBuffer[4] >> 4) & 0x03) * 10) + (RecvBuffer[4] & 0x0f);
	rtc.tm_mon    = (((RecvBuffer[5] >> 4) & 0x01) * 10) + (RecvBuffer[5] & 0x0f);
	rtc.tm_year   = (((RecvBuffer[6] >> 4) & 0x0f) * 10) + (RecvBuffer[6] & 0x0f) + 119;

	//xil_printf("raw data: %d/%d/%d %d %02d:%02d:%02d\r\n", RecvBuffer[6], RecvBuffer[5], RecvBuffer[4], RecvBuffer[3], RecvBuffer[2], RecvBuffer[1], RecvBuffer[0]);
	//xil_printf("new data: %d/%d/%d %d %02d:%02d:%02d\r\n", rtc.tm_year, rtc.tm_mon, rtc.tm_mday, rtc.tm_wday, rtc.tm_hour, rtc.tm_min, rtc.tm_sec);

	if(flag_engineering_mode == TRUE)
	{
		font_t font = gdispOpenFont("iskpota232");

		/*
		xil_printf("year : %d\n\r", rtc.tm_year);
		xil_printf("month : %d\n\r", rtc.tm_mon);
		xil_printf("mday : %d\n\r", rtc.tm_mday);
		xil_printf("wday : %d\n\r", rtc.tm_wday);
		xil_printf("hour : %d\n\r", rtc.tm_hour);
		xil_printf("minute : %d\n\r", rtc.tm_min);
		xil_printf("second : %d\n\r", rtc.tm_sec);
		*/

	    char str[40];
	    if(engineering_mode_setup_item == 1)
	    	sprintf(str, "%ld", year_eng + 1900 + 119);
	    else
	    	sprintf(str, "%d", rtc.tm_year + 1900);
		gdispFillArea(420 + 150, 250, 100, 40, Black);
	    if(engineering_mode_setup_item == 1)
	    	gdispFillString(420 + 150, 250, str, font, White, Red);
	    else
    	gdispDrawString(420 + 150, 250, str, font, Red);

	    if(engineering_mode_setup_item == 2)
	    	sprintf(str, "%d", month_eng);
	    else
	    	sprintf(str, "%d", rtc.tm_mon);
    	gdispFillArea(420 + 150, 350, 100, 40, Black);
	    if(engineering_mode_setup_item == 2)
	    	gdispFillString(420 + 150, 350, str, font, White, Red);
	    else
	    	gdispDrawString(420 + 150, 350, str, font, Red);

	    if(engineering_mode_setup_item == 3)
	    	sprintf(str, "%d", date_eng);
	    else
    	sprintf(str, "%d", rtc.tm_mday);
	    gdispFillArea(420 + 150, 450, 100, 40, Black);
	    if(engineering_mode_setup_item == 3)
	    	gdispFillString(420 + 150, 450, str, font, White, Red);
	    else
	    	gdispDrawString(420 + 150, 450, str, font, Red);

	    if(engineering_mode_setup_item == 4)
	    	weekday =  day_eng;
	    else
	    	weekday = rtc.tm_wday;

	    switch(weekday)
		{
		case 0:		sprintf(str, "%s", "Sun");	break;
		case 1:		sprintf(str, "%s", "Mon");	break;
		case 2:		sprintf(str, "%s", "Tue");	break;
		case 3:		sprintf(str, "%s", "Wed");	break;
		case 4:		sprintf(str, "%s", "Thu");	break;
		case 5:		sprintf(str, "%s", "Fri");	break;
		case 6:		sprintf(str, "%s", "Sat");	break;
		default:	sprintf(str, "%s", "xxx");	break;
		}
		gdispFillArea(420 + 150, 550, 100, 40, Black);
	    if(engineering_mode_setup_item == 4)
	    	gdispFillString(420 + 150, 550, str, font, White, Red);
	    else
    	gdispDrawString(420 + 150, 550, str, font, Red);

	    if(engineering_mode_setup_item == 5)
	    	sprintf(str, "%d", hour_eng);
	    else
    	sprintf(str, "%d", rtc.tm_hour);
		gdispFillArea(420 + 150, 650, 100, 40, Black);
	    if(engineering_mode_setup_item == 5)
	    	gdispFillString(420 + 150, 650, str, font, White, Red);
	    else
	    	gdispDrawString(420 + 150, 650, str, font, Red);

	    if(engineering_mode_setup_item == 6)
	    	sprintf(str, "%d", minutes_eng);
	    else
	    	sprintf(str, "%d", rtc.tm_min);
	    gdispFillArea(420 + 150, 750, 100, 40, Black);
	    if(engineering_mode_setup_item == 6)
	    	gdispFillString(420 + 150, 750, str, font, White, Red);
	    else
	    	gdispDrawString(420 + 150, 750, str, font, Red);

	    if(engineering_mode_setup_item == 7)
	    	sprintf(str, "%d", seconds_eng);
	    else
	    	sprintf(str, "%d", rtc.tm_sec);
	    gdispFillArea(420 + 150, 850, 100, 40, Black);
	    if(engineering_mode_setup_item == 7)
	    	gdispFillString(420 + 150, 850, str, font, White, Red);
	    else
	    	gdispDrawString(420 + 150, 850, str, font, Red);
	}

	// Create label
	if(flag_use_2_framebuffers == TRUE)
	{
	bootup_time = 0;
	wi.g.width = WIDTH1 + 10; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 7;
	//wi.text = "";
	sprintf((char *)wi.text, "%02d/%02d/%4d", rtc.tm_mon, rtc.tm_mday, rtc.tm_year + 1900);
	rtc.tm_mon -= 1;	//for asctime
	ghLabel4 = gwinLabelCreate(0, &wi);

	// Create label
	wi.g.width = WIDTH5; wi.g.height = THICK1; wi.g.x = BORDER_X + WIDTH1 + 10, wi.g.y = BORDER_Y + THICK1 * 7;
	//wi.text = "";
	switch(rtc.tm_wday)
	{
	case 0:		sprintf((char *)wi.text, "%s", "Sun");	break;
	case 1:		sprintf((char *)wi.text, "%s", "Mon");	break;
	case 2:		sprintf((char *)wi.text, "%s", "Tue");	break;
	case 3:		sprintf((char *)wi.text, "%s", "Wed");	break;
	case 4:		sprintf((char *)wi.text, "%s", "Thu");	break;
	case 5:		sprintf((char *)wi.text, "%s", "Fri");	break;
	case 6:		sprintf((char *)wi.text, "%s", "Sat");	break;
	default:	sprintf((char *)wi.text, "%s", "xxx");	break;
	}

	ghLabel5 = gwinLabelCreate(0, &wi);

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 8;
	//wi.text = "";
	sprintf((char *)wi.text, "%02d:%02d:%02d", rtc.tm_hour, rtc.tm_min, rtc.tm_sec);
	ghLabel6 = gwinLabelCreate(0, &wi);
	}
	else
	{
	if((rtc.tm_min != minutes_old) || (bootup_time == 1))
	{
	bootup_time = 0;
	wi.g.width = WIDTH1 + 10; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 7;
	//wi.text = "";
	sprintf((char *)wi.text, "%02d/%02d/%4d", rtc.tm_mon, rtc.tm_mday, rtc.tm_year + 1900);
	rtc.tm_mon -= 1;	//for asctime
	ghLabel4 = gwinLabelCreate(0, &wi);

	// Create label
	wi.g.width = WIDTH5; wi.g.height = THICK1; wi.g.x = BORDER_X + WIDTH1 + 10, wi.g.y = BORDER_Y + THICK1 * 7;
	//wi.text = "";
	switch(rtc.tm_wday)
	{
	case 0:		sprintf((char *)wi.text, "%s", "Sun");	break;
	case 1:		sprintf((char *)wi.text, "%s", "Mon");	break;
	case 2:		sprintf((char *)wi.text, "%s", "Tue");	break;
	case 3:		sprintf((char *)wi.text, "%s", "Wed");	break;
	case 4:		sprintf((char *)wi.text, "%s", "Thu");	break;
	case 5:		sprintf((char *)wi.text, "%s", "Fri");	break;
	case 6:		sprintf((char *)wi.text, "%s", "Sat");	break;
	default:	sprintf((char *)wi.text, "%s", "xxx");	break;
	}

	ghLabel5 = gwinLabelCreate(0, &wi);

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 8;
	//wi.text = "";
	sprintf((char *)wi.text, "%02d:%02d:%02d", rtc.tm_hour, rtc.tm_min, rtc.tm_sec);
	ghLabel6 = gwinLabelCreate(0, &wi);
	}
	else
	{
		/*
						// Create label
						wi.g.width = wide; wi.g.height = thick; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + thick * 8;
						wi.text = "";
						sprintf((char *)wi.text, "%02d:%02d:%02d", rtc.tm_hour, rtc.tm_min, rtc.tm_sec);
						ghLabel6 = gwinLabelCreate(0, &wi);
		*/

		if(((rtc.tm_sec % 10) == 0) || (abs(rtc.tm_sec, seconds_old) > 1))
		{
			wi.g.width = wide - 84 - 10; wi.g.height = THICK1; wi.g.x = BORDER_X + 84, wi.g.y = BORDER_Y + THICK1 * 8;
			//wi.text = "";
			sprintf((char *)wi.text, "%02d", rtc.tm_sec);
			ghLabel6 = gwinLabelCreate(0, &wi);
		}
		else
		{
			wi.g.width = wide - 84 - 15 - 10; wi.g.height = THICK1; wi.g.x = BORDER_X + 84 + 15, wi.g.y = BORDER_Y + THICK1 * 8;
			//wi.text = "";
			sprintf((char *)wi.text, "%d", (rtc.tm_sec%10));
			ghLabel6 = gwinLabelCreate(0, &wi);
		}
	}
	}

	seconds_old = rtc.tm_sec;
	minutes_old = rtc.tm_min;
	hour_old = rtc.tm_hour;
	day_old = rtc.tm_wday;
	date_old = rtc.tm_mday;
	month_old = rtc.tm_mon;
	year_old = rtc.tm_year;

	if((rtc.tm_year == 119) && (rtc.tm_mon == 0) && (rtc.tm_mday < 20))
	{
		wi.g.width = 500; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 7;
		//wi.text = "";
		sprintf((char *)wi.text, "Battery fails, please replace the battery.");
		ghLabel4 = gwinLabelCreate(0, &wi);

		wi.g.width = 500; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 8;
		//wi.text = "";
		sprintf((char *)wi.text, "Battery fails, please replace the battery.");
		ghLabel6 = gwinLabelCreate(0, &wi);
	}

#ifdef USE_PREVENT_REUSE
	//if(((rtc.tm_sec == write_every_minute) && (rtc.tm_min % 1) == 0) && (flag_forbid_video == FALSE))
	//if(((rtc.tm_sec == write_every_minute) && (rtc.tm_min % 1) == 0))
	if((rtc.tm_sec == write_every_minute) && (minutes_write != rtc.tm_min))
	{
		//xil_printf("david0116: %s:%s(%d) ST rtc.tm_min = %d rtc.tm_sec = %d cnt = %d call write\r\n",__FILE__,__func__,__LINE__, rtc.tm_min, rtc.tm_sec, system_power_on_count);
		system_power_on_count++;
		write_system_uptime_to_eeprom(system_power_on_count);
		//debug_console_print("+");
		minutes_write = rtc.tm_min;
	}

	uint32_t start_time_tmp = 0;
	uint32_t stop_time_tmp = 0;
	uint32_t start_count_tmp = 0;
	uint32_t stop_count_tmp = 0;
	/*
	int xx;
	int yy;
	*/

	if((g_procedure_started == START) && (g_conn_status == CAMERA_OK))
	{
		uint32_t tt = g_ms_tick - g_ms_tick_start;
		uint32_t hh;
		uint32_t mm;
		uint32_t ss;
		//uint32_t ms;	//msec

		start_time_this = tt / 1000;
		start_time_tmp = start_time_total + start_time_this;

		//ms = tt % 1000 * 1;
		ss = (tt / 1000) % 60;
		mm = ((tt / 1000) / 60) % 60;
		hh = ((tt / 1000) / 60) / 60;

		//xil_printf("\n\rElasped time is %02d:%02d:%02d.%03d\n\r", hh, mm, ss, dd);

		wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X + 300, wi.g.y = CAMERA_INFO_POS_Y4;
		//wi.text = "";
		sprintf((char *)wi.text, "%02ld:%02ld:%02ld", hh, mm, ss);
		ghLabel6 = gwinLabelCreate(0, &wi);

		if(flag_forbid_video == FALSE)
		{
			wi.g.width = wide; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y3;
			//wi.text = "";
			sprintf((char *)wi.text, "%ld:%02ld / %ld:%02ld %6ld", start_time_tmp / 60, start_time_tmp % 60, stop_time_total / 60, stop_time_total % 60, total_power_off_time);
			ghLabel6 = gwinLabelCreate(0, &wi);
		}

		if((start_time_tmp > start_time_total) && ((start_time_tmp % ONE_MINUTE) == 0) && (flag_forbid_video == FALSE))
		{

			start_time_tmp -= start_time_total;
			//xil_printf("draw circle, start_time_tmp = %d start_time_tmp = %d\n\r", start_time_tmp, start_time_tmp);

			//char str[40];
			start_count_this++;
			start_count_tmp = start_count_total + start_count_this;

			if(start_count_tmp <= 45)
			{
				/*
				font_t font = gdispOpenFont("iskpota232");
				sprintf(str, "%d", start_count_tmp);

				xx = 300 + ((start_time_tmp - ONE_MINUTE) / ONE_MINUTE) % 15 * 20;
				yy = 280 + (start_time_tmp - ONE_MINUTE) / ONE_MINUTE / 15 * 20;

				//xil_printf("cc = %d tmp = %d x =x %d yy = %d\n\r", start_count_tmp, start_time_tmp, xx, yy);
				gdispFillCircle(xx, yy, 10, White);
				gdispFillArea(620, 290, 50, 50, Black);
				gdispDrawString(620, 290, str, font, Red);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				gdispFillCircle(xx, yy, 10, White);
				gdispFillArea(620, 290, 50, 50, Black);
				gdispDrawString(620, 290, str, font, Red);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
				gdispFillCircle(xx, yy, 10, White);
				gdispFillArea(620, 290, 50, 50, Black);
				gdispDrawString(620, 290, str, font, Red);
				*/
			}
		}
	}
	else if(((g_procedure_started == START) || (flag_check_pull_out_time == TRUE)) && (g_conn_status == CAMERA_NONE))
	{
		uint32_t tt = g_ms_tick - g_ms_tick_start;
		uint32_t hh;
		uint32_t mm;
		uint32_t ss;
		//uint32_t ms;	//msec

		stop_time_this = tt / 1000;
		stop_time_tmp = stop_time_total + stop_time_this;

		//ms = tt % 1000 * 1;
		ss = (tt / 1000) % 60;
		mm = ((tt / 1000) / 60) % 60;
		hh = ((tt / 1000) / 60) / 60;

		wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X + 300, wi.g.y = CAMERA_INFO_POS_Y4;
		//wi.text = "";
		sprintf((char *)wi.text, "%02ld:%02ld:%02ld", hh, mm, ss);
		ghLabel6 = gwinLabelCreate(0, &wi);

		if(flag_forbid_video == FALSE)
		{
			//xil_printf("stop_time_this = %d stop_time_tmp = %d\n\r", stop_time_this, stop_time_tmp);
			wi.g.width = wide; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y3;
			//wi.text = "";
			sprintf((char *)wi.text, "%ld:%02ld / %ld:%02ld %6ld", start_time_total / 60, start_time_total % 60, stop_time_tmp / 60, stop_time_tmp % 60, total_power_off_time);
			ghLabel6 = gwinLabelCreate(0, &wi);
		}

		if((stop_time_tmp > stop_time_total) && ((stop_time_tmp % ONE_MINUTE) == 0) && (flag_forbid_video == FALSE))
		{
			stop_time_tmp -= stop_time_total;
			//char str[40];
			stop_count_this++;
			stop_count_tmp = stop_count_total + stop_count_this;

			if(stop_count_tmp <= 45)
			{
				/*
				font_t font = gdispOpenFont("iskpota232");
				sprintf(str, "%d", (int)stop_count_tmp);

				xx = 300 + ((stop_time_tmp - ONE_MINUTE) / ONE_MINUTE) % 15 * 20;
				yy = 360 + (stop_time_tmp - ONE_MINUTE) / ONE_MINUTE / 15 * 20;

				//xil_printf("cc = %d tmp = %d x =x %d yy = %d\n\r", stop_count_tmp, stop_time_tmp, xx, yy);

				gdispFillCircle(xx, yy, 10, Gray);
				gdispFillArea(620, 370, 50, 50, Black);
				gdispDrawString(620, 370, str, font, Red);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				gdispFillCircle(xx, yy, 10, Gray);
				gdispFillArea(620, 370, 50, 50, Black);
				gdispDrawString(620, 370, str, font, Red);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
				gdispFillCircle(xx, yy, 10, Gray);
				gdispFillArea(620, 370, 50, 50, Black);
				gdispDrawString(620, 370, str, font, Red);
				*/
			}
		}
	}

	if((g_procedure_started == START) && (g_conn_status == CAMERA_OK) && (flag_forbid_video == FALSE))
	{
		wi.g.width = 200; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y4;
		//wi.text = "";
		//if((time_tick > 0) && ((time_tick % ONE_MINUTE) == 0))
		if((time_tick > start_time_total) && ((time_tick % ONE_MINUTE) == 0))
		{
			if((time_tick / ONE_MINUTE) <= 896)
			{
				if((time_tick / ONE_MINUTE) == 1)
				{
					sprintf((char *)wi.text, "%d:%02d   1Minute", time_tick / 60, time_tick % 60);
					XIicPs_EraseEepromPage(25);
					write_camera_serial_to_eeprom();
					write_date_to_camera(DATE_PAGE1);
					write_date_to_eeprom();
					flag_camera_status = CAMERA_1M;
					flag_updateShowCameraDate = 1;
					total_power_off_time = 0;
					write_total_power_off_time_to_eeprom();
					flag_check_pull_out_time = TRUE;
				}
				else if((time_tick / ONE_MINUTE) == THIRTY_MINUTE)
				{
					sprintf((char *)wi.text, "%d:%02d   30M", time_tick / 60, time_tick % 60);
					write_date_to_camera(DATE_PAGE3);
					flag_camera_status = CAMERA_30M;
					flag_updateShowCameraDate = 1;
				}
				else
				{
					sprintf((char *)wi.text, "%d:%02d   1M", time_tick / 60, time_tick % 60);
				}

				if((time_tick / ONE_MINUTE) <= 30)
				{
					write_camera_use_time_to_camera(time_tick / ONE_MINUTE);	//to camera flash
				}
				xil_printf("time_tick = %d write A to %d\n\r", time_tick, time_tick / ONE_MINUTE);
				xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);
				write_camera_use_time_to_eeprom(time_tick / ONE_MINUTE);	//to eeprom
			}
		}
		else
		{
			sprintf((char *)wi.text, "%d:%02d", time_tick / 60, time_tick % 60);
		}
		ghLabel8 = gwinLabelCreate(0, &wi);
		time_tick++;
	}
	//else if((g_procedure_started == START) && (g_conn_status == CAMERA_NONE) && (flag_forbid_video == FALSE))
	else if((flag_check_pull_out_time == TRUE) && (g_conn_status == CAMERA_NONE) && (flag_forbid_video == FALSE))
	{
		wi.g.width = 200; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y4;
		//wi.text = "";

		//if((time_tick > 0) && ((time_tick % ONE_MINUTE) == 0))
		if((time_tick > stop_time_total) && ((time_tick % ONE_MINUTE) == 0))
		{
			if((time_tick / ONE_MINUTE) <= 64)
			{
				sprintf((char *)wi.text, "%d write B", time_tick);
				xil_printf("time_tick = %d write B to %d\n\r", time_tick, time_tick / ONE_MINUTE);
				write_camera_nouse_time_to_eeprom(time_tick / ONE_MINUTE);	//to eeprom

				if(flag_camera_invalid == FALSE)
				{
					if(flag_camera_status == CAMERA_1M)
					{
						if((time_tick / ONE_MINUTE) >= THIRTY_MINUTE)
						{
							if(stop_time_this > 70)
							{
								flag_camera_invalid = TRUE;
								write_invalid_to_eeprom(VIDEO_FORBID_PULL_OUT_LONG_1M);
								xil_printf("Invalid c VIDEO_FORBID_PULL_OUT_LONG_1M, t = %d minutes\n\r", (time_tick / ONE_MINUTE));
								debug_console_print("Invalid camera for PULL_OUT_LONG_1M\n");
							}
						}

					}
					else if(flag_camera_status == CAMERA_30M)
					{
						if((time_tick / ONE_MINUTE) >= 1)
						{
							if(stop_time_this > 70)
							{
								flag_camera_invalid = TRUE;
								write_invalid_to_eeprom(VIDEO_FORBID_PULL_OUT_LONG_30M);
								xil_printf("Invalid d VIDEO_FORBID_PULL_OUT_LONG_30M, t = %d minute(s)\n\r", (time_tick / ONE_MINUTE));
								debug_console_print("Invalid camera for PULL_OUT_LONG_30M\n");
							}
						}
					}
					else
					{
						xil_printf("david0311: %s:%s(%d) ST xxxxxxxxxxxxxxxxxx\r\n", __FILE__, __func__, __LINE__);
						xil_printf("stop_time_this = %d stop_time_tmp = %d\n\r", stop_time_this, stop_time_tmp);
					}
				}


			}
		}
		else
			sprintf((char *)wi.text, "%d:%02d", time_tick / 60, time_tick % 60);
		ghLabel8 = gwinLabelCreate(0, &wi);
		time_tick++;
	}
	else if(flag_forbid_video == FALSE)
	{
		wi.g.width = wide; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y3;
		//wi.text = "";
		sprintf((char *)wi.text, "%ld:%02ld / %ld:%02ld %6ld", start_time_total / 60, start_time_total % 60, stop_time_total / 60, stop_time_total % 60, total_power_off_time);
		ghLabel6 = gwinLabelCreate(0, &wi);

		wi.g.width = wide; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y4;
		//wi.text = "";
		sprintf((char *)wi.text, "0:00");
		ghLabel8 = gwinLabelCreate(0, &wi);
	}
	#endif

#ifdef USE_DEBUG_MESSAGE
	u32 TempRawData;
	float TempData;

	if(temperature_current == 0)
		return;

	TempRawData = temperature_current;
	TempData = XAdcPs_RawToTemperature(TempRawData);

	wi.g.width = 200; wi.g.height = THICK1; wi.g.x = BORDER_X + 150, wi.g.y = BORDER_Y + THICK1 * 10;
	//wi.text = "";
	sprintf((char *)wi.text, "%0d.%03d Celsius", (int)(TempData), XAdcFractionToInt(TempData));
	ghLabel6 = gwinLabelCreate(0, &wi);
#endif

	if(flag_engineering_mode == TRUE)
	{
		u32 TempRawData;
		float TempData;

		if(temperature_current == 0)
			return;

		TempRawData = temperature_current;
		TempData = XAdcPs_RawToTemperature(TempRawData);

		char str[40];
		font_t font = gdispOpenFont("iskpota232");

	   	sprintf(str, "%0d.%03d Celsius", (int)(TempData), XAdcFractionToInt(TempData));
	    gdispFillArea(720, 850, 200, 40, Black);
		gdispDrawString(720, 850, str, font, White);
	}
	return;
}

int XIicPs_ReadEepromData(uint16_t page, uint16_t addr, uint16_t len, u8 *Buffer)
{
	int Status;
	int Index;

	//xil_printf("XIicPs_ReadEepromData\n\r");

	xil_printf("XIicPs_ReadEepromData page = %d addr = %d len = %d\n\r", page, addr, len);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_ReadEepromData parameter error, page=%d\n\r", page);
		return XST_FAILURE;

	}

	if((addr < 0) || (addr > 1023))
	{
		xil_printf("XIicPs_ReadEepromData parameter error, addr = %d\n\r", addr);
		return XST_FAILURE;
	}

	if((len < 0) || (len > 1024))
	{
		xil_printf("XIicPs_ReadEepromData parameter error, len = %d\n\r", len);
		return XST_FAILURE;
	}

	if((addr + len) > 1024)
	{
		xil_printf("XIicPs_ReadEepromData parameter error, addr = %d, len = %d, addr + len = %d\n\r", addr, len, addr + len);
		return XST_FAILURE;
	}

	if(Buffer == 0)
	{
		xil_printf("XIicPs_ReadEepromData parameter error, Buffer = null\n\r");
		return XST_FAILURE;
	}

	for (Index = 0; Index < len; Index++) {
		Buffer[Index] = '-';
	}

	//SendBuffer[0] = 0x00;	//offset
	//SendBuffer[1] = 0x00;	//offset

	SendBuffer[0] = (page << 2) | ((addr >> 8) & 0x03);	//offset
	SendBuffer[1] = addr & 0xff;	//offset

	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			2, EEPROM_IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}


	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, Buffer,
			len, EEPROM_IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	for (Index = 0; Index < len; Index++) {
		if(isprint(Buffer[Index]))
			xil_printf("%c", Buffer[Index]);
		else
		{
			//xil_printf("^");
			xil_printf("%02x ", Buffer[Index]);
		}
	}
	xil_printf("+++++\n\r");
	*/

	return XST_SUCCESS;
}

int XIicPs_WriteEepromData(uint16_t page, uint16_t addr, uint16_t len, u8 *Buffer)
{
	int Status;
	int i;

	//xil_printf("XIicPs_WriteEepromData page = %d addr = %d len = %d\n\r", page, addr, len);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_WriteEepromData parameter error, page=%d\n\r", page);
		return XST_FAILURE;
	}

	if((addr < 0) || (addr > 1023))
	{
		xil_printf("XIicPs_WriteEepromData parameter error, addr = %d\n\r", addr);
		return XST_FAILURE;
	}

	if((len < 0) || (len > 1023))
	{
		xil_printf("XIicPs_WriteEepromData parameter error, len = %d\n\r", len);
		return XST_FAILURE;
	}

	if((addr + len) > 1023)
	{
		xil_printf("XIicPs_WriteEepromData parameter error, addr = %d, len = %d, addr + len = %d\n\r", addr, len, addr + len);
		return XST_FAILURE;
	}

	if(Buffer == 0)
	{
		xil_printf("XIicPs_ReadEepromData parameter error, Buffer = null\n\r");
		return XST_FAILURE;
	}

	//copy data
	for(i = 0; i < len; i++)
	{
		SetInfoBuffer[i + 2] = Buffer[i];	//data
	}

	SetInfoBuffer[0] = (page << 2) | ((addr >> 8) & 0x03);	//offset
	SetInfoBuffer[1] = addr & 0xff;	//offset

	xil_printf("XIicPs_WriteEepromData page = %d addr = %d len = %d\n\r", page, addr, len);
	Status = XIicPs_MasterSendPolled(&Iic, SetInfoBuffer,
			(len + 2), EEPROM_IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) fail b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

int XIicPs_ReadEepromPage(uint16_t page, u8 *eeprom_page_buffer)
{
	int Status;
	int Index;

	xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", page);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_ReadEepromPage parameter error, page=%d\n\r", page);
		return XST_FAILURE;
	}

	if(eeprom_page_buffer == 0)
	{
		xil_printf("XIicPs_ReadEepromPage parameter error, Buffer = null\n\r");
		return XST_FAILURE;
	}

	for (Index = 0; Index < INFO_BUFFER_SIZE; Index++) {
		eeprom_page_buffer[Index] = '-';
	}

	SendBuffer[0] = page << 2;	//offset
	SendBuffer[1] = 0;			//offset

	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	xil_printf("11");

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			2, EEPROM_IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */

	xil_printf("22");

	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, eeprom_page_buffer,
			INFO_BUFFER_SIZE, EEPROM_IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	xil_printf("33");
	return XST_SUCCESS;
}

int XIicPs_EraseEepromPage(uint16_t page)
{
	int Status;
	int i;
	int j;
	int len = 64;
	int addr = 0;
	u8 Buffer[64];

	xil_printf("\n\rXIicPs_EraseEepromPage, page= %d\n\r", page);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_EraseEepromPage parameter error, page=%d\n\r", page);
		return XST_FAILURE;
	}

	for(j = 0; j < (1024/64); j++)
	{
		//xil_printf("j = %d\n\r", j);
		addr = j * 64;
		for(i = 0; i < len; i++)
		{
			Buffer[i] = 0xFF;
			/*
			if(page < 26)
				Buffer[i] = 'A' + page;		//data
			else if(page == 26)
				Buffer[i] = '{';			//data
			else if(page == 27)
				Buffer[i] = '}';			//data
			else if(page == 28)
				Buffer[i] = '[';			//data
			else if(page == 29)
				Buffer[i] = ']';			//data
			else if(page == 30)
				Buffer[i] = '(';			//data
			else if(page == 31)
				Buffer[i] = ')';			//data
			*/
		}

		//copy data
		for(i = 0; i < len; i++)
		{
			SetInfoBuffer[i + 2] = Buffer[i];	//data
		}

		SetInfoBuffer[0] = (page << 2) | ((addr >> 8) & 0x03);	//offset
		SetInfoBuffer[1] = addr & 0xff;	//offset

		Status = XIicPs_MasterSendPolled(&Iic, SetInfoBuffer,
				(len + 2), EEPROM_IIC_SLAVE_ADDR);
		if (Status != XST_SUCCESS) {
			xil_printf("david0719: %s:%s(%d) fail b\r\n",__FILE__,__func__,__LINE__);
			return XST_FAILURE;
		}
		usleep(10000);
	}
	return XST_SUCCESS;
}

int XIicPs_EraseEeprom(uint16_t page, uint16_t addr0, uint16_t len)
{
	int Status;
	int i;
	int j;
	int burst_len = 64;
	int addr = 0;
	u8 Buffer[64];

	xil_printf("\n\rXIicPs_EraseEeprom, page= %d\n\r", page);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_EraseEeprom parameter error, page=%d\n\r", page);
		return XST_FAILURE;
	}

	for(j = 0; j < (len/burst_len); j++)
	{
		addr = addr0 + j * burst_len;
		xil_printf("j = %d addr = %d\n\r", j, addr);
		for(i = 0; i < burst_len; i++)
		{
			//Buffer[i] = 0xFF;
			if(page < 26)
				Buffer[i] = 'A' + page;		//data
			else if(page == 26)
				Buffer[i] = '-';			//data
			else if(page == 27)
				Buffer[i] = '-';			//data
			else if(page == 28)
				Buffer[i] = '-';			//data
			else if(page == 29)
				Buffer[i] = '-';			//data
			else if(page == 30)
				Buffer[i] = '-';			//data
			else if(page == 31)
				Buffer[i] = '-';			//data
		}

		//copy data
		for(i = 0; i < burst_len; i++)
		{
			SetInfoBuffer[i + 2] = Buffer[i];	//data
		}

		SetInfoBuffer[0] = (page << 2) | ((addr >> 8) & 0x03);	//offset
		SetInfoBuffer[1] = addr & 0xff;	//offset

		Status = XIicPs_MasterSendPolled(&Iic, SetInfoBuffer,
				(burst_len + 2), EEPROM_IIC_SLAVE_ADDR);
		if (Status != XST_SUCCESS) {
			xil_printf("david0719: %s:%s(%d) fail b\r\n",__FILE__,__func__,__LINE__);
			return XST_FAILURE;
		}
		usleep(10000);
	}
	return XST_SUCCESS;
}

int XIicPs_WriteEepromPage(uint16_t page)
{
	int Status;
	int i;
	int j;
	int len = 64;
	int addr = 0;
	u8 Buffer[64];

	xil_printf("\n\rXIicPs_WriteEepromPage, page= %d\n\r", page);
	if((page < 0) || (page > 31))
	{
		xil_printf("XIicPs_WriteEepromPage parameter error, page=%d\n\r", page);
		return XST_FAILURE;
	}

	for(j = 0; j < (1024/64); j++)
	{
		//xil_printf("j = %d\n\r", j);
		addr = j * 64;

		for(i = 0; i < len; i++)
		{
			Buffer[i] = page;
		}

		//copy data
		for(i = 0; i < len; i++)
		{
			SetInfoBuffer[i + 2] = Buffer[i];	//data
		}

		SetInfoBuffer[0] = (page << 2) | ((addr >> 8) & 0x03);	//offset
		SetInfoBuffer[1] = addr & 0xff;	//offset

		Status = XIicPs_MasterSendPolled(&Iic, SetInfoBuffer,
				(len + 2), EEPROM_IIC_SLAVE_ADDR);
		if (Status != XST_SUCCESS) {
			xil_printf("david0719: %s:%s(%d) fail b\r\n",__FILE__,__func__,__LINE__);
			return XST_FAILURE;
		}
		usleep(10000);
	}
	return XST_SUCCESS;
}

int XIicPs_EraseEepromAll(void)
{
	int i;
	xil_printf("\n\rXIicPs_EraseEepromAll\n\r");
	for(i = 0; i< 32; i++)
	{
		XIicPs_EraseEepromPage(i);
	}
	return XST_SUCCESS;
}

int XIicPs_ReadEepromAll(void)
{
	int i;
	xil_printf("\n\rXIicPs_ReadEepromAll\n\r");
	for(i = 0; i< 32; i++)
	{
		xil_printf("page= %d\n\r", i);
		XIicPs_ReadEepromPage(i, eeprom_page_buffer);
		XIicPs_PrintPageData(i, eeprom_page_buffer);
	}
	return XST_SUCCESS;
}

int XIicPs_WriteEepromAll(void)
{
	int i;
	xil_printf("\n\rXIicPs_WriteEepromAll\n\r");
	for(i = 0; i< 32; i++)
	{
		XIicPs_WriteEepromPage(i);
	}
	return XST_SUCCESS;
}

#ifdef USE_PREVENT_REUSE
void read_camera_info_from_eeprom(void)
{
	int i;
	int state;
	xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", 25);
	state = XIicPs_ReadEepromPage(25, eeprom_page_buffer);
	if(state == XST_FAILURE)
	{
		xil_printf("xxxxxxx I2C fail, try again\n\r");
		usleep(1000);
		state = XIicPs_ReadEepromPage(25, eeprom_page_buffer);
	}

	if(eeprom_page_buffer[1] == 0xFF)
	{
		xil_printf("No data in EEPROM Page 25\n\r");
		xil_printf("info : %02X%02X-%02X%02X-%02X%02X-%02X%02X\n\r",
				eeprom_page_buffer[0], eeprom_page_buffer[1], eeprom_page_buffer[2], eeprom_page_buffer[3],
				eeprom_page_buffer[4], eeprom_page_buffer[5], eeprom_page_buffer[6], eeprom_page_buffer[7]);
		camera_nouse_time_from_eeprom = 0;
		camera_use_time_from_eeprom = 0;
		total_power_off_time = 0;
		for(i = 0; i < 16; i++)
		{
			camera_serial_old[i] = 0;
		}
		return;
	}

	for(i = 0; i < 16; i++)
	{
		camera_serial_old[i] = eeprom_page_buffer[16 + i];
	}

	xil_printf("S/N : %02X%02X-%02X%02X-%02X%02X-%02X%02X\n\r",
			eeprom_page_buffer[16], eeprom_page_buffer[17], eeprom_page_buffer[18], eeprom_page_buffer[19],
			eeprom_page_buffer[20], eeprom_page_buffer[21], eeprom_page_buffer[22], eeprom_page_buffer[23]);

	/*
	for (i = 0; i < 7; i++)
	{
		if(i == 0)
			xil_printf("Date : %d", eeprom_page_buffer[i] + 1900);
		else if(i == 3)
			xil_printf("%d", eeprom_page_buffer[i]);
		else
			xil_printf("%02d", eeprom_page_buffer[i]);
		if((i == 0)||(i == 1))
			xil_printf("/");
		else if((i == 4)||(i == 5))
			xil_printf(":");
		else
			xil_printf(" ");
	}
	xil_printf("\n\r");
	*/

	/*
	if((page_data[12] == 0xAA) && (page_data[13] == 0xBB) && (page_data[14] == 0xCC) && (page_data[15] == 0xDD))
	{
		u32 year;
		u8 month;
		u8 mday;
		u8 wday;
		u8 hour;
		u8 minutes;
		u8 seconds;

		year = eeprom_page_buffer[0] + 1900;
		month = eeprom_page_buffer[1];
		mday = eeprom_page_buffer[2];
		wday = eeprom_page_buffer[3];
		hour = eeprom_page_buffer[4];
		minutes = eeprom_page_buffer[5];
		seconds = eeprom_page_buffer[6];

		//sprintf((char *)wi.text, "USED : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);

		xil_printf("USED : %02d/%02d/%04ld %d %02d:%02d:%02d\n\r", month, mday, year, wday, hour, minutes, seconds);

		xil_printf("year = %d\n\r", year);
		xil_printf("month = %d\n\r", month);
		xil_printf("day = %d\n\r", mday);
		xil_printf("wday = %d\n\r", wday);
		xil_printf("hour = %d\n\r", hour);
		xil_printf("minute = %d\n\r", minutes);
		xil_printf("second = %d\n\r", seconds);
	}
	*/

	int cnt = 0;

	for(i = 56; i < 61; i++)
	{
		if(eeprom_page_buffer[i] == 'X')
		{
			cnt++;
		}
		else
		{
			cnt = 0;
		}
	}

	if(cnt == 5)
	{
		flag_camera_invalid = TRUE;
		flag_camera_invalid_id = eeprom_page_buffer[61];
	}
	else
	{
		flag_camera_invalid = FALSE;
		flag_camera_invalid_id = 0;
	}

	xil_printf("flag_camera_invalid = %d\n\r", flag_camera_invalid);
	xil_printf("flag_camera_invalid_id = %d\n\r", flag_camera_invalid_id);

	total_power_off_time = eeprom_page_buffer[62] << 8 | eeprom_page_buffer[63];
	if(total_power_off_time == 0xffff)
		total_power_off_time = 0;

	xil_printf("\n\rtotal_power_off_time = %3d minutes\n\r", total_power_off_time);

	for (i = 64; i < (64 + 64); i++) {
		if(eeprom_page_buffer[i] != 'B')
		{
			break;
		}
	}
	//xil_printf("\n\rcamera nouse time from eeprom = %3d minutes\n\r", i - 64);
	camera_nouse_time_from_eeprom = i - 64;

	for (i = 128; i < 1024; i++) {
		if(eeprom_page_buffer[i] != 'A')
		{
			break;
		}
	}
	//xil_printf("\n\rcamera use time from eeprom = %3d minutes\n\r", i - 128);
	camera_use_time_from_eeprom = i - 128;
	return;
}

void read_last_power_off_time_from_eeprom(void)
{
	int i;
	int state;
	xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", 28);
	state = XIicPs_ReadEepromPage(28, eeprom_page_buffer);
	if(state == XST_FAILURE)
	{
		xil_printf("xxxxxxx I2C fail, try again\n\r");
		usleep(1000);
		state = XIicPs_ReadEepromPage(28, eeprom_page_buffer);
	}

	if(eeprom_page_buffer[1] == 0xFF)
	{
		xil_printf("No data in EEPROM Page 28\n\r");
		return;
	}

	/*
	for (i = 0; i < 7; i++)
	{
		if(i == 0)
			xil_printf("Date : %d", eeprom_page_buffer[i] + 1900);
		else if(i == 3)
			xil_printf("%d", eeprom_page_buffer[i]);
		else
			xil_printf("%02d", eeprom_page_buffer[i]);
		if((i == 0)||(i == 1))
			xil_printf("/");
		else if((i == 4)||(i == 5))
			xil_printf(":");
		else
			xil_printf(" ");
	}
	xil_printf("\n\r");
	*/

	/*
	if((page_data[12] == 0xAA) && (page_data[13] == 0xBB) && (page_data[14] == 0xCC) && (page_data[15] == 0xDD))
	{
		u32 year;
		u8 month;
		u8 mday;
		u8 wday;
		u8 hour;
		u8 minutes;
		u8 seconds;

		year = eeprom_page_buffer[0] + 1900;
		month = eeprom_page_buffer[1];
		mday = eeprom_page_buffer[2];
		wday = eeprom_page_buffer[3];
		hour = eeprom_page_buffer[4];
		minutes = eeprom_page_buffer[5];
		seconds = eeprom_page_buffer[6];

		//sprintf((char *)wi.text, "USED : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);

		xil_printf("USED : %02d/%02d/%04ld %d %02d:%02d:%02d\n\r", month, mday, year, wday, hour, minutes, seconds);

		xil_printf("year = %d\n\r", year);
		xil_printf("month = %d\n\r", month);
		xil_printf("day = %d\n\r", mday);
		xil_printf("wday = %d\n\r", wday);
		xil_printf("hour = %d\n\r", hour);
		xil_printf("minute = %d\n\r", minutes);
		xil_printf("second = %d\n\r", seconds);
	}
	*/

	for (i = 16; i < 1024; i++) {
		if(eeprom_page_buffer[i] != 'A')
		{
			break;
		}
	}
	system_power_on_count_from_eeprom = i - 16;
	xil_printf("\n\rpower off time count = %d\n\r", i - 16);
	return;
}

void write_camera_serial_to_eeprom(void)
{
	read_serial_from_camera();
	xil_printf("call XIicPs_WriteEepromData 25 for serial\n\r");
	/*
	int i;
	for(i = 0; i < 16; i++)
	{
		page_data[i] = 'A';
	}
	*/
	XIicPs_WriteEepromData(25, 16, 16, page_data);
	return;
}

void write_total_power_off_time_to_eeprom(void)
{
	xil_printf("call XIicPs_WriteEepromData 25 for write_total_power_off_time_to_eeprom = %d min\n\r", total_power_off_time);
	page_data[0] = (total_power_off_time >> 8) & 0xff;
	page_data[1] = total_power_off_time & 0xff;
	XIicPs_WriteEepromData(25, 62, 2, page_data);
	return;
}
#endif

uint32_t check_dongle_usage_count(void)
{
	uint32_t i;
	int state;
	xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", 26);
	state = XIicPs_ReadEepromPage(26, eeprom_page_buffer);
	if(state == XST_FAILURE)
	{
		xil_printf("xxxxxxx I2C fail, try again\n\r");
		usleep(1000);
		state = XIicPs_ReadEepromPage(26, eeprom_page_buffer);
	}

	//XIicPs_PrintPageData(26, eeprom_page_buffer);
	for (i = 0; i < INFO_BUFFER_SIZE; i++) {
		if(eeprom_page_buffer[i] != 'X')
		{
			break;
		}
	}
	return i;
}

#ifdef USE_DEBUG_MESSAGE
void write_compile_time_count(void)
{
	XIicPs_WriteEepromData(27, 0, 8, (u8*)__TIME__);
	return;
}

uint32_t check_fw_write_count(void)
{
	int i;
	uint32_t cnt;
	int diff = 0;

	cnt = read_compile_time_count();

	xil_printf("power_on_count = %d\n\r", power_on_count);

	xil_printf("flash time :\t");
	for (i = 0; i < 8; i++) {
		xil_printf("%c", compile_time[i]);
	}
	xil_printf("\n\r");

	xil_printf("compile time :\t");

	const char * const txt2 = __TIME__;
	for(i = 0; i< 8; i++)
	{
		xil_printf("%c", txt2[i]);
	}

	for(i = 0; i< 8; i++)
	{
		if(compile_time[i] != txt2[i])
		{
			diff = 1;
			//xil_printf("different in i = %d\n\r", i);
			//xil_printf("write cnt = %d to eeprom\n\r", cnt);
			xil_printf("\tdifferent, count + 1\n\r");
			XIicPs_WriteEepromData(27, cnt + 8, 1, (u8*)"X");
			write_compile_time_count();
			if(cnt < 512)
				cnt++;
			XIicPs_EraseEeprom(27, 512, 512);
			power_on_count = 0;
			break;
		}
	}
	if(diff == 0)
	{
		xil_printf("\tthe same\n\r");
		//xil_printf("\tthe same power on count ++\n\r");
		increase_power_on_count();
	}
	return cnt;
}

uint32_t read_compile_time_count(void)
{
	uint32_t i;
	int compile_time_count = 0;
	int state;
	xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", 27);
	state = XIicPs_ReadEepromPage(27, eeprom_page_buffer);
	xil_printf("aa");
	if(state == XST_FAILURE)
	{
		xil_printf("xxxxxxx I2C fail, try again\n\r");
		usleep(1000);
		state = XIicPs_ReadEepromPage(27, eeprom_page_buffer);
	}

	for (i = 0; i < 8; i++) {
		compile_time[i] = eeprom_page_buffer[i];
	}
	xil_printf("bb");

	for (i = 8; i < INFO_BUFFER_SIZE/2; i++) {
		if(eeprom_page_buffer[i] != 'X')
		{
			//xil_printf("break, i = %d\n\r", i);
			break;
		}
	}
	xil_printf("cc");
	compile_time_count = i - 8;

	for (i = 512; i < INFO_BUFFER_SIZE; i++) {
		if(eeprom_page_buffer[i] != 'P')
		{
			xil_printf("break, i = %d\n\r", i);
			break;
		}
	}
	xil_printf("dd");
	power_on_count = i - 512;

	return compile_time_count;
}
#endif

void XIicPs_PrintPageData(int page, u8 *eeprom_page_buffer)
{
	int i;
	//xil_printf("0123456789012345678901234567890123456789012345678901234567890123\n\r");

	switch(page)
	{
	case 25:	xil_printf("\n\rPage %d, recent use camera info\n\r", page);break;
	case 26:	xil_printf("\n\rPage %d, camera count ever used\n\r", page);break;
	case 27:	xil_printf("\n\rPage %d, compile time count / power on count\n\r", page);break;
	case 28:	xil_printf("\n\rPage %d, power on count every minute\n\r", page);break;
	default:	break;
	}

	for (i = 0; i < INFO_BUFFER_SIZE; i++)
	{
		if(((eeprom_page_buffer[1023] == 0xFF) && (i < 7)) && ((page == 25) || (page == 28)))
		{
			if(eeprom_page_buffer[0] == 0xFF)
			{
				//xil_printf("%c", eeprom_page_buffer[i]);
				xil_printf(".");
			}
			else
			{
				if(i == 0)
					xil_printf("Date : %d", eeprom_page_buffer[i] + 1900);
				else
					xil_printf("%02d", eeprom_page_buffer[i]);
				if((i == 0)||(i == 1))
					xil_printf("/");
				else if((i == 4)||(i == 5))
					xil_printf(":");
				else
					xil_printf(" ");
			}
		}
		else if(((eeprom_page_buffer[55] == 0xFF) && (i >= 16) && (i < 32)) && (page == 25))
		{
			if(eeprom_page_buffer[16] == 0xFF)
			{
				//xil_printf("%c", eeprom_page_buffer[i]);
				xil_printf(".");
			}
			else
			{
				if(i == 16)
					xil_printf("S/N : ");
				xil_printf("%02X", eeprom_page_buffer[i]);
				if((i == 17)||(i == 19)||(i == 21)||(i == 23)||(i == 25)||(i == 27)||(i == 29))
					xil_printf("-");
			}
		}
		else if(((eeprom_page_buffer[55] == 0xFF) && (i >= 56) && (i < 62)) && (page == 25))
		{
			if(i == 61)
			{
				if(eeprom_page_buffer[i] == 0xFF)
					xil_printf("0");
				else
					xil_printf("%d", eeprom_page_buffer[i]);
			}
			else
			{
				if(eeprom_page_buffer[i] == 0xFF)
					xil_printf("V");
				else if(eeprom_page_buffer[i] == 'X')
					xil_printf("X");
				else
					xil_printf("z");
			}

		}
		else if((i == 62) && (page == 25))
		{
			int total_power_off_time_tmp;
			total_power_off_time_tmp = eeprom_page_buffer[62] << 8 | eeprom_page_buffer[63];
			if(total_power_off_time_tmp == 0xffff)
				total_power_off_time_tmp = 0;

			xil_printf("OFF : %d minutes", total_power_off_time_tmp);
		}
		else if((i == 63) && (page == 25))
		{
			//skip
		}
		else if(eeprom_page_buffer[55] == 0xFF)
		{
			if(eeprom_page_buffer[i] == 0xFF)
				xil_printf(".");
			else
				xil_printf("%c", eeprom_page_buffer[i]);
		}
		else if(isprint(eeprom_page_buffer[i]))
			xil_printf("%c", eeprom_page_buffer[i]);
		else
		{
			//xil_printf("%c", Buffer[i]);
			xil_printf("%02x", eeprom_page_buffer[i]);
		}
		if((i % 64) == 63)
			xil_printf("\n\r");
	}
	xil_printf("\n\r");
}

void XIicPs_PrintPageDataRaw(int page, u8 *eeprom_page_buffer)
{
	int i;
	xil_printf("\n\r      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n\r");
	for (i = 0; i < INFO_BUFFER_SIZE; i++)
	{
		if((i % 32) == 0)
			xil_printf("%03x: ", i);

		xil_printf("%02x", eeprom_page_buffer[i]);
		if((i % 32) == 31)
			xil_printf("\n\r");
		else
			xil_printf(" ");
	}
	xil_printf("\n\r");
}

#ifdef USE_DEBUG_MESSAGE
void increase_dongle_usage_count(void)
{
	XIicPs_WriteEepromData(26, dongle_usage_count, 1, (u8*)"X");

	if(dongle_usage_count < 1023)
		dongle_usage_count++;
}

void show_dongle_usage_count(uint32_t dongle_usage_count)
{
	GWidgetInit	wi;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	wi.text = "1234567890";
	//wi.text = "";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 12;
	sprintf((char *)wi.text, "Use: %d", (int)dongle_usage_count);
	ghLabel4 = gwinLabelCreate(0, &wi);

	//const char * const txt1 = __DATE__;
	const char * const txt2 = __TIME__;

	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X, wi.g.y = BORDER_Y + THICK1 * 13;
	//sprintf((char *)wi.text, "Compiled: %s %s", txt1, txt2);		wrong
	wi.text = "12345678901234567890";
	sprintf((char *)wi.text, "Compiled: %s", txt2);
	ghLabel5 = gwinLabelCreate(0, &wi);

#ifndef SW_RELEASE
	wi.g.width = 190; wi.g.height = THICK1; wi.g.x = 300, wi.g.y = BORDER_Y + THICK1 * 13;
	wi.text = "Engineering";
	ghLabel5 = gwinLabelCreate(0, &wi);
	wi.g.width = 180; wi.g.height = THICK1; wi.g.x = 500, wi.g.y = BORDER_Y + THICK1 * 13;
	#ifdef USE_IMS_LINK
	wi.text = "IMS_LINK";
	#else
	wi.text = "comport";
	#endif
	ghLabel5 = gwinLabelCreate(0, &wi);
#endif

	return;
}

void increase_power_on_count(void)
{
	XIicPs_WriteEepromData(27, power_on_count + 512, 1, (u8*)"P");

	if(power_on_count < 512)
		power_on_count++;
}

void show_fw_write_count(uint32_t fw_write_count)
{
	GWidgetInit	wi;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	wi.text = "1234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X + WIDTH1, wi.g.y = BORDER_Y + THICK1 * 12;
	sprintf((char *)wi.text, "C: %d", (int)fw_write_count);
	ghLabel4 = gwinLabelCreate(0, &wi);

	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x = BORDER_X + WIDTH1 + 100, wi.g.y = BORDER_Y + THICK1 * 12;
	sprintf((char *)wi.text, "P: %d", (int)(power_on_count + 1));
	ghLabel4 = gwinLabelCreate(0, &wi);

	return;
}
#endif

void show_dongle_usage_count_eng(uint32_t dongle_usage_count)
{
	GWidgetInit	wi;
	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	wi.text = "1234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));
	// Create label
	wi.g.width = WIDTH1; wi.g.height = THICK1; wi.g.x =720, wi.g.y = 750;
	sprintf((char *)wi.text, "Use: %d", (int)dongle_usage_count);
	ghLabel4 = gwinLabelCreate(0, &wi);
	return;
}

int read_RTC_data()
{
	int Index;
	int Status;
	SendBuffer[0] = 0;

	xil_printf("david0703: %s:%s(%d) ST xxxxxxxxxxxx\r\n",__FILE__,__func__,__LINE__);

	for (Index = 0; Index < I2C_BUFFER_SIZE; Index++) {
		RecvBuffer[Index] = 0;
	}

	/*
	 * Send the buffer using the IIC and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */

	Status = XIicPs_MasterSendPolled(&Iic, SendBuffer,
			1, IIC_SLAVE_ADDR);

	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	Status = XIicPs_MasterRecvPolled(&Iic, RecvBuffer,
			I2C_BUFFER_SIZE, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	ShowDateInfo(RecvBuffer);

	update_widget_data(RecvBuffer);

	//XIicPs_GetInfo();
	return XST_SUCCESS;
}

int XIicPs_SetRTCData(XIicPs *InstancePtr, u8 type, u8 data)
{
	int Status;
	xil_printf("\n\rRTC write, type = %d, data = %d\r\n", type, data);

	if((type < 0) || (type > 7))
	{
		xil_printf("Illegal parameters, type = %d\n", type);
		return XST_FAILURE;
	}

	if(type == RTC_SS)
	{
		if((data < 0) || (data > 59))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = ((data/10)<<4) + (data % 10);
	}
	else if(type == RTC_MM)
	{
		if((data < 0) || (data > 59))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = ((data/10)<<4) + (data % 10);
	}
	else if(type == RTC_HH)
	{
		if((data < 0) || (data > 23))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = ((data/10)<<4) + (data % 10);
	}
	else if(type == RTC_WD)
	{
		if((data < 0) || (data > 6))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
	}
	else if(type == RTC_MD)
	{
		if((data < 1) || (data > 31))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = ((data/10)<<4) + (data % 10);
	}
	else if(type == RTC_MON)
	{
		if((data < 1) || (data > 12))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = ((data/10)<<4) + (data % 10);
	}
	else if(type == RTC_YEAR)
	{
		if((data < 0) || (data > 159))	//year rnage : 2019 ~ (2019 + 159)
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
		else
			data = (((data)/10)<<4) + ((data) % 10);
	}
	else if(type == RTC_CONTROL)
	{
		if((data < 0) || (data > 255))
		{
			xil_printf("Illegal parameters, data = %d\n", data);
			return XST_FAILURE;
		}
	}

	SendBuffer[0] = type;	//offset
	SendBuffer[1] = data;	//data
	Status = XIicPs_MasterSendPolled(InstancePtr, SendBuffer,
			 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("david0719: %s:%s(%d) ffff b\r\n",__FILE__,__func__,__LINE__);
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}

void show_systeminfo()
{
	xil_printf("\n\rIMS system info:\n\r\n\r");
	xil_printf(RELEASE_INFO);
	xil_printf("\n\r");
    xil_printf("Compiled time: %s %s\n\r", __DATE__, __TIME__);
    xil_printf("%s:%s(%d)\n\r\n\r",__FILE__,__func__,__LINE__);
}

void show_help_menu()
{
	xil_printf("\n\rIMS command prompt, ");
	xil_printf(RELEASE_INFO);
	xil_printf("\n\r");
	xil_printf("---------------- Aries Demo ------------------\n\r");
	xil_printf("L0\t\tToggle Layer 0 (background)\n\r");
	xil_printf("L1\t\tToggle Layer 1 (right)\n\r");
	xil_printf("L2\t\tToggle Layer 2 (left)\n\r");
	xil_printf("L3\t\tToggle Layer 3 (OSD)\n\r");
	//xil_printf("'n' = Set to new scaler datapath\n\r");
	xil_printf("t\t\tEnable/bypass camera TPG (TBD)\n\r");
	xil_printf("y\t\tEnable/bypass GUI TPG\n\r");
	xil_printf("u\t\tPark/Unpark Camera Freeze VDMA\n\r");
	//xil_printf("'s' = Set output frame size\n\r");
	//xil_printf("'p' = Print this menu\n\r");
	xil_printf("usb\t\tread USB registers\n\r");
	xil_printf("r\t\tread USB registers\n\r");
	xil_printf("usbr1\t\tUSB HW reset\n\r");
	xil_printf("usbr2\t\tUSB SW reset\n\r");
	xil_printf("dd\t\tDCache Disable\n\r");
	xil_printf("de\t\tDCache Enable\n\r");
	xil_printf("df\t\tDCache Flush\n\r");
	xil_printf("help\t\thelp menu\n\r");
	xil_printf("\n\r--- camera -----------------------------------\n\r");
	xil_printf("+/-\t\tIncrease/decrease camera exposure\n\r");
	xil_printf("1~5\t\tSetup camera exposure\n\r");
	xil_printf("\n\r--- GPIO -------------------------------------\n\r");
	xil_printf("fan on\t\tTurn on fan\n\r");
	xil_printf("fan off\t\tTurn off fan\n\r");
	xil_printf("cam on\t\tTurn on camera LED\n\r");
	xil_printf("cam off\t\tTurn off camera LED\n\r");
	xil_printf("dongle on\tTurn on dongle LED\n\r");
	xil_printf("dongle off\tTurn off dongle LED\n\r");
	xil_printf("bl on\t\tTurn on back light\n\r");
	xil_printf("bl off\t\tTurn off back light\n\r");
	xil_printf("\n\r--- RTC --------------------------------------\n\r");
	xil_printf("rtc\t\tRead RTC result\n\r");
	xil_printf("rtc y ####\tSetup RTC data year(2019~2059)\n\r");
	xil_printf("rtc m ##\tSetup RTC data month(01~12)\n\r");
	xil_printf("rtc d ##\tSetup RTC data day(01~31)\n\r");
	xil_printf("rtc w #\t\tSetup RTC data week day(0~6)\n\r");
	xil_printf("rtc hh ##\tSetup RTC data hour(00~23)\n\r");
	xil_printf("rtc mm ##\tSetup RTC data minute(00~59)\n\r");
	xil_printf("rtc ss ##\tSetup RTC data second(00~59)\n\r");
	xil_printf("rtc # ###\tSetup RTC addr(#) with data(###) in decimal\n\r");
	xil_printf("\n\r--- EEPROM -----------------------------------\n\r");
	xil_printf("r n\t\tRead EEPROM page n (n = 0~31)\n\r");
	xil_printf("w n\t\tWrite EEPROM page n (n = 0~31)\n\r");
	xil_printf("e n\t\tErase EEPROM page n (n = 0~31)\n\r");
	xil_printf("r all\t\tRead EEPROM all\n\r");
	xil_printf("w all\t\tWrite EEPROM all\n\r");
	xil_printf("e all\t\tErase EEPROM all\n\r");
	xil_printf("R\t\tRead EEPROM test, page 0\n\r");
	xil_printf("W\t\tWrite EEPROM test, page 0\n\r");
	xil_printf("\n\r--- DMA -----------------------------------\n\r");
	xil_printf("dma\t\tDMA test\n\r");
	xil_printf("ba\t\tshow framebuffer addresses\n\r");
	xil_printf("b0\t\tuse framebuffer 0\n\r");
	xil_printf("b1\t\tuse framebuffer 1\n\r");
	xil_printf("bb\t\tdma copy from framebuffer 0 to framebuffer 1\n\r");
	xil_printf("mm\t\tmemory copy from framebuffer 0 to framebuffer 1\n\r");
	xil_printf("white\t\tmemory copy from WHITE to framebuffer 0\n\r");
	xil_printf("red\t\tdma copy from RED to framebuffer 0\n\r");
	xil_printf("\n\r--- Camera Sensor, Camera FPGA ---------------\n\r");
	xil_printf("ca1\t\tToggle camera setup for ORIENTATION\n\r");
	xil_printf("ca2\t\tToggle camera setup for TEST PATTERN\n\r");
	xil_printf("r cf\t\tRead Camera FPGA registers\n\r");
	xil_printf("r cf #\t\tRead camera fpga at addr(#)\n\r");
	xil_printf("w cf # ##\tWrite camera fpga at addr(#) with data(##)\n\r");
	xil_printf("r cs\t\tRead Camera Sensor registers\n\r");
	xil_printf("r cs ####\tRead camera sensor at addr(####)\n\r");
	xil_printf("w cs #### ##\tWrite camera sensor at addr(####) with data(##)\n\r");
	xil_printf("cars\t\tcamera read  serial number\n\r");
	xil_printf("caws\t\tcamera write serial number\n\r");
	xil_printf("card\t\tcamera read  date\n\r");
	xil_printf("cawd\t\tcamera write date\n\r");
	xil_printf("caer\t\tcamera erase data\n\r");
	xil_printf("\n\r--- others -----------------------------------\n\r");
	xil_printf("supported commands:\n\r");
	xil_printf("help, systeminfo, date, uptime, tic, toc\n\r");
	xil_printf("----------------------------------------------\n\r");
	return;
}

void show_help2_menu()
{
	show_systeminfo();
	xil_printf("eng\t\tEnter engineering mode\n\r");
	xil_printf("dot\t\tDraw dot\n\r");
	xil_printf("line\t\tDraw line\n\r");
	xil_printf("console\t\tconsole test\n\r");
	xil_printf("clear\t\tclear screen\n\r");
	xil_printf("black\t\tclear screen to black\n\r");
	xil_printf("white\t\tclear screen to white\n\r");
	xil_printf("ca0~2\t\tcamera test\n\r");
	xil_printf("st\t\tstart button\n\r");
	xil_printf("u0\t\tusb power down\n\r");
	xil_printf("u1\t\tusb power on\n\r");
	xil_printf("d0~8\t\tdraw test\n\r");
	xil_printf("g1~2\t\tgpio test\n\r");
	xil_printf("f0\t\tfile test\n\r");
	xil_printf("t1\t\tset time\n\r");
	xil_printf("t2\t\tget time\n\r");
	xil_printf("tic/toc\t\ttick st/sp\n\r");
	xil_printf("print\t\tprint test\n\r");
	xil_printf("usb\t\tread usb registers\n\r");
	xil_printf("p q r\t\tshow picture test\n\r");
	xil_printf("c\t\tcheck dongle status\n\r");
	xil_printf("d\t\tdavid test\n\r");
	return;
}

void draw_picture(int pic)
{
#ifdef USE_DEBUG_PICTURE
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	}

	draw_picture0(pic);

	if(flag_use_2_framebuffers == TRUE)
	{
		//switch_to_framebuffer(next_framebuffer);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		draw_picture0(pic);
	}
#endif
	return;
}

void draw_picture0(int pic)
{
#ifdef USE_DEBUG_PICTURE
	coord_t swidth, sheight;
	uint32_t status;

	gdispImage *p_Image;

	p_Image = &myImage;

	swidth = gdispGetWidth();
	sheight = gdispGetHeight();

	if(pic == DONGLE_NONE)			//no dongle
	{
		xil_printf("\n\rshow DONGLE_NONE\r\n");
		status = gdispImageOpenFile(p_Image, recorder_faila);
		status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2 - 600, sheight - p_Image->height - 10, p_Image->width, p_Image->height, 0, 0);
		gdispImageClose(p_Image);
	}
	else if(pic == CAMERA_NONE)		//dongle only
	{
		xil_printf("\n\rclear CAMERA_NONE\r\n");
		status = gdispImageOpenFile(p_Image, recorder_nonea);
		status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2 - 600, sheight - p_Image->height - 10, p_Image->width, p_Image->height, 0, 0);
		gdispImageClose(p_Image);
	}
	else if(pic == CAMERA_OK)		//dongle + camera
	{
		xil_printf("\n\rshow CAMERA_OK\r\n");
		status = gdispImageOpenFile(p_Image, recorder_oka);
		status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2 - 600, sheight - p_Image->height - 10, p_Image->width, p_Image->height, 0, 0);
		gdispImageClose(p_Image);
	}
	else if(pic == CAMERA_CLEAR)		//clear picture
	{
		xil_printf("\n\rclear camera\r\n");
		status = gdispImageOpenFile(p_Image, recorder_oka);
		gdispFillArea(swidth - p_Image->width - BORDER_X * 2 - 600, sheight - p_Image->height - 10, p_Image->width, p_Image->height, Black);
		gdispImageClose(p_Image);
	}
	else if(pic == KEYBOARD_OK)		//dongle + camera
	{
		xil_printf("\n\rshow KEYBOARD_OK\r\n");
		status = gdispImageOpenFile(p_Image, cameraa);
		status = gdispImageDraw(p_Image, swidth - p_Image->width - BORDER_X * 2 - 300, sheight - p_Image->height + 80 + 24, p_Image->width, p_Image->height + 10 + 24 + 24, 0, 0);
		gdispImageClose(p_Image);
	}
	else if(pic == KEYBOARD_NONE)		//clear picture
	{
		xil_printf("\n\rclear KEYBOARD_NONE\r\n");
		status = gdispImageOpenFile(p_Image, cameraa);
		gdispFillArea(swidth - p_Image->width - BORDER_X * 2 - 300, sheight - p_Image->height + 80 + 24, p_Image->width, p_Image->height, Black);
		gdispImageClose(p_Image);
	}
	else
	{
		xil_printf("\n\rdraw_picture, unknown pic = %d\r\n", pic);
	}
#endif
	return;
}

u32 ReadRegister(u32 reg)
{
	return Xil_In32(reg);
}

u32 WriteRegister(u32 reg, u32 value)
{
	Xil_Out32(reg, value);
	return 0;
}

#define LAYERALPHA	0x00100
#define LAYERSTARTX	0x00108
#define LAYERSTARTY	0x00110
#define LAYERWIDTH	0x00118
#define LAYERSTRIDE	0x00120
#define LAYERHEIGHT	0x00128
#define LAYERFACTOR	0x00130
#define LAYERP1BUF	0x00140
#define LAYERP2BUF	0x0014c

void pirnt_mixer_data(void)
{
	u32 result;
	u32 off;
	u32 offset;
	u32 layer;
	u32 base = 0x43cc0000;
	u32 addr;


	xil_printf("Top-Level Registers\n\r");
	for(addr = 0; addr <= 0x40; addr += 4)
	{
		result = ReadRegister(base + addr);
		xil_printf("addr = 0x%04x\tdata = 0x%08x = %d\r\n", addr, result, result);
	}

	xil_printf("\n\r");


	for(layer = 0; layer < 4; layer++)
	{
		xil_printf("layer = %d\r\n", layer);
		off = layer * 0x100;
		offset = base + off;

		addr = offset + LAYERALPHA;
		result = ReadRegister(addr);
		xil_printf("LAYERALPHA\t addr = 0x%08x\talpha\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERSTARTX;
		result = ReadRegister(addr);
		xil_printf("LAYERSTARTX\t addr = 0x%08x\tX_st\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERSTARTY;
		result = ReadRegister(addr);
		xil_printf("LAYERSTARTY\t addr = 0x%08x\tY_st\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERWIDTH;
		result = ReadRegister(addr);
		xil_printf("LAYERWIDTH\t addr = 0x%08x\tW\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERHEIGHT;
		result = ReadRegister(addr);
		xil_printf("LAYERHEIGHT\t addr = 0x%08x\tH\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERSTRIDE;
		result = ReadRegister(addr);
		xil_printf("LAYERSTRIDE\t addr = 0x%08x\tstride\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERFACTOR;
		result = ReadRegister(addr);
		xil_printf("LAYERFACTOR\t addr = 0x%08x\tfactor\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERP1BUF;
		result = ReadRegister(addr);
		xil_printf("LAYERP1BUF\t addr = 0x%08x\tp1_buf\t = 0x%08x = %d\r\n", addr, result, result);

		addr = offset + LAYERP2BUF;
		result = ReadRegister(addr);
		xil_printf("LAYERP2BUF\t addr = 0x%08x\tp2_buf\t = 0x%08x = %d\r\n", addr, result, result);

		xil_printf("\n\r");
	}
}

int SetupInterruptSystem(XScuGic *GicPtr, XDmaPs *DmaPtr)
{
	int Status;
	XScuGic_Config *GicConfig;

	Xil_ExceptionInit();

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	GicConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(GicPtr, GicConfig,
				       GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the interrupt controller interrupt handler to the hardware
	 * interrupt handling logic in the processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			     (Xil_ExceptionHandler)XScuGic_InterruptHandler,
			     GicPtr);
	/*
	 * Connect the device driver handlers that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the specific
	 * interrupt processing for the device
	 */

	/*
	 * Connect the Fault ISR
	 */
	Status = XScuGic_Connect(GicPtr,
				 DMA_FAULT_INTR,
				 (Xil_InterruptHandler)XDmaPs_FaultISR,
				 (void *)DmaPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the Done ISR for all 8 channels of DMA 0
	 */
	Status = XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_0,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_0,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_1,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_1,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_2,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_2,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_3,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_3,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_4,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_4,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_5,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_5,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_6,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_6,
				 (void *)DmaPtr);
	Status |= XScuGic_Connect(GicPtr,
				 DMA_DONE_INTR_7,
				 (Xil_InterruptHandler)XDmaPs_DoneISR_7,
				 (void *)DmaPtr);

	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	/*
	 * Enable the interrupts for the device
	 */
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_0);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_1);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_2);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_3);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_4);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_5);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_6);
	XScuGic_Enable(GicPtr, DMA_DONE_INTR_7);
	XScuGic_Enable(GicPtr, DMA_FAULT_INTR);

	Xil_ExceptionEnable();

	return XST_SUCCESS;

}

void DmaDoneHandler(unsigned int Channel, XDmaPs_Cmd *DmaCmd, void *CallbackRef)
{
	/* done handler */
	volatile int *DMAReady = (volatile int *)CallbackRef;
	*DMAReady = 1;
}

unsigned int Channel = 0;
int dma_copy(u32 SrcAddr, u32 DstAddr, int length)
{
	int Status = XST_SUCCESS;
	int TimeOutCnt;
	volatile int DMAReady;

	XDmaPs_Cmd DmaCmd;
	XDmaPs *DmaInst = periphs_inst.p_pdma0_inst;

	memset(&DmaCmd, 0, sizeof(XDmaPs_Cmd));
	DmaCmd.ChanCtrl.SrcBurstSize = 4;
	DmaCmd.ChanCtrl.SrcBurstLen = 4;
	DmaCmd.ChanCtrl.SrcInc = 1;
	DmaCmd.ChanCtrl.DstBurstSize = 4;
	DmaCmd.ChanCtrl.DstBurstLen = 4;
	DmaCmd.ChanCtrl.DstInc = 1;
	DmaCmd.BD.SrcAddr = SrcAddr;
	DmaCmd.BD.DstAddr = DstAddr;
	DmaCmd.BD.Length = length * sizeof(int);

	Channel++;
	Channel %= 8;

	DMAReady = 0;

	/* Set the Done interrupt handler */
	XDmaPs_SetDoneHandler(DmaInst,
			       Channel,
			       DmaDoneHandler,
			       (void *)(&DMAReady));

	Status = XDmaPs_Start(DmaInst, Channel, &DmaCmd, 0);
	if (Status != XST_SUCCESS) {
		xil_printf("FAIL 1\n\r");
		return XST_FAILURE;
	}

	TimeOutCnt = 0;

	/* Now the DMA is done */
	while ((DMAReady == 0) && TimeOutCnt < TIMEOUT_LIMIT)
	{
		TimeOutCnt++;
	}

	if (TimeOutCnt >= TIMEOUT_LIMIT) {
		xil_printf("FAIL 2 TIMEOUT_LIMIT\n\r");
		Status = XST_FAILURE;
	}
	else
	{
		Status = XST_SUCCESS;
	}
	return Status;
}

int XAdcFractionToInt(float FloatNum)
{
	float Temp;

	Temp = FloatNum;
	if (FloatNum < 0) {
		Temp = -(FloatNum);
	}

	return( ((int)((Temp -(float)((int)Temp)) * (1000.0f))));
}

int XAdcInit(u16 DeviceId)
{
	int Status;
	XAdcPs_Config *ConfigPtr;
	XAdcPs *XAdcInstPtr = &XAdcInst;

	xil_printf("\r\nEntering the XAdc Polled Example. \r\n");

	/*
	 * Initialize the XAdc driver.
	 */
	ConfigPtr = XAdcPs_LookupConfig(DeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	XAdcPs_CfgInitialize(XAdcInstPtr, ConfigPtr,
				ConfigPtr->BaseAddress);

	/*
	 * Self Test the XADC/ADC device
	 */
	Status = XAdcPs_SelfTest(XAdcInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Disable the Channel Sequencer before configuring the Sequence
	 * registers.
	 */
	XAdcPs_SetSequencerMode(XAdcInstPtr, XADCPS_SEQ_MODE_SAFE);
	return XST_SUCCESS;
}

int XAdcGetData()
{
	u32 TempRawData;
	float TempData;
	u32 VccPintRawData;
	u32 VccPauxRawData;
	u32 VccPdroRawData;
	float VccPintData;
	float VccPauxData;
	float MaxData;
	float MinData;

	XAdcPs *XAdcInstPtr = &XAdcInst;

	/*
	 * Read the on-chip Temperature Data (Current/Maximum/Minimum)
	 * from the ADC data registers.
	 */
	TempRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_TEMP);
	TempData = XAdcPs_RawToTemperature(TempRawData);

#ifndef TEMPERATURE_DEBUG
	temperature_array_index = DEBUG_LENGTH + 1;
#endif

	if(temperature_array_index == 1)
	{
		xil_printf("\r\n\n\rTEMPERATURE_DEBUG ST, DEBUG_LENGTH = %d\n\r", DEBUG_LENGTH);
		xil_printf("\n\rTEMPERATURE_DEBUG i = %3d\t.", 0);
	}

	if(temperature_array_index < DEBUG_LENGTH)
	{
		if((temperature_array_index % 10) == 0)
		{
			if(temperature_array_index > 0)
			{
				xil_printf("\n\rTEMPERATURE_DEBUG i = %3d\t.", temperature_array_index);
			}
		}
		else
		{
			xil_printf(".");
		}
		temperature_array[temperature_array_index] = TempRawData;
		temperature_array_index++;
	}
	else if(temperature_array_index == (DEBUG_LENGTH))
	{
		temperature_array_index++;
		xil_printf("\r\n\n\rTEMPERATURE_DEBUG SP, DEBUG_LENGTH = %d\n\r", DEBUG_LENGTH);
		xil_printf("\n\r%s", PROMPT);
	}
	else
	{
		xil_printf("\r\nThe Current Temperature is %0d.%03d Centigrades.\r\n",
					(int)(TempData), XAdcFractionToInt(TempData));

	TempRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr, XADCPS_MAX_TEMP);
	MaxData = XAdcPs_RawToTemperature(TempRawData);
	xil_printf("The Maximum Temperature is %0d.%03d Centigrades. \r\n",
				(int)(MaxData), XAdcFractionToInt(MaxData));

	TempRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr, XADCPS_MIN_TEMP);
	MinData = XAdcPs_RawToTemperature(TempRawData & 0xFFF0);
	xil_printf("The Minimum Temperature is %0d.%03d Centigrades. \r\n",
				(int)(MinData), XAdcFractionToInt(MinData));

	/*
	 * Read the VccPint Votage Data (Current/Maximum/Minimum) from the
	 * ADC data registers.
	 */
	VccPintRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPINT);
	VccPintData = XAdcPs_RawToVoltage(VccPintRawData);
	xil_printf("\r\nThe Current VCCPINT is %0d.%03d Volts. \r\n",
			(int)(VccPintData), XAdcFractionToInt(VccPintData));

	VccPintRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
							XADCPS_MAX_VCCPINT);
	MaxData = XAdcPs_RawToVoltage(VccPintRawData);
	xil_printf("The Maximum VCCPINT is %0d.%03d Volts. \r\n",
			(int)(MaxData), XAdcFractionToInt(MaxData));

	VccPintRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
							XADCPS_MIN_VCCPINT);
	MinData = XAdcPs_RawToVoltage(VccPintRawData);
	xil_printf("The Minimum VCCPINT is %0d.%03d Volts. \r\n",
			(int)(MinData), XAdcFractionToInt(MinData));

	/*
	 * Read the VccPaux Votage Data (Current/Maximum/Minimum) from the
	 * ADC data registers.
	 */
	VccPauxRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPAUX);
	VccPauxData = XAdcPs_RawToVoltage(VccPauxRawData);
	xil_printf("\r\nThe Current VCCPAUX is %0d.%03d Volts. \r\n",
			(int)(VccPauxData), XAdcFractionToInt(VccPauxData));

	VccPauxRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
								XADCPS_MAX_VCCPAUX);
	MaxData = XAdcPs_RawToVoltage(VccPauxRawData);
	xil_printf("The Maximum VCCPAUX is %0d.%03d Volts. \r\n",
				(int)(MaxData), XAdcFractionToInt(MaxData));


	VccPauxRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
								XADCPS_MIN_VCCPAUX);
	MinData = XAdcPs_RawToVoltage(VccPauxRawData);
	xil_printf("The Minimum VCCPAUX is %0d.%03d Volts. \r\n",
				(int)(MinData), XAdcFractionToInt(MinData));


	/*
	 * Read the VccPdro Votage Data (Current/Maximum/Minimum) from the
	 * ADC data registers.
	 */
	VccPdroRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPDRO);
	VccPintData = XAdcPs_RawToVoltage(VccPdroRawData);
	xil_printf("\r\nThe Current VCCPDDRO is %0d.%03d Volts. \r\n",
			(int)(VccPintData), XAdcFractionToInt(VccPintData));

	VccPdroRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
							XADCPS_MAX_VCCPDRO);
	MaxData = XAdcPs_RawToVoltage(VccPdroRawData);
	xil_printf("The Maximum VCCPDDRO is %0d.%03d Volts. \r\n",
			(int)(MaxData), XAdcFractionToInt(MaxData));

	VccPdroRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
							XADCPS_MIN_VCCPDRO);
	MinData = XAdcPs_RawToVoltage(VccPdroRawData);
	xil_printf("The Minimum VCCPDDRO is %0d.%03d Volts. \r\n",
			(int)(MinData), XAdcFractionToInt(MinData));
	}
	return XST_SUCCESS;
}

int XAdcGetCurrentTemperature()
{
	XAdcPs *XAdcInstPtr = &XAdcInst;

	/*
	 * Read the on-chip Temperature Data (Current/Maximum/Minimum)
	 * from the ADC data registers.
	 */
	temperature_current = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_TEMP);
	return XST_SUCCESS;
}

void clear_layer1_all(int frame, int enable)
{
	uint32_t i;

	//destination canvas
	coord_t W;				//destination canvas size width
	coord_t H;				//destination canvas size height

	if((frame != FRAMEBUFFER0) && (frame != FRAMEBUFFER1))
	{
		xil_printf("clear_layer1_all fail, illegal frame = %d\n\r", frame);
		return;
	}

	//destination canvas
	W = LAYER1_WIDTH;		//destination canvas size width
	H = LAYER1_HEIGHT;		//destination canvas size height

	void* addr;
	uint32_t *f_ptr;
	int length;
	length = W;

	addr = gfxAlloc(length * 4);

	f_ptr = addr;
	for(i = 0; i< length; i++)
	{
		if(enable == TRUE)
			f_ptr[i] = 0x00000000;	//100% transparent
		else
		{
			//			   A B G R
			//f_ptr[i] = 0xFFFF0000;	//100% blue
			//f_ptr[i] = 0xFFFF008B;	//100% bluexxxx
			f_ptr[i] = 0xFF84195E;	//100% purple
		}
	}

	uint32_t addr0;
	uint32_t addr1;
	addr0 = (uint32_t)addr;
	addr1 = (uint32_t)gdispGetFrameBufferAddr(frame);

	uint32_t addr2;

	for(i = 0; i < H; i++)
	{
		addr2 = (u32)(LAYER0_WIDTH * 4 * (LAYER1_START_Y + i) + addr1 + 4 * LAYER1_START_X);
		dma_copy((u32) addr0, addr2, length);
	}
}

void clear_layer1(int frame)
{
	uint32_t i;

	//destination canvas
	coord_t W = LAYER1_WIDTH;			//destination canvas size width
	//coord_t H = LAYER1_HEIGHT;		//destination canvas size height

	if((frame != FRAMEBUFFER0) && (frame != FRAMEBUFFER1))
	{
		xil_printf("clear_layer1 fail, illegal frame = %d\n\r", frame);
		return;
	}

	void* addr;
	uint32_t *f_ptr;
	int length;
	length = W;

	addr = gfxAlloc(length * 4);

	f_ptr = addr;
	for(i = 0; i< length; i++)
	{
		f_ptr[i] = 0x00000000;	//100% transparent
	}

	uint32_t addr0;
	uint32_t addr1;
	addr0 = (uint32_t)addr;
	addr1 = (uint32_t)gdispGetFrameBufferAddr(frame);

	uint32_t addr2;

	//for(i = 0; i < H; i++)	//clear all
	for(i = pic_dy; i < pic_dy + pic_height; i++)	//clear middle
	{
		addr2 = (u32)(LAYER0_WIDTH * 4 * (LAYER1_START_Y + i) + addr1 + 4 * LAYER1_START_X);
		dma_copy((u32) addr0, addr2, length);
	}
	return;
}

void layer1_blit(struct pic_size s, int frame)
{
	uint32_t i;
	uint32_t j;

	coord_t W = LAYER1_WIDTH;
	//coord_t H = LAYER1_HEIGHT;

	coord_t w = s.w;
	coord_t h = s.h;

	coord_t dx = s.dx;
	coord_t dy = s.dy;

	int alpha_prime = (alpha) << 24;

	if((frame != FRAMEBUFFER0) && (frame != FRAMEBUFFER1))
	{
		xil_printf("layer1_blit fail, illegal frame = %d\n\r", frame);
		return;
	}

	for(j = dy; j < dy + h; j++)
    {
    	for(i = dx; i < dx + w; i++)
    	{
    		surface_1[j * W + i] &= 0x00ffffff;
    		surface_1[j * W + i] |= alpha_prime;
		}
	}

	int length = w;

	uint32_t addr0;
	uint32_t addr1;
	addr0 = (uint32_t)surface_1;
	addr1 = (uint32_t)gdispGetFrameBufferAddr(frame);

	uint32_t addr00;
	uint32_t addr11;

	//xil_printf("\n\r\n\rdx = %d dy = %d w = %d h = %d addr0 = 0x%08x addr1 = 0x%08x\n\r", dx, dy, w, h, addr0, addr1);
	//xil_printf("\n\r\n\rLAYER0_WIDTH = %d LAYER1_WIDTH = %d LAYER1_START_X = %d LAYER1_START_Y = %d\n\r", LAYER0_WIDTH, LAYER1_WIDTH, LAYER1_START_X, LAYER1_START_Y);

	for(i = dy; i < (dy + h); i++)
	{
		addr00 = (u32)(addr0 + LAYER1_WIDTH * (i) * 4 + dx * 4);
		addr11 = (u32)(addr1 + LAYER0_WIDTH * (i + LAYER1_START_Y) * 4 + (LAYER1_START_X + dx) * 4);

		dma_copy((u32) addr00, addr11, length);
	}

	pic_width = w;		//destination canvas start position x
	pic_height = h;		//destination canvas start position y
	pic_dx = dx;		//destination canvas start position x
	pic_dy = dy;		//destination canvas start position y
}

void print_screen_data(int frame)
{
	int i;
	int j;
	int W;
	int H;
	uint32_t addr0;
	uint32_t addr1;

	if((frame != 0) && (frame != 1))
	{
		xil_printf("print_screen_data fail, illegal frame = %d\n\r", frame);
		return;
	}

	addr0 = (uint32_t)gdispGetFrameBufferAddr(frame);

	W = LAYER0_WIDTH;
	H = LAYER0_HEIGHT;
	xil_printf("\n\rframebuffer0 W = %d H = %d\n\r", W, H);

	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 95)
    	{
    		addr1 = (u32)(addr0 + (j * W + i) * 4);
    		xil_printf("%08x ", Xil_In32(addr1));
    	}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");

	W = LAYER1_WIDTH;
	H = LAYER1_HEIGHT;
	xil_printf("\n\r\n\rsurface_1 W = %d H = %d\n\r", W, H);
	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 60)
    	{
    		xil_printf("%08x ", surface_1[j * W + i]);
		}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");

	W = LAYER1_WIDTH;
	H = LAYER1_HEIGHT;
	xil_printf("\n\rsurface_1c W = %d H = %d\n\r", W, H);
	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 60)
    	{
    		xil_printf("%08x ", surface_1c[j * W + i]);
		}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");
}

void preload_picture_to_memory(void)
{
	int status;
	//volatile uint32_t g_ms_tick_tmp1;
	//volatile uint32_t g_ms_tick_tmp2;
	coord_t width = LAYER1_WIDTH;
	coord_t height = LAYER1_HEIGHT;

	//xil_printf("\n\rpreload_picture_to_memory ST\r\n");

	//g_ms_tick_tmp1 = g_ms_tick;

	Xil_DCacheEnable();

	gdispImage *p_Image;
	p_Image = &myImage;

	status = gdispImageOpenFile(p_Image, step_1);
	pixmap_draw(pixmap_1, surface_1, LAYER1_WIDTH, LAYER1_HEIGHT, p_Image, 0, 0, 0, 0, alpha, POSITION_MIDDLE_CENTER);
	pic_sizes[0].w = p_Image->width;
	pic_sizes[0].h = p_Image->height;
	pic_sizes[0].dx = pic_dx;
	pic_sizes[0].dy = pic_dy;
	gdispImageClose(p_Image);
	memset(surface_1a, 0, width * height * 4); // Clear buffer
	memcpy(surface_1a, surface_1, width * height * 4);

	status = gdispImageOpenFile(p_Image, step_2);
	pixmap_draw(pixmap_1, surface_1, LAYER1_WIDTH, LAYER1_HEIGHT, p_Image, 0, 0, 0, 0, alpha, POSITION_MIDDLE_CENTER);
	pic_sizes[1].w = p_Image->width;
	pic_sizes[1].h = p_Image->height;
	pic_sizes[1].dx = pic_dx;
	pic_sizes[1].dy = pic_dy;
	gdispImageClose(p_Image);
	memset(surface_1b, 0, width * height * 4); // Clear buffer
	memcpy(surface_1b, surface_1, width * height * 4);

	status = gdispImageOpenFile(p_Image, step_3);
	pixmap_draw(pixmap_1, surface_1, LAYER1_WIDTH, LAYER1_HEIGHT, p_Image, 0, 0, 0, 0, alpha, POSITION_MIDDLE_CENTER);
	pic_sizes[2].w = p_Image->width;
	pic_sizes[2].h = p_Image->height;
	pic_sizes[2].dx = pic_dx;
	pic_sizes[2].dy = pic_dy;
	gdispImageClose(p_Image);
	memset(surface_1c, 0, width * height * 4); // Clear buffer
	memcpy(surface_1c, surface_1, width * height * 4);

	Xil_DCacheFlush();
	Xil_DCacheDisable();

	//g_ms_tick_tmp2 = g_ms_tick;
	//xil_printf("\n\rpreload_picture_to_memory SP, spend %d msec\r\n", g_ms_tick_tmp2 - g_ms_tick_tmp1);
	return;
}

#ifdef USE_PREVENT_REUSE
void preload_forbid_picture_to_memory(int pic)
{
	int status;
	coord_t width = LAYER1_WIDTH;
	coord_t height = LAYER1_HEIGHT;
	xil_printf("\n\rpreload_forbid_picture_to_memory ST pic = %d\n\r", pic);

	Xil_DCacheEnable();

	gdispImage *p_Image;
	p_Image = &myImage;


	switch(pic)
	{
	case VIDEO_FORBID_ALL:					status = gdispImageOpenFile(p_Image, forbid_1);break;
	case VIDEO_FORBID_DIFFERENT_CAMERA:		status = gdispImageOpenFile(p_Image, forbid_2);break;
	case VIDEO_FORBID_POWEROFF_LONG_1M:		status = gdispImageOpenFile(p_Image, forbid_3);break;
	case VIDEO_FORBID_POWEROFF_LONG_1M30M:	status = gdispImageOpenFile(p_Image, forbid_4);break;
	case VIDEO_FORBID_POWEROFF_LONG_30M:	status = gdispImageOpenFile(p_Image, forbid_5);break;
	case VIDEO_FORBID_PULL_OUT_LONG_1M:		status = gdispImageOpenFile(p_Image, forbid_6);break;
	case VIDEO_FORBID_PULL_OUT_LONG_30M:	status = gdispImageOpenFile(p_Image, forbid_7);break;
	default:								status = -1;xil_printf("xxxx unknown error status = %d ", (int)flag_video_status);break;
	}


	if(status == 0)
	{
		pixmap_draw(pixmap_1, surface_1, LAYER1_WIDTH, LAYER1_HEIGHT, p_Image, 0, 0, 0, 0, alpha, POSITION_MIDDLE_CENTER);
		pic_sizes[3].w = p_Image->width;
		pic_sizes[3].h = p_Image->height;
		pic_sizes[3].dx = pic_dx;
		pic_sizes[3].dy = pic_dy;
		gdispImageClose(p_Image);
		memset(surface_1d, 0, width * height * 4); // Clear buffer
		memcpy(surface_1d, surface_1, width * height * 4);
	}
	Xil_DCacheFlush();
	Xil_DCacheDisable();
	return;
}
#endif

void dma_restore_picture(int pic)
{
	int i;
	int length = LAYER1_WIDTH;
	coord_t H = LAYER1_HEIGHT;

	uint32_t addr0;
	uint32_t addr1;
	uint32_t addr00;
	uint32_t addr11;

	switch(pic)
	{
	case 0:
		addr0 = (uint32_t)surface_1a;
		break;
	case 1:
		addr0 = (uint32_t)surface_1b;
		break;
	case 2:
		addr0 = (uint32_t)surface_1c;
		break;
	case 3:
		addr0 = (uint32_t)surface_1d;
		break;
	default:
		addr0 = (uint32_t)surface_1c;
		xil_printf("\n\rdma_restore_picture unknown picture, pic = %d\r\n", pic);
		break;
	}

	addr1 = (uint32_t)surface_1;

	//xil_printf("\n\rdma_restore_picture 0x%08x to 0x%08x\r\n", addr0, addr1);

	for(i = 0; i < H; i++)
	{
		addr00 = (u32)(addr0 + LAYER1_WIDTH * (i) * 4);
		addr11 = (u32)(addr1 + LAYER1_WIDTH * (i) * 4);
		dma_copy((u32) addr00, addr11, length);
	}
}

void dma_backup_picture(void)
{
	int i;
	int length = LAYER1_WIDTH;
	coord_t H = LAYER1_HEIGHT;

	uint32_t addr0;
	uint32_t addr1;
	uint32_t addr00;
	uint32_t addr11;

	addr0 = (uint32_t)surface_1;
	addr1 = (uint32_t)surface_1c;

	xil_printf("\n\rdma_backup_picture 0x%08x to 0x%08x\r\n", addr0, addr1);

	for(i = 0; i < H; i++)
	{
		addr00 = (u32)(addr0 + LAYER1_WIDTH * (i) * 4);
		addr11 = (u32)(addr1 + LAYER1_WIDTH * (i) * 4);
		dma_copy((u32) addr00, addr11, length);
	}
}

void print_layer0_data(int frame)
{
	int i;
	int j;
	int W;
	int H;

	if((frame != 0) && (frame != 1))
	{
		xil_printf("print_layer0_data fail, illegal frame = %d\n\r", frame);
		return;
	}

	uint32_t addr0;
	uint32_t addr1;
	addr0 = (uint32_t)gdispGetFrameBufferAddr(frame);
	W = LAYER0_WIDTH;
	H = LAYER0_HEIGHT;
	xil_printf("\n\rframebuffer0 W = %d H = %d\n\r", W, H);
	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 95)
    	{
    		addr1 = (u32)(addr0 + (j * W + i) * 4);
    		xil_printf("%08x ", Xil_In32(addr1));
    	}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");
}

void print_surface_1_data()
{
	int i;
	int j;
	int W;
	int H;
	W = LAYER1_WIDTH;
	H = LAYER1_HEIGHT;
	xil_printf("\n\r\n\rsurface_1 W = %d H = %d\n\r", W, H);
	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 60)
    	{
    		xil_printf("%08x ", surface_1[j * W + i]);
		}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");
}

void print_surface_1c_data()
{
	int i;
	int j;
	int W;
	int H;
	W = LAYER1_WIDTH;
	H = LAYER1_HEIGHT;
	xil_printf("\n\rsurface_1c W = %d H = %d\n\r", W, H);
	for(j = 0; j < H; j += 20)
    {
    	for(i = 0; i < W; i += 60)
    	{
    		xil_printf("%08x ", surface_1c[j * W + i]);
		}
    	xil_printf("\n\r");
	}
	xil_printf("\n\r");
}

void layer1_blit_corners(int frame)
{
	int i;
	coord_t W = LAYER1_WIDTH;
	coord_t H = LAYER1_HEIGHT;
	coord_t h;

	uint32_t addr0;
	uint32_t addr1;
	uint32_t addr2;

	if((frame != FRAMEBUFFER0) && (frame != FRAMEBUFFER1))
	{
		xil_printf("layer1_blit_corners fail, illegal frame = %d\n\r", frame);
		return;
	}

	addr0 = (uint32_t)addr_empty_pic;
	addr1 = (uint32_t)gdispGetFrameBufferAddr(frame);

	int length;

	if(H > 500)
		h = CUT_PIXEL1;
	else
		h = CUT_PIXEL2;

	h = cut_pixel;

	for(i = 0; i < h; i++)
	{
		length = h - i;
		//length = cuts[i];

		addr2 = (u32)(LAYER0_WIDTH * 4 * (LAYER1_START_Y + i) + addr1 + 4 * LAYER1_START_X);
		dma_copy((u32) addr0, addr2, length);

		addr2 = addr2 + (W - length) * 4 ;
		dma_copy((u32) addr0, addr2, length);

		addr2 = (u32)(LAYER0_WIDTH * 4 * (LAYER1_START_Y + H - i) + addr1 + 4 * LAYER1_START_X);
		dma_copy((u32) addr0, addr2, length);

		addr2 = addr2 + (W - length) * 4 ;
		dma_copy((u32) addr0, addr2, length);
	}
	return;
}

void draw_layer_boundary(void)
{
	int i;
	coord_t tmp1 = LAYER0_WIDTH - LAYER1_WIDTH - BORDER_X;
	coord_t tmp2 = BORDER_Y;
	coord_t tmp3 = LAYER1_WIDTH;
	coord_t tmp4 = LAYER1_HEIGHT;

	xil_printf("\n\rDraw layer boundary\n\r");

	gdispDrawBox(tmp1, tmp2, tmp3, tmp4, Red);

	tmp1 += (LAYER1_WIDTH - pic_width) / 2;
	tmp2 += (LAYER1_HEIGHT - pic_height) / 2;
	tmp3 = pic_width;
	tmp4 = pic_height;

	//gdispDrawBox(tmp1, tmp2, tmp3, tmp4, Blue);		//default picture box
	//xil_printf("gdispDrawBox Blue (%d, %d) (%d, %d)\n\r", tmp1, tmp2, tmp3, tmp4);

	gdispDrawBox(0, 0, LAYER0_WIDTH - 1, LAYER0_HEIGHT - 1, White);							//Layer0
	gdispDrawBox(LAYER1_START_X, LAYER1_START_Y, LAYER1_WIDTH, LAYER1_HEIGHT, Yellow);		//Layer1
	gdispDrawBox(LAYER2_START_X, LAYER2_START_Y, LAYER2_WIDTH, LAYER2_HEIGHT, Yellow);		//Layer2

	for(i = 1;i < 3; i++)
	{
		//gdispDrawBox(LAYER2_START_X + 40 * i , LAYER2_START_Y + 30 * i, LAYER2_WIDTH - 40 * 2 * i, LAYER2_HEIGHT - 30 * 2 * i, Red);	//Layer2
		gdispDrawBox(LAYER2_START_X + 8 * i , LAYER2_START_Y + 6 * i, LAYER2_WIDTH - 8 * 2 * i, LAYER2_HEIGHT - 6 * 2 * i, Red);	//Layer2
	}

	gdispDrawLine(LAYER2_START_X + LAYER2_WIDTH / 2, LAYER2_START_Y, LAYER2_START_X + LAYER2_WIDTH / 2, LAYER2_START_Y + LAYER2_HEIGHT, Red);
	gdispDrawLine(LAYER2_START_X, LAYER2_START_Y + LAYER2_HEIGHT / 2, LAYER2_START_X + LAYER2_WIDTH, LAYER2_START_Y + LAYER2_HEIGHT / 2, Red);

	for(i = 1;i < 3; i++)
	{
		//gdispDrawBox(LAYER1_START_X + 76 * i , LAYER1_START_Y + 57 * i, LAYER1_WIDTH - 76 * 2 * i, LAYER1_HEIGHT - 57 * 2 * i, Red);	//Layer1
		gdispDrawBox(LAYER1_START_X + 15 * i , LAYER1_START_Y + 11 * i, LAYER1_WIDTH - 15 * 2 * i, LAYER1_HEIGHT - 11 * 2 * i, Red);	//Layer1
	}
	gdispDrawLine(LAYER1_START_X + LAYER1_WIDTH / 2, LAYER1_START_Y, LAYER1_START_X + LAYER1_WIDTH / 2, LAYER1_START_Y + LAYER1_HEIGHT, Red);
	gdispDrawLine(LAYER1_START_X, LAYER1_START_Y + LAYER1_HEIGHT / 2, LAYER1_START_X + LAYER1_WIDTH, LAYER1_START_Y + LAYER1_HEIGHT / 2, Red);




	/*
	for(i = 0; i < LAYER1_WIDTH; i += LAYER1_WIDTH / 8)
	{
		gdispDrawLine(i + LAYER1_START_X, 0 + LAYER1_START_Y, i + LAYER1_START_X - 1, LAYER1_HEIGHT + LAYER1_START_Y - 1, Gray);
	}
	for(i = 0; i < LAYER1_HEIGHT; i += LAYER1_HEIGHT / 8)
	{
		gdispDrawLine(0 + LAYER1_START_X, i + LAYER1_START_Y, LAYER1_WIDTH + LAYER1_START_X - 1, i + LAYER1_START_Y - 1, Gray);
	}
	*/

	/*	test draw something
	coord_t width;
	coord_t height;

	// Get the screen size
	width = gdispGetWidth();
	height = gdispGetHeight();

	gdispDrawBox(100, 100, width-100*2, height-100*2, Yellow);
	gdispFillArea(300, 300, width-300*2, height-300*2, Lime);

	gdispDrawLine(100, 100, width-100, height-100, Red);
	gdispDrawLine(width - 100, height - 100, 100, 100, Red);
	gdispDrawLine(width/2, 100, width/2, height-100, Red);
	gdispDrawLine(100, height/2, width-100, height/2, Red);
	*/


}

void switch_to_framebuffer(int frame)
{
	if((frame != FRAMEBUFFER0) && (frame != FRAMEBUFFER1))
	{
		xil_printf("switch_to_framebuffer fail, illegal frame = %d\n\r", frame);
		return;
	}
	current_framebuffer = frame;
	next_framebuffer = 1 - frame;
	uint32_t addr;
	addr = gdispGetFrameBufferAddr(frame);
	Xil_Out32(0x43cc0440, addr);
	//xil_printf("\n\ruse framebuffer %d\n\r", frame);
	return;
}

void lock_monitor_test(periphs_t* p_periphs_inst)
{
	xil_printf("lock_monitor test\n\r");

	u32 DataRead;

	XGpio* 	lock_monitor = periphs_inst.p_lock_monitor_inst;

	DataRead = XGpio_DiscreteRead(lock_monitor,  XGPIO_CHANNEL1);
	xil_printf("DataRead1 = 0x%08x\r\n", DataRead);

	DataRead = XGpio_DiscreteRead(lock_monitor,  XGPIO_CHANNEL2);
	xil_printf("DataRead2 = 0x%08x\r\n", DataRead);


	return;
}


/*
void ps_gpio_setup(periphs_t* p_periphs_inst, u32 Pin, u32 Data)
{
	XGpioPs *Gpio = p_periphs_inst->p_ps_gpio_inst;
	XGpioPs_WritePin(Gpio, Pin, Data);
}


void ps_gpio_setup(periphs_t* p_periphs_inst, u32 Pin, u32 Data);
*/

void GetScuInfo(XScuGic *InstancePtr)
{
	u32 Int_Id;
	//for (Int_Id = 0U; Int_Id<XSCUGIC_MAX_NUM_INTR_INPUTS;Int_Id++)
	for (Int_Id = 0U; Int_Id < 100; Int_Id++)
	{
		xil_printf("Int_Id = %d\tHandler = 0x%08x\tCallBackRef=0x%08x\r\n", Int_Id, InstancePtr->Config->HandlerTable[Int_Id].Handler, InstancePtr->Config->HandlerTable[Int_Id].CallBackRef);
	}
	return;
}


void SetDongleLedRedStatus(int status)
{
	ps_gpio_setup(&periphs_inst, GPIO_IO_KEY, status);
	return;
}

void SetDongleLedGreenStatus(int status)
{
	ps_gpio_setup(&periphs_inst, GPIO_IO_CD, status);
	return;
}

void RequestShowPicture(int pic)
{
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	}

	if(pic == -1)
	{
		if(flag_use_2_framebuffers == TRUE)
			clear_layer1(next_framebuffer);
		else
			clear_layer1(1 - next_framebuffer);
	}
	else if(pic == 3)
	{
		clear_layer1_all(next_framebuffer, FALSE);
		if(flag_use_2_framebuffers == TRUE)
			clear_layer1_all(1 - next_framebuffer, FALSE);

		dma_restore_picture(pic);

		if(flag_use_2_framebuffers == TRUE)
		{
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		else
		{
			layer1_blit(pic_sizes[pic], 1 - next_framebuffer);
			layer1_blit_corners(1 - next_framebuffer);
		}
	}
	else
	{
		dma_restore_picture(pic);
		if(flag_use_2_framebuffers == TRUE)
		{
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		else
		{
			layer1_blit(pic_sizes[pic], 1 - next_framebuffer);
			layer1_blit_corners(1 - next_framebuffer);
		}
	}

	if(flag_use_2_framebuffers == TRUE)
	{
		switch_to_framebuffer(next_framebuffer);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));

		if(pic == -1)
		{
			clear_layer1(next_framebuffer);
		}
		else
		{
			dma_restore_picture(pic);
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		switch_to_framebuffer(next_framebuffer);
	}
	return;
}

void RequestShowPicture2(int pic)
{
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	}

	if(pic == -1)
	{
		if(flag_use_2_framebuffers == TRUE)
			clear_layer1(next_framebuffer);
		else
			clear_layer1(1 - next_framebuffer);
	}
	else if(pic == 3)
	{
		clear_layer1_all(next_framebuffer, FALSE);
		if(flag_use_2_framebuffers == TRUE)
			clear_layer1_all(1 - next_framebuffer, FALSE);

		dma_restore_picture(pic);

		if(flag_use_2_framebuffers == TRUE)
		{
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		else
		{
			layer1_blit(pic_sizes[pic], 1 - next_framebuffer);
			layer1_blit_corners(1 - next_framebuffer);
		}
	}
	else
	{
		dma_restore_picture(pic);
		if(flag_use_2_framebuffers == TRUE)
		{
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		else
		{
			layer1_blit(pic_sizes[pic], 1 - next_framebuffer);
			layer1_blit_corners(1 - next_framebuffer);
		}
	}

	add_draw_command(pic, 3);	//3 is dummy now

	/*
	if(flag_use_2_framebuffers == TRUE)
	{
		switch_to_framebuffer(next_framebuffer);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));

		if(pic == -1)
		{
			clear_layer1(next_framebuffer);
		}
		else
		{
			dma_restore_picture(pic);
			layer1_blit(pic_sizes[pic], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		switch_to_framebuffer(next_framebuffer);
	}
	*/
	return;
}

void init_system()
{
	int i;
	u32 BootModeRegister = 0;

	update_RTC_status = 0;
	update_dongle_status = 0;
	update_usb_status = 0;
	update_usb_descriptor_status = 0;
	usb_reset_status = 0;
	usb_reset_status_old = 0;
	flag_updateConsoleWidgets = FALSE;		//debug message
	flag_updateConsoleWidgets_old = 0;
	flag_is_keyboard_mounted = 0;
	flag_is_keyboard_mounted_old = 0;
	keyboard_mounted_cnt = 0;
	vendor_id_tmp = 0;
	product_id_tmp = 0;
	going_to_engineering_mode_cnt = 0;
	flag_engineering_mode = 0;
	flag_engineering_mode_old = 0;
	dongle_usage_count = 0;
	fw_write_count = 0;
	fan_speed = 0;
	alpha = ALPHA;
	g_exposure = 3;
	flag_setup_exposure = 0;
	g_procedure_started = START_STATUS;
	zoom_cut = ZOOM_CUT;
	if(zoom_cut > 200)
	{
		zoom_cut = 200;
	}

    xil_printf("\n\n\n\nAries Main Program\n\r");
    xil_printf("Compiled time: %s %s\n\r", __DATE__, __TIME__);

    #if defined(USE_CARRIER_BLACK)
    	xil_printf("CARRIER_BLACK + ");
    #elif defined(USE_CARRIER_RED)
    	xil_printf("CARRIER_RED + ");
	#else
    	xil_printf("xxxx CARRIER_Unknown + ");
	#endif

	#if defined(USE_Z7020)
		xil_printf("USE_Z7020 + ");
	#elif defined(USE_Z7015)
		xil_printf("USE_Z7015 + ");
	#else
		xil_printf("xxxx PZ_Unknown + ");
	#endif

	#ifdef SW_RELEASE
		xil_printf("SW_RELEASE Version\t");
	#else
		xil_printf("Engineering Version\t");
	#endif

	#ifdef USE_IMS_LINK
		xil_printf("USE_IMS_LINK\n\r\n\r");
	#else
		xil_printf("USE_comport\n\r\n\r");
	#endif

	xil_printf("tick(%d) = %d;\t%%%s:%s(%d)\r\n", tick_cnt++, g_ms_tick, __FILE__, __func__, __LINE__);

    addr_empty_pic = (uint32_t)empty_pic;
    addr_tmp_pic = (uint32_t)tmp_pic;

    for(i = 0;i<1216*4;i++)
    {
    	empty_pic[i] = 0xff000000;
    }
    for(i = 0;i<400*4;i++)
    {
    	tmp_pic[i] = 0x55FF0000;
    }
    //xil_printf("addr empty_pic: 0x%08x\r\n", addr_empty_pic);
    //xil_printf("addr   tmp_pic: 0x%08x\r\n", addr_tmp_pic);

	/*
	 * Read bootmode register
	 */
	BootModeRegister = Xil_In32(BOOT_MODE_REG);
	BootModeRegister &= BOOT_MODES_MASK;

	xil_printf("BootModeRegister = 0x%08x = %d\r\n", BootModeRegister, BootModeRegister);
	/*
	if (BootModeRegister == QSPI_MODE) {
		fsbl_printf("Boot mode is QSPI\n\r");
		//InitQspi();
		fsbl_printf("QSPI Init Done \r\n");
	}
	*/

    return;
}


uint8_t keycode_to_ascii2(uint8_t modifier, uint8_t keycode)
{
  // TODO max of keycode_ascii_tbl
  return keycode > 128 ? 0 :
    hid_keycode_to_ascii_tbl [modifier & (KEYBOARD_MODIFIER_LEFTSHIFT | KEYBOARD_MODIFIER_RIGHTSHIFT) ? 1 : 0] [keycode];
}

int process_function_key(uint8_t keycode)
{
	int result = XST_SUCCESS;

	if(keycode == 1)
	{
		xil_printf("====>\tF1\n\r");
		result = XST_DEVICE_IS_STOPPED;
	}
	else if(keycode == 2)
	{
		xil_printf("====>\tF2\n\r");
		result = XST_DEVICE_IS_STOPPED;
	}
	else if(keycode == 3)
	{
		xil_printf("====>\tF3\n\r");
	}
	else if(keycode == 4)
	{
		xil_printf("====>\tF4\n\r");
		result = XST_DEVICE_IS_STOPPED;
	}
	else if(keycode == 5)
	{
		xil_printf("====>\tF5\n\r");
		result = XST_DEVICE_IS_STOPPED;
	}
	else if(keycode == 6)
		xil_printf("====>\tF6\n\r");
	else if(keycode == 7)
		xil_printf("====>\tF7\n\r");
	else if(keycode == 8)
		xil_printf("====>\tF8\n\r");
	else if(keycode == 9)
	{
		xil_printf("====>\tF9\n\r");
		if(flag_engineering_mode == TRUE)
		{
			show_camera_serial(-1);
			show_camera_date(-1);
			if(flag_use_2_framebuffers == TRUE)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				show_camera_serial(-1);
				show_camera_date(-1);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			}
			usleep(500000);

			read_camera_info_from_camera_eng();
			show_camera_info_eng();
			int i;
			for(i = 0; i < 16; i++)
			{
				page_data[i] = camera_serial_tmp[i];
			}
			show_camera_serial(1);
			show_camera_date(1);
			if(flag_use_2_framebuffers == TRUE)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				for(i = 0; i < 16; i++)
				{
					page_data[i] = camera_serial_tmp[i];
				}
				show_camera_serial(1);
				show_camera_date(1);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			}
		}
	}
	else if(keycode == 10)
		xil_printf("====>\tF10\n\r");
	else if(keycode == 11)
		xil_printf("====>\tF11\n\r");
	else if(keycode == 12)
		xil_printf("====>\tF12\n\r");
	else
	{
		xil_printf("====>\txxxxx keycode = %d\n\r", keycode);
	}
	update_user_data(keycode);

	return result;
}

int process_arrow_key(uint8_t keycode)
{
	int result = XST_SUCCESS;

	if((flag_engineering_mode == TRUE) && (engineering_mode_setup_item != 0))
	{
		if((keycode == KEY_RIGHT) || (keycode == KEY_UP))
		{
			xil_printf("+");
			modify_current_setup_value(1);
			//result = XST_DEVICE_IS_STOPPED;
		}
		else if((keycode == KEY_LEFT) || (keycode == KEY_DOWN))
		{
			xil_printf("-");
			modify_current_setup_value(0);
			//result = XST_DEVICE_IS_STOPPED;
		}
		else
		{
			xil_printf("====>\tarrow key xxxx\n\r");
		}
	}
	else
	{
		if(keycode == KEY_RIGHT)
		{
			xil_printf("====>\tKEY_RIGHT\n\r");
		}
		else if(keycode == KEY_LEFT)
		{
			xil_printf("====>\tKEY_LEFT\n\r");
		}
		else if(keycode == KEY_DOWN)
		{
			xil_printf("====>\tKEY_DOWN\n\r");
		}
		else if(keycode == KEY_UP)
		{
			xil_printf("====>\tKEY_UP\n\r");
		}
		else
		{
			xil_printf("====>\tarrow key xxxx keycode = %d\n\r", keycode);
		}
	}
	return result;
}

int usb_keyboard_send_keycode(uint8_t modifier, uint8_t keycode)
{
	int result = XST_SUCCESS;
	uint8_t ch = keycode_to_ascii2(modifier, keycode);

	if(isprint(ch))
	{
		xil_printf("%c",ch);
		if(flag_modify_pinfo_mode != 0)
		{
			update_pinfo_on_widget(ch);
		}
		if((flag_check_engineering_mode == 2) && ch == 'i')
		{
			flag_check_engineering_mode++;
		}
		else if((flag_check_engineering_mode == 3) && ch == 'm')
		{
			flag_check_engineering_mode++;
		}
		else if((flag_check_engineering_mode == 4) && ch == 's')
		{
			flag_engineering_mode = TRUE;
			flag_check_engineering_mode = 0;
			show_engineering_mode();
		}
		else
		{
			flag_check_engineering_mode = 0;
		}
		if((ch == '+') || (ch == '-'))
		{
			if((flag_engineering_mode == TRUE) && (engineering_mode_setup_item != 0))
			{
				if(ch == '+')
				{
					xil_printf("+");
					modify_current_setup_value(1);
				}
				else if(ch == '-')
				{
					xil_printf("-");
					modify_current_setup_value(0);
				}
			}
		}
	}
	else
	{
	    if((modifier == 0) &&(keycode == 44))
	    	xil_printf("====>\tSpace\n\r");
	    else if((modifier == 0) &&(keycode >= 58) && (keycode <= 69))
	    {
	    	result = process_function_key(keycode - 57);
	    }
	    else if((modifier == 0) &&((keycode == 40)||(keycode == 88)))
	    {
	    	xil_printf("====>\tEnter\n\r");
	    	result = XST_DEVICE_IS_STARTED;

	    	if(flag_modify_pinfo_mode != 0	)
	    	{
		    	confirm_enter_key(flag_modify_pinfo_mode);
		    	flag_modify_pinfo_mode = 0;
	    	}
	    	if(flag_engineering_mode == TRUE)
	    	{
				if(engineering_mode_setup_item != 0)
				{
					apply_current_setting();
		    		engineering_mode_setup_item++;
		    		if(engineering_mode_setup_item > 8)
		    		{
		    			confirm_language_item();
		    			engineering_mode_setup_item = 1;
		    		}
		    		keep_current_setup_value(engineering_mode_setup_item);
		    		refresh_current_setup_value();
				}
	    	}
	    }
	    else if((modifier == 0)&&(keycode == 41))
	    {
	    	xil_printf("====>\tESC\n\r");
#ifdef USE_DATA_INPUT
			if(flag_modify_pinfo_mode != 0)
			{
				restore_old_data(flag_modify_pinfo_mode);
				flag_modify_pinfo_mode = 0;
			}
#endif
	    	if(flag_engineering_mode == TRUE)
	    	{
	    		xil_printf("Abort current setting.......\n\r");
	    		if(engineering_mode_setup_item == 8)
	    			confirm_language_item();
	    		engineering_mode_setup_item = 0;
	    	}
	    }
	    else if((modifier == 0)&&(keycode == 42))
	    {
	    	xil_printf("====>\tBackspace\n\r");
			if(flag_modify_pinfo_mode != 0)
			{
				update_pinfo_on_widget(ch);
			}
	    }
	    else if((modifier == 1)&&(keycode == 72))
	    {
	    	xil_printf("====>\tCtrl + Break\n\r");
	    	flag_check_engineering_mode++;
	    }
	    else if((modifier == 0) &&(keycode >= 79) && (keycode <= 82))
	    {
	    	result = process_arrow_key(keycode);
	    }
	    else if((modifier == 0)&&(keycode == 43))
	    {
	    	xil_printf("====>\tTab\n\r");
	    	if(flag_engineering_mode == TRUE)
	    	{
	    		//xil_printf("Jump to next item.......\n\r");
	    		engineering_mode_setup_item++;
	    		if(engineering_mode_setup_item > 8)
	    		{
	    			SelectedLanguage = SelectedLanguage_eng;
	    			confirm_language_item();
	    			engineering_mode_setup_item = 1;
	    		}
	    		keep_current_setup_value(engineering_mode_setup_item);
	    		refresh_current_setup_value();
	    	}
	    }
	    else if((modifier == 0)&&(keycode == 56))
	    	xil_printf("====>\t/\n\r");
	    else if((modifier == 0)&&(keycode == 75))
	    {
	    	xil_printf("====>\tPageUp\n\r");
	    	if(p_info_index == 0)
	    		p_info_index = 4;
	    	else
	    		p_info_index--;
	    	createWidgets();
	    	if(flag_use_2_framebuffers == TRUE)
	    	{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				createWidgets();
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	    	}
	    }
	    else if((modifier == 0)&&(keycode == 78))
	    {
	    	xil_printf("====>\tPageDown\n\r");
	    	p_info_index++;
	    	p_info_index %= 5;
	    	createWidgets();
	    	if(flag_use_2_framebuffers == TRUE)
	    	{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				createWidgets();
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	    	}
	    }
	    else if((modifier == 0)&&(keycode == 53))
	    	xil_printf("====>\t'\n\r");
	    else if(((modifier == 2)||(modifier == 32))&&(keycode == 53))
	    	xil_printf("====>\t~\n\r");
	    else
	    {
			xil_printf("====> xxxxxx\tmodifier = %d, keycode = %d\t\tch = 0x%02x = %d\r\n", modifier, keycode, ch, ch);
	    }
	}
	return result;
}

void confirm_enter_key(int flag_modify_pinfo_mode)	//only for function key
{
	if(flag_modify_pinfo_mode == 0)
		return;

	GWidgetInit	wi;
	int OFFSET = WIDTH1;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	wi.text = "1234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * (flag_modify_pinfo_mode - KEY_F0);

	if(flag_modify_pinfo_mode >= KEY_F4)
		wi.g.y += THICK1;

	if((flag_modify_pinfo_mode == KEY_F1) || (flag_modify_pinfo_mode == KEY_F2) || (flag_modify_pinfo_mode == KEY_F4) || (flag_modify_pinfo_mode == KEY_F5))
	{
		sprintf((char *)wi.text, "%s   ", p_info_data);
	}
	ghLabel2 = gwinLabelCreate(0, &wi);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	ghLabel2 = gwinLabelCreate(0, &wi);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	return;
}

void backup_old_data(int flag_modify_pinfo_mode)
{
#ifdef USE_DATA_INPUT
	//TBD
	if(flag_modify_pinfo_mode == 0)
		return;

	if((flag_modify_pinfo_mode == KEY_F1) || (flag_modify_pinfo_mode == KEY_F2) || (flag_modify_pinfo_mode == KEY_F4) || (flag_modify_pinfo_mode == KEY_F5))
	{
		if(p_info_data_index == 0)
		{
			//ddddddd


		}
		else
		{
			//default data
		}
		//uint8_t p_info_data[LENGTH_DATA];
		//uint8_t p_info_data_old[LENGTH_DATA];
	}
#endif
	return;
}

void restore_old_data0(int flag_modify_pinfo_mode)
{
#ifdef USE_DATA_INPUT
	if(flag_modify_pinfo_mode == 0)
		return;

	GWidgetInit	wi;
	int OFFSET = WIDTH1;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;
	//wi.text = "12345678901234567890";

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	if(flag_modify_pinfo_mode == KEY_F1)
	{
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 0;
	wi.text = "";
	sprintf((char *)wi.text, "%d", p_infos[p_info_index].id_no);
	ghLabel1 = gwinLabelCreate(0, &wi);
	}

	if(flag_modify_pinfo_mode == KEY_F2)
	{
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 1;
	wi.text = p_infos[p_info_index].name;
	ghLabel2 = gwinLabelCreate(0, &wi);
	}

	if(flag_modify_pinfo_mode == KEY_F3)
	{
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 3;
	if(p_infos[p_info_index].sex == 1)
		wi.text = "Male";
	else
		wi.text = "Female";
	ghLabel3 = gwinLabelCreate(0, &wi);
	}

	if(flag_modify_pinfo_mode == KEY_F4)
	{
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 4;
	wi.text = "";
	sprintf((char *)wi.text, "%d", p_infos[p_info_index].age);
	ghLabel4 = gwinLabelCreate(0, &wi);
	}

	if(flag_modify_pinfo_mode == KEY_F5)
	{
	wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 5;
	wi.text = p_infos[p_info_index].birthday;
	ghLabel5 = gwinLabelCreate(0, &wi);
	}
#endif
	return;
}

void restore_old_data(int flag_modify_pinfo_mode)
{
#ifdef USE_DATA_INPUT
	if(flag_modify_pinfo_mode == 0)
		return;

	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	restore_old_data0(flag_modify_pinfo_mode);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	restore_old_data0(flag_modify_pinfo_mode);
#endif
	return;
}

void update_user_data(uint8_t keycode)	//only for function key
{
#ifdef USE_DATA_INPUT
	GWidgetInit	wi;
	int OFFSET = WIDTH1;
	font_t font = gdispOpenFont("iskpota232");

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	if((keycode == 1) || (keycode == 2) || (keycode == 4) || (keycode == 5))
	{
    	confirm_enter_key(flag_modify_pinfo_mode);

		if(keycode == 1)
		{
			xil_printf("F1\n\r");
			flag_modify_pinfo_mode = KEY_F1;
		}
		else if(keycode == 2)
		{
			xil_printf("F2\n\r");
			flag_modify_pinfo_mode = KEY_F2;
		}
		else if(keycode == 4)
		{
			xil_printf("F4\n\r");
			flag_modify_pinfo_mode = KEY_F4;
		}
		else if(keycode == 5)
		{
			xil_printf("F5\n\r");
			flag_modify_pinfo_mode = KEY_F5;
		}
		backup_old_data(flag_modify_pinfo_mode);

		memset(p_info_data, '\0', LENGTH_DATA); // Clear buffer
		p_info_data_index = 0;

		wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * (flag_modify_pinfo_mode - KEY_F0) + 5;

		if(flag_modify_pinfo_mode >= KEY_F4)
			wi.g.y += THICK1;

		gdispFillArea(wi.g.x, wi.g.y, WIDTH2, 30, White);

		wi.text = "_";
		gdispFillString(wi.g.x, wi.g.y, wi.text, font, Black, White);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		gdispFillArea(wi.g.x, wi.g.y, WIDTH2, 30, White);
		wi.text = " ";
		gdispFillString(wi.g.x, wi.g.y, wi.text, font, White, Black);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
	else if(keycode == 3)
	{
		confirm_enter_key(flag_modify_pinfo_mode);

		wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * 3;
		if(p_infos[p_info_index].sex == 1)
		{
			p_infos[p_info_index].sex = 2;
			wi.text = "Female";
		}
		else
		{
			p_infos[p_info_index].sex = 1;
			wi.text = "Male";
		}
		ghLabel3 = gwinLabelCreate(0, &wi);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		ghLabel3 = gwinLabelCreate(0, &wi);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
#endif
	return;
}

void update_pinfo_on_widget(uint8_t ch)
{
	if(flag_modify_pinfo_mode == 0)
	{
		return;
	}

	if((flag_modify_pinfo_mode == KEY_F1) || (flag_modify_pinfo_mode == KEY_F2) || (flag_modify_pinfo_mode == KEY_F4) || (flag_modify_pinfo_mode == KEY_F5))
	{
		if(ch == 8)		//Backspace
		{
			if(p_info_data_index > 0)
			{
				p_info_data_index--;
				p_info_data[p_info_data_index] = '\0';
			}
		}
		else
		{
			if(p_info_data_index < (LENGTH_DATA - 1))
			{
				p_info_data[p_info_data_index] = ch;
				p_info_data_index++;
			}
			else
			{
				p_info_data[p_info_data_index - 1] = ch;
			}
		}

		GWidgetInit	wi;
		int OFFSET = WIDTH1;

		font_t font = gdispOpenFont("iskpota232");

		// Apply some default values for GWIN
		gwinWidgetClearInit(&wi);
		wi.g.show = TRUE;

		gwinSetDefaultFont(gdispOpenFont("iskpota232"));

		wi.g.width = WIDTH2; wi.g.height = THICK1; wi.g.x = BORDER_X + OFFSET, wi.g.y = BORDER_Y + THICK1 * (flag_modify_pinfo_mode - KEY_F0) + 5;

		if(flag_modify_pinfo_mode >= KEY_F4)
			wi.g.y += THICK1;

		wi.text = "";
		sprintf((char *)wi.text, "%s", p_info_data);
		//gdispFillString(wi.g.x, wi.g.y, "                                     ", font, White, Black);
		gdispFillArea(wi.g.x, wi.g.y, 370, 40, Black);
		gdispFillString(wi.g.x, wi.g.y, wi.text, font, Black, White);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		sprintf((char *)wi.text, "%s_", p_info_data);
		//gdispFillString(wi.g.x, wi.g.y, "                                     ", font, White, Black);
		gdispFillArea(wi.g.x, wi.g.y, 370, 40, Black);
		gdispFillString(wi.g.x, wi.g.y, wi.text, font, Black, White);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
	return;
}

int read_serial_from_camera(void)
{
	int status;
	xil_printf("\n\rread_serial_from_camera\n\r");
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(SN_PAGE);
	//usleep(100);
	status = READ_1PAGE();
	ENABLE_CONFIGURE(0);

	if(status == XST_SUCCESS)
	{
		int i;
		for(i = 0; i < 16; i++)
		{
			camera_serial_new[i] = page_data[i];
		}
	}
	else
	{
		xil_printf("\n\rread_serial_from_camera fail\n\r");
	}
	return status;
}

void write_serial_to_camera(void)
{
	xil_printf("\n\rwrite_serial_date_to_camera\n\r");
	write_date_to_camera(DATE_PAGE0);

	xil_printf("\n\rwrite_serial_to_camera\n\r");
	//xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(SN_PAGE);
	usleep(DELAY);
	//xil_printf("\n\rPROG_1PAGE\n\r");
	page_data[15] = 0x33;
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);
	return;
}

void write_user_serial_to_camera(void)
{
	xil_printf("\n\rwrite_serial_date_to_camera\n\r");
	write_date_to_camera(DATE_PAGE0);

	xil_printf("\n\rwrite_user_serial_to_camera\n\r");
	//xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(SN_PAGE);
	usleep(DELAY);
	//xil_printf("\n\rPROG_1PAGE\n\r");
	page_data[12] = 0xA;
	page_data[13] = 0xB;
	page_data[14] = 0xC;
	page_data[15] = 0xD;
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);
	return;
}

int read_date_from_camera(uint16_t page)
{
	xil_printf("\n\rread_date_from_camera page = 0x%x\n\r", page);
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(page);
	READ_1PAGE();
	ENABLE_CONFIGURE(0);
	if((page_data[12] == 0xAA) && (page_data[13] == 0xBB) && (page_data[14] == 0xCC) && (page_data[15] == 0xDD))
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int read_data_from_camera(uint16_t page)
{
	xil_printf("\n\rread_data_from_camera page = 0x%x\n\r", page);
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(page);
	READ_1PAGE();
	ENABLE_CONFIGURE(0);
	return 0;
}

void write_date_to_camera(uint16_t page)
{
	u32 year;
	u8 month;
	u8 mday;
	u8 wday;
	u8 hour;
	u8 minutes;
	u8 seconds;

	xil_printf("\n\rwrite_date_to_camera\t%s\n\r", asctime(&rtc));

	read_date_from_camera(page);

	if((page_data[12] == 0xAA) && (page_data[13] == 0xBB) && (page_data[14] == 0xCC) && (page_data[15] == 0xDD))
	{
		year = page_data[0] + 1900;
		month = page_data[1];
		mday = page_data[2];
		wday = page_data[3];
		hour = page_data[4];
		minutes = page_data[5];
		seconds = page_data[6];
		debug_console_print("YYYYYYYYYYYYYYYYYY skip");
		xil_printf("xxxxxxxxxxx already have DATA : %02d/%02d/%04ld %d %02d:%02d:%02d skip\n\r", month, mday, year, wday, hour, minutes, seconds);
	}
	else
	{
		xil_printf("no old data\n\r");
		//xil_printf("\n\rENABLE_CONFIGURE\n\r");
		ENABLE_CONFIGURE(1);
		//xil_printf("\n\rSET_ADDRESS\n\r");
		SET_ADDRESS(page);
		usleep(DELAY);

		asctime(&rtc);

		/*
		xil_printf("year = %d\n\r", rtc.tm_year);
		xil_printf("month = %d\n\r", rtc.tm_mon);
		xil_printf("day = %d\n\r", rtc.tm_mday);
		xil_printf("wday = %d\n\r", rtc.tm_wday);
		xil_printf("hour = %d\n\r", rtc.tm_hour);
		xil_printf("minute = %d\n\r", rtc.tm_min);
		xil_printf("second = %d\n\r", rtc.tm_sec);
		*/

		page_data[0] = rtc.tm_year;
		page_data[1] = rtc.tm_mon + 1;
		page_data[2] = rtc.tm_mday;
		page_data[3] = rtc.tm_wday;

		page_data[4] = rtc.tm_hour;
		page_data[5] = rtc.tm_min;
		page_data[6] = rtc.tm_sec;
		page_data[7] = 0;

		page_data[8] = 0;
		page_data[9] = 0;
		page_data[10] = 0;
		page_data[11] = 0;

		page_data[12] = 0xAA;
		page_data[13] = 0xBB;
		page_data[14] = 0xCC;
		page_data[15] = 0xDD;

		//xil_printf("\n\rPROG_1PAGE\n\r");
		PROG_1PAGE();
		xil_printf("\n\rDISABLE_CONFIGURE\n\r");
		ENABLE_CONFIGURE(0);
	}
	return;
}

void write_error_code_to_camera(int error)
{
	int i;
	xil_printf("\n\rwrite_error_code_to_camera\t%s error = %d\n\r", asctime(&rtc), error);
	//xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(ERROR_PAGE);
	usleep(DELAY);

	page_data[0] = 0xEE;
	page_data[1] = 0xCC;
	page_data[2] = 0xDD;
	page_data[3] = 0xEE;

	for(i = 4; i < 8; i++)
	{
		page_data[i] = error;
	}
	//xil_printf("\n\rPROG_1PAGE\n\r");
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);
	write_date_to_camera(ERROR_DATE);
	return;
}

int read_error_code_from_camera(void)
{
	xil_printf("\n\rread_error_code_from_camera page = 0x%x\n\r", ERROR_PAGE);
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(ERROR_PAGE);
	READ_1PAGE();
	ENABLE_CONFIGURE(0);
	if((page_data[0] == 0xEE) && (page_data[1] == 0xCC) && (page_data[2] == 0xDD) && (page_data[3] == 0xEE))
	{
		return page_data[4];
	}
	else if((page_data[0] == 0) && (page_data[1] == 0) && (page_data[2] == 0) && (page_data[3] == 0))
	{
		xil_printf("camera page 0xe no data\n\r");
		return 0;
	}
	else
	{
		xil_printf("unknown data : %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r",
				page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7],
				page_data[8], page_data[9], page_data[10], page_data[11], page_data[12], page_data[13], page_data[14], page_data[15]);
		return 0;
	}
}

void show_camera_serial(int enable)
{
	GWidgetInit	wi;

	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;

	// Create label
	wi.text = "12345678901234567890123456789012345678901234567890";
	if(enable == 1)
	{
		sprintf((char *)wi.text, "S/N : %02X%02X-%02X%02X-%02X%02X-%02X%02X", page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7]);
	}
	else if(enable == 0)
	{
		sprintf((char *)wi.text, "S/N : ----------------------------------------");
	}
	else
	{
		sprintf((char *)wi.text, "S/N : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
	}
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y1;
	ghLabel6 = gwinLabelCreate(0, &wi);
	return;
}

void show_camera_date(int enable)
{
#ifdef USE_DEBUG_MESSAGE

	GWidgetInit	wi;
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;

	// Create label
	wi.text = "1234567890123456789012345678901234567890123456789012345";

	if(enable == 1)
	{
		/*
		xil_printf("david0124: %s:%s(%d) ST camera_status = %d\r\n",__FILE__,__func__,__LINE__, flag_camera_status);

		switch(flag_camera_status)
		{
		case CAMERA_NEW:	xil_printf("david0124: %s:%s(%d) CAMERA_NEW\r\n",__FILE__,__func__,__LINE__);break;
		case CAMERA_1M:		xil_printf("david0124: %s:%s(%d) CAMERA_1M\r\n",__FILE__,__func__,__LINE__);break;
		case CAMERA_30M:	xil_printf("david0124: %s:%s(%d) CAMERA_30M\r\n",__FILE__,__func__,__LINE__);break;
		default:			xil_printf("david0124: %s:%s(%d) xxxxxxx\r\n",__FILE__,__func__,__LINE__);break;
		}
		*/

		#ifdef USE_PREVENT_REUSE
		u32 year;
		u8 month;
		u8 mday;
		u8 wday;
		u8 hour;
		u8 minutes;
		u8 seconds;

		//u8 page_data_1m[16];	reserved
		//int i;

		if(flag_camera_status == CAMERA_1M)
		{
			read_date_from_camera(DATE_PAGE1);
		}
		else if(flag_camera_status == CAMERA_30M)
		{
			/*	reserved
			read_date_from_camera(DATE_PAGE1);
			for(i = 0; i < 16; i++)
			{
				page_data_1m[i] = page_data[i];
			}
			*/
			read_date_from_camera(DATE_PAGE3);
		}

		if((page_data[12] == 0xAA) && (page_data[13] == 0xBB) && (page_data[14] == 0xCC) && (page_data[15] == 0xDD))
		{
			year = page_data[0] + 1900;
			month = page_data[1];
			mday = page_data[2];
			wday = page_data[3];
			hour = page_data[4];
			minutes = page_data[5];
			seconds = page_data[6];
			if(flag_camera_status == CAMERA_1M)
			{
				sprintf((char *)wi.text, "1MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
			}
			else if(flag_camera_status == CAMERA_30M)
			{
				sprintf((char *)wi.text, "30MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
			}

			/*
			xil_printf("year = %d\n\r", year);
			xil_printf("month = %d\n\r", month);
			xil_printf("day = %d\n\r", mday);
			xil_printf("wday = %d\n\r", wday);
			xil_printf("hour = %d\n\r", hour);
			xil_printf("minute = %d\n\r", minutes);
			xil_printf("second = %d\n\r", seconds);
			*/
		}
		else
		{
			sprintf((char *)wi.text, "NEW");
		}
		#endif
	}
	else if(enable == 0)
	{
		sprintf((char *)wi.text, "-----------------------------------------------");
	}
	else
	{
		sprintf((char *)wi.text, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
	}

	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y2;

	ghLabel6 = gwinLabelCreate(0, &wi);
#endif
	return;
}

void read_camera_info_from_camera_eng(void)
{
	xil_printf("check dongle status\t");
	g_conn_status = psuart0_dongle_ping();
	if(g_conn_status == DONGLE_NONE){			// Nothing is plugged in
		xil_printf("no dongle or camera\n\r");
		show_camera_serial(-1);
		show_camera_date(-1);
		if(flag_use_2_framebuffers == TRUE)
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
			show_camera_serial(-1);
			show_camera_date(-1);
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			//show_camera_serial(-1);
			//show_camera_date(-1);
		}
	}
	else if(g_conn_status == CAMERA_NONE){	// Only dongle is plugged in
		xil_printf("dongle plugged\n\r");
		show_camera_serial(0);
		show_camera_date(0);
		if(flag_use_2_framebuffers == TRUE)
		{
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
			show_camera_serial(0);
			show_camera_date(0);
			gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
			//show_camera_serial(0);
			//show_camera_date(0);
		}
	}
	else if(g_conn_status == CAMERA_OK){	// Everything is plugged in
		xil_printf("all plugged\n\r");
	}
	else {							// Unknown
		xil_printf("unknown status\n\r");
	}

	dongle_usage_count = check_dongle_usage_count();
	//xil_printf("dongle_usage_count = %d\r\n", dongle_usage_count);
	show_dongle_usage_count_eng(dongle_usage_count);
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		show_dongle_usage_count_eng(dongle_usage_count);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
	return;
}

void show_camera_info_eng(void)
{
#ifdef USE_PREVENT_REUSE
	int i;
	u8 camera_date_page0[16] = {0};
	u8 camera_date_page1[16] = {0};
	u8 camera_date_page3[16] = {0};
	u8 camera_error_date[16] = {0};
#endif

	xil_printf("check dongle status\t");
	g_conn_status = psuart0_dongle_ping();
	if(g_conn_status == DONGLE_NONE){			// Nothing is plugged in
		xil_printf("no dongle or camera\n\r");
	}
	else if(g_conn_status == CAMERA_NONE){	// Only dongle is plugged in
		xil_printf("dongle plugged\n\r");
	}
	else if(g_conn_status == CAMERA_OK){	// Everything is plugged in
		xil_printf("all plugged\n\r");
	}
	else {							// Unknown
		xil_printf("unknown status\n\r");
	}

	if(g_conn_status == CAMERA_OK)
	{
		xil_printf("\n\rshow_camera_info_eng ST, camera exists\n\r");
#ifdef USE_PREVENT_REUSE

		flag_video_status = read_error_code_from_camera();

		camera_use_time_from_camera = read_camera_use_time_from_camera();	//camera 0xC
		//xil_printf("\n\rcamera_use_time_from_camera = %d\n\r", camera_use_time_from_camera);

		read_serial_from_camera();
		for(i = 0; i < 16; i++)
		{
			camera_serial_tmp[i] = page_data[i];
		}

		read_date_from_camera(DATE_PAGE0);
		for(i = 0; i < 16; i++)
		{
			camera_date_page0[i] = page_data[i];
		}

		read_date_from_camera(DATE_PAGE1);
		for(i = 0; i < 16; i++)
		{
			camera_date_page1[i] = page_data[i];
		}

		read_date_from_camera(DATE_PAGE3);
		for(i = 0; i < 16; i++)
		{
			camera_date_page3[i] = page_data[i];
		}

		read_date_from_camera(ERROR_DATE);
		for(i = 0; i < 16; i++)
		{
			camera_error_date[i] = page_data[i];
		}
#endif
	}
	else
	{
		xil_printf("\n\rshow_camera_info_eng ST, no camera\n\r");
	}

#ifdef USE_PREVENT_REUSE
	u32 year;
	u8 month;
	u8 mday;
	u8 wday;
	u8 hour;
	u8 minutes;
	u8 seconds;

	GWidgetInit	wi;
	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;

	// Create label
	wi.text = "12345678901234567890123456789012345678901234567890";
	switch(flag_video_status)
	{
	case VIDEO_OK:							sprintf((char *)wi.text, "VIDEO_OK");break;
	case VIDEO_FORBID_ALL:					sprintf((char *)wi.text, "VIDEO_FORBID_ALL");break;
	case VIDEO_FORBID_DIFFERENT_CAMERA:		sprintf((char *)wi.text, "V_X_DIFFERENT_CAMERA");break;
	case VIDEO_FORBID_POWEROFF_LONG_1M:		sprintf((char *)wi.text, "V_X_POWEROFF_LONG_1M");break;
	case VIDEO_FORBID_POWEROFF_LONG_1M30M:	sprintf((char *)wi.text, "V_X_POWEROFF_LONG_1M30M");break;
	case VIDEO_FORBID_POWEROFF_LONG_30M:	sprintf((char *)wi.text, "V_X_POWEROFF_LONG_30M");break;
	case VIDEO_FORBID_PULL_OUT_LONG_1M:		sprintf((char *)wi.text, "V_X_PULL_OUT_LONG_1M");break;
	case VIDEO_FORBID_PULL_OUT_LONG_30M:	sprintf((char *)wi.text, "V_X_PULL_OUT_LONG_30M");break;
	default:								sprintf((char *)wi.text, "unknown status : %d", (int)flag_video_status);break;
	}
	wi.g.width = WIDTH3 + 50; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 750;
	ghLabel6 = gwinLabelCreate(0, &wi);

	if(g_conn_status == CAMERA_OK)
	{
		sprintf((char *)wi.text, "S/N : %02X%02X-%02X%02X-%02X%02X-%02X%02X", camera_serial_tmp[0], camera_serial_tmp[1], camera_serial_tmp[2], camera_serial_tmp[3], camera_serial_tmp[4], camera_serial_tmp[5], camera_serial_tmp[6], camera_serial_tmp[7]);
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 250;
		ghLabel6 = gwinLabelCreate(0, &wi);


		if((camera_date_page1[12] == 0xAA) && (camera_date_page1[13] == 0xBB) && (camera_date_page1[14] == 0xCC) && (camera_date_page1[15] == 0xDD))
		{
			year = camera_date_page0[0] + 1900;
			month = camera_date_page0[1];
			mday = camera_date_page0[2];
			wday = camera_date_page0[3];
			hour = camera_date_page0[4];
			minutes = camera_date_page0[5];
			seconds = camera_date_page0[6];
			sprintf((char *)wi.text, "Product : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
		}
		else
		{
			sprintf((char *)wi.text, "Product : ----------------------------------------");
		}
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 350;
		ghLabel6 = gwinLabelCreate(0, &wi);

	}
	else
	{
		sprintf((char *)wi.text, "S/N : ----------------------------------------");
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 250;
		ghLabel6 = gwinLabelCreate(0, &wi);

		sprintf((char *)wi.text, "Product : ----------------------------------------");
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 350;
		ghLabel6 = gwinLabelCreate(0, &wi);
	}

	if((camera_date_page1[12] == 0xAA) && (camera_date_page1[13] == 0xBB) && (camera_date_page1[14] == 0xCC) && (camera_date_page1[15] == 0xDD))
	{
		year = camera_date_page1[0] + 1900;
		month = camera_date_page1[1];
		mday = camera_date_page1[2];
		wday = camera_date_page1[3];
		hour = camera_date_page1[4];
		minutes = camera_date_page1[5];
		seconds = camera_date_page1[6];
		sprintf((char *)wi.text, "1MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
	}
	else
	{
		sprintf((char *)wi.text, "1MIN : ----------------------------------------");
	}
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 450;
	ghLabel6 = gwinLabelCreate(0, &wi);

	//wi.text = "";
	if(g_conn_status == CAMERA_OK)
	{
		sprintf((char *)wi.text, "USE : %d minutes", camera_use_time_from_camera);
	}
	else
	{
		sprintf((char *)wi.text, "USE : -- minutes");
	}
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 550;
	ghLabel6 = gwinLabelCreate(0, &wi);

	//wi.text = "";
	if((camera_date_page3[12] == 0xAA) && (camera_date_page3[13] == 0xBB) && (camera_date_page3[14] == 0xCC) && (camera_date_page3[15] == 0xDD))
	{
		year = camera_date_page3[0] + 1900;
		month = camera_date_page3[1];
		mday = camera_date_page3[2];
		wday = camera_date_page3[3];
		hour = camera_date_page3[4];
		minutes = camera_date_page3[5];
		seconds = camera_date_page3[6];
		sprintf((char *)wi.text, "30MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
	}
	else
	{
		sprintf((char *)wi.text, "30MIN : ------------------------");
	}
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 650;
	ghLabel6 = gwinLabelCreate(0, &wi);

	//wi.text = "";
	if((camera_error_date[12] == 0xAA) && (camera_error_date[13] == 0xBB) && (camera_error_date[14] == 0xCC) && (camera_error_date[15] == 0xDD))
	{
		year = camera_error_date[0] + 1900;
		month = camera_error_date[1];
		mday = camera_error_date[2];
		wday = camera_error_date[3];
		hour = camera_error_date[4];
		minutes = camera_error_date[5];
		seconds = camera_error_date[6];
		sprintf((char *)wi.text, "Expired : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
	}
	else
	{
		sprintf((char *)wi.text, "----- : ------------------------");
	}
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 850;
	ghLabel6 = gwinLabelCreate(0, &wi);

	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));

		// Create label

		//wi.text = "";
		switch(flag_video_status)
		{
		case VIDEO_OK:							sprintf((char *)wi.text, "VIDEO_OK");break;
		case VIDEO_FORBID_ALL:					sprintf((char *)wi.text, "VIDEO_FORBID_ALL");break;
		case VIDEO_FORBID_DIFFERENT_CAMERA:		sprintf((char *)wi.text, "V_X_DIFFERENT_CAMERA");break;
		case VIDEO_FORBID_POWEROFF_LONG_1M:		sprintf((char *)wi.text, "V_X_POWEROFF_LONG_1M");break;
		case VIDEO_FORBID_POWEROFF_LONG_1M30M:	sprintf((char *)wi.text, "V_X_POWEROFF_LONG_1M30M");break;
		case VIDEO_FORBID_POWEROFF_LONG_30M:	sprintf((char *)wi.text, "V_X_POWEROFF_LONG_30M");break;
		case VIDEO_FORBID_PULL_OUT_LONG_1M:		sprintf((char *)wi.text, "V_X_PULL_OUT_LONG_1M");break;
		case VIDEO_FORBID_PULL_OUT_LONG_30M:	sprintf((char *)wi.text, "V_X_PULL_OUT_LONG_30M");break;
		default:								sprintf((char *)wi.text, "unknown status : %d", (int)flag_video_status);break;
		}
		wi.g.width = WIDTH3 + 50; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 750;
		ghLabel6 = gwinLabelCreate(0, &wi);

		//wi.text = "12345678901234567890123456789012345678901234567890";
		if(g_conn_status == CAMERA_OK)
		{
			sprintf((char *)wi.text, "S/N : %02X%02X-%02X%02X-%02X%02X-%02X%02X", camera_serial_tmp[0], camera_serial_tmp[1], camera_serial_tmp[2], camera_serial_tmp[3], camera_serial_tmp[4], camera_serial_tmp[5], camera_serial_tmp[6], camera_serial_tmp[7]);
			wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 250;
			ghLabel6 = gwinLabelCreate(0, &wi);


			if((camera_date_page1[12] == 0xAA) && (camera_date_page1[13] == 0xBB) && (camera_date_page1[14] == 0xCC) && (camera_date_page1[15] == 0xDD))
			{
				year = camera_date_page0[0] + 1900;
				month = camera_date_page0[1];
				mday = camera_date_page0[2];
				wday = camera_date_page0[3];
				hour = camera_date_page0[4];
				minutes = camera_date_page0[5];
				seconds = camera_date_page0[6];
				sprintf((char *)wi.text, "Product : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
			}
			else
			{
				sprintf((char *)wi.text, "Product : ----------------------------------------");
			}
			wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 350;
			ghLabel6 = gwinLabelCreate(0, &wi);

		}
		else
		{
			sprintf((char *)wi.text, "S/N : ----------------------------------------");
			wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 250;
			ghLabel6 = gwinLabelCreate(0, &wi);

			sprintf((char *)wi.text, "Product : ----------------------------------------");
			wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 350;
			ghLabel6 = gwinLabelCreate(0, &wi);
		}

		if((camera_date_page1[12] == 0xAA) && (camera_date_page1[13] == 0xBB) && (camera_date_page1[14] == 0xCC) && (camera_date_page1[15] == 0xDD))
		{
			year = camera_date_page1[0] + 1900;
			month = camera_date_page1[1];
			mday = camera_date_page1[2];
			wday = camera_date_page1[3];
			hour = camera_date_page1[4];
			minutes = camera_date_page1[5];
			seconds = camera_date_page1[6];
			sprintf((char *)wi.text, "1MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
		}
		else
		{
			sprintf((char *)wi.text, "1MIN : ----------------------------------");
		}
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 450;
		ghLabel6 = gwinLabelCreate(0, &wi);

		//wi.text = "";
		if(g_conn_status == CAMERA_OK)
		{
			sprintf((char *)wi.text, "USE : %d minutes", camera_use_time_from_camera);
		}
		else
		{
			sprintf((char *)wi.text, "USE : -- minutes");
		}
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 550;
		ghLabel6 = gwinLabelCreate(0, &wi);

		//wi.text = "";
		if((camera_date_page3[12] == 0xAA) && (camera_date_page3[13] == 0xBB) && (camera_date_page3[14] == 0xCC) && (camera_date_page3[15] == 0xDD))
		{
			year = camera_date_page3[0] + 1900;
			month = camera_date_page3[1];
			mday = camera_date_page3[2];
			wday = camera_date_page3[3];
			hour = camera_date_page3[4];
			minutes = camera_date_page3[5];
			seconds = camera_date_page3[6];
			sprintf((char *)wi.text, "30MIN : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
		}
		else
		{
			sprintf((char *)wi.text, "30MIN : ------------------------");
		}
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 650;
		ghLabel6 = gwinLabelCreate(0, &wi);

		//wi.text = "";
		if((camera_error_date[12] == 0xAA) && (camera_error_date[13] == 0xBB) && (camera_error_date[14] == 0xCC) && (camera_error_date[15] == 0xDD))
		{
			year = camera_error_date[0] + 1900;
			month = camera_error_date[1];
			mday = camera_error_date[2];
			wday = camera_error_date[3];
			hour = camera_error_date[4];
			minutes = camera_error_date[5];
			seconds = camera_error_date[6];
			sprintf((char *)wi.text, "Expired : %02d/%02d/%04ld %d %02d:%02d:%02d", month, mday, year, wday, hour, minutes, seconds);
		}
		else
		{
			sprintf((char *)wi.text, "----- : ------------------------");
		}
		wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = 1120, wi.g.y = 850;
		ghLabel6 = gwinLabelCreate(0, &wi);

		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
#endif
	xil_printf("\n\rshow_camera_info_eng SP\n\r");
	return;
}

void clear_connect_timer()
{
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	gdispFillArea(CAMERA_INFO_POS_X, CAMERA_INFO_POS_Y3, WIDTH1 * 2, THICK1, Black);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	gdispFillArea(CAMERA_INFO_POS_X, CAMERA_INFO_POS_Y3, WIDTH1 * 2, THICK1, Black);
	return;
}

void clear_disconnect_timer()
{
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	gdispFillArea(CAMERA_INFO_POS_X, CAMERA_INFO_POS_Y4, WIDTH1 * 1, THICK1, Black);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	gdispFillArea(CAMERA_INFO_POS_X, CAMERA_INFO_POS_Y4, WIDTH1 * 1, THICK1, Black);
	return;
}

void keep_current_setup_value(int item)
{
	if(item == 1)
		year_eng = rtc.tm_year - 119;
	else if(item == 2)
		month_eng = rtc.tm_mon + 1;
	else if(item == 3)
		date_eng = rtc.tm_mday;
	else if(item == 4)
		day_eng = rtc.tm_wday;
	else if(item == 5)
		hour_eng = rtc.tm_hour;
	else if(item == 6)
		minutes_eng = rtc.tm_min;
	else if(item == 7)
		seconds_eng = rtc.tm_sec;
	else if(item == 8)
		SelectedLanguage_eng = SelectedLanguage;
	else
	{
		xil_printf("keep_current_setup_value unknown item = %d xxxx\n\r", item);
	}
	return;
}

void modify_current_setup_value(int add)
{
	if(engineering_mode_setup_item == 1)
	{
		if(add == 1)
		{
			year_eng++;
			if(year_eng > 200)
				year_eng = 200;
		}
		else
		{
			if(year_eng > 0)
				year_eng--;
		}
	}
	else if(engineering_mode_setup_item == 2)
	{
		if(add == 1)
		{
			month_eng++;
			if(month_eng > 12)
				month_eng = 1;
		}
		else
		{
			if(month_eng > 1)
				month_eng--;
			else
				month_eng = 12;
		}
	}
	else if(engineering_mode_setup_item == 3)
	{
		if(add == 1)
		{
			date_eng++;
			if(date_eng > 31)
				date_eng = 1;
		}
		else
		{
			if(date_eng > 1)
				date_eng--;
			else
				date_eng = 31;
		}
	}
	else if(engineering_mode_setup_item == 4)
	{
		if(add == 1)
		{
			day_eng++;
			if(day_eng > 6)
				day_eng = 0;
		}
		else
		{
			if(day_eng > 0)
				day_eng--;
			else
				day_eng = 6;
		}
	}
	else if(engineering_mode_setup_item == 5)
	{
		if(add == 1)
		{
			hour_eng++;
			if(hour_eng > 23)
				hour_eng = 0;
		}
		else
		{
			if(hour_eng > 0)
				hour_eng--;
			else
				hour_eng = 23;
		}
	}
	else if(engineering_mode_setup_item == 6)
	{
		if(add == 1)
		{
			minutes_eng++;
			if(minutes_eng > 59)
				minutes_eng = 0;
		}
		else
		{
			if(minutes_eng > 0)
				minutes_eng--;
			else
				minutes_eng = 59;
		}
	}
	else if(engineering_mode_setup_item == 7)
	{
		if(add == 1)
		{
			seconds_eng++;
			if(seconds_eng > 59)
				seconds_eng = 0;
		}
		else
		{
			if(seconds_eng > 0)
				seconds_eng--;
			else
				seconds_eng = 59;
		}
	}
	else if(engineering_mode_setup_item == 8)
	{
		if(add == 1)
		{
			SelectedLanguage_eng++;
			if(SelectedLanguage_eng > 2)
				SelectedLanguage_eng = 0;
		}
		else
		{
			if(SelectedLanguage_eng > 0)
				SelectedLanguage_eng--;
			else
				SelectedLanguage_eng = 2;
		}
	}
	else
	{
		xil_printf("modify_current_setup_value unknown item = %d xxxx\n\r", engineering_mode_setup_item);
	}
	refresh_current_setup_value();
	return;
}

void refresh_current_setup_value0(void)
{
    char str[40];
	font_t font = gdispOpenFont("iskpota232");

	if(flag_engineering_mode == TRUE)
	{
	    if(engineering_mode_setup_item == 1)
	    {
	    	sprintf(str, "%ld", year_eng + 1900 + 119);
			gdispFillArea(420 + 150, 250, 100, 40, Black);
			gdispFillString(420 + 150, 250, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 2)
	    {
	    	sprintf(str, "%d", month_eng);
			gdispFillArea(420 + 150, 350, 100, 40, Black);
			gdispFillString(420 + 150, 350, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 3)
	    {
	    	sprintf(str, "%d", date_eng);
	    	gdispFillArea(420 + 150, 450, 100, 40, Black);
	    	gdispFillString(420 + 150, 450, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 4)
	    {
			switch(day_eng)
			{
			case 0:		sprintf(str, "%s", "Sun");	break;
			case 1:		sprintf(str, "%s", "Mon");	break;
			case 2:		sprintf(str, "%s", "Tue");	break;
			case 3:		sprintf(str, "%s", "Wed");	break;
			case 4:		sprintf(str, "%s", "Thu");	break;
			case 5:		sprintf(str, "%s", "Fri");	break;
			case 6:		sprintf(str, "%s", "Sat");	break;
			default:	sprintf(str, "%s", "xxx");	break;
			}
			gdispFillArea(420 + 150, 550, 100, 40, Black);
	    	gdispFillString(420 + 150, 550, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 5)
	    {
	    	sprintf(str, "%d", hour_eng);
	    	gdispFillArea(420 + 150, 650, 100, 40, Black);
	    	gdispFillString(420 + 150, 650, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 6)
	    {
	    	sprintf(str, "%d", minutes_eng);
	    	gdispFillArea(420 + 150, 750, 100, 40, Black);
	    	gdispFillString(420 + 150, 750, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 7)
	    {
	    	sprintf(str, "%d", seconds_eng);
	    	gdispFillArea(420 + 150, 850, 100, 40, Black);
	    	gdispFillString(420 + 150, 850, str, font, White, Red);
	    }
	    else if(engineering_mode_setup_item == 8)
	    {
			switch(SelectedLanguage_eng)
			{
			case 0:		sprintf(str, "%s", "T. Chinese");	break;
			case 1:		sprintf(str, "%s", "S. Chinese");	break;
			case 2:		sprintf(str, "%s", "English");		break;
			default:	sprintf(str, "%s", "xxx");		break;
			}
			gdispFillArea(1620, 250, 150, 40, Black);
	    	gdispFillString(1620, 250, str, font, White, Red);
	    }
	}
	return;
}

void refresh_current_setup_value(void)
{
	refresh_current_setup_value0();
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		refresh_current_setup_value0();
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	}
	return;
}

void apply_current_setting(void)
{
	u8 type;
	int data;

	if(engineering_mode_setup_item == 1)
	{
		type = RTC_YEAR;
		data = (u8)year_eng;
	}
	else if(engineering_mode_setup_item == 2)
	{
		type = RTC_MON;
		data = month_eng;
	}
	else if(engineering_mode_setup_item == 3)
	{
		type = RTC_MD;
		data = date_eng;
	}
	else if(engineering_mode_setup_item == 4)
	{
		type = RTC_WD;
		data = day_eng;
	}
	else if(engineering_mode_setup_item == 5)
	{
		type = RTC_HH;
		data = hour_eng;
	}
	else if(engineering_mode_setup_item == 6)
	{
		type = RTC_MM;
		data = minutes_eng;
	}
	else if(engineering_mode_setup_item == 7)
	{
		type = RTC_SS;
		data = seconds_eng;
	}
	else if(engineering_mode_setup_item == 8)
	{
		SelectedLanguage = SelectedLanguage_eng;
	}
	else
	{
		xil_printf("apply_current_setting unknown item = %d xxxx\n\r", engineering_mode_setup_item);
		return;
	}
	if(engineering_mode_setup_item < 8)
		XIicPs_SetRTCData(&Iic, type, data);
	return;
}

void confirm_language_item(void)
{
    char str[40];
	font_t font = gdispOpenFont("iskpota232");

	switch(SelectedLanguage)
	{
	case 0:		sprintf(str, "%s", "T. Chinese");	break;
	case 1:		sprintf(str, "%s", "S. Chinese");	break;
	case 2:		sprintf(str, "%s", "English");		break;
	default:	sprintf(str, "%s", "xxx");			break;
	}
	gdispFillArea(1620, 250, 150, 40, Black);
	gdispDrawString(1620, 250, str, font, Red);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	gdispFillArea(1620, 250, 150, 40, Black);
	gdispDrawString(1620, 250, str, font, Red);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	return;
}

#ifdef USE_PREVENT_REUSE
void forbid_video(void)
{
	char str[40];
	switch(flag_video_status)
	{
	case VIDEO_OK:							sprintf(str, "VIDEO_OK\n");break;
	case VIDEO_FORBID_ALL:					sprintf(str, "VIDEO_FORBID_ALL\n");break;
	case VIDEO_FORBID_DIFFERENT_CAMERA:		sprintf(str, "VIDEO_FORBID_DIFFERENT_CAMERA\n");break;
	case VIDEO_FORBID_POWEROFF_LONG_1M:		sprintf(str, "VIDEO_FORBID_POWEROFF_LONG_1M\n");break;
	case VIDEO_FORBID_POWEROFF_LONG_1M30M:	sprintf(str, "VIDEO_FORBID_POWEROFF_LONG_1M30M\n");break;
	case VIDEO_FORBID_POWEROFF_LONG_30M:	sprintf(str, "VIDEO_FORBID_POWEROFF_LONG_30M\n");break;
	case VIDEO_FORBID_PULL_OUT_LONG_1M:		sprintf(str, "VIDEO_FORBID_PULL_OUT_LONG_1M\n");break;
	case VIDEO_FORBID_PULL_OUT_LONG_30M:	sprintf(str, "VIDEO_FORBID_PULL_OUT_LONG_30M\n");break;
	default:								sprintf(str, "unknown video status : %d\n", (int)flag_video_status);break;
	}
	debug_console_print(str);
	flag_forbid_video = TRUE;
	flag_forbid_video_old = TRUE;
	xil_printf("forbid_video flag_video_status = %d\n\r", flag_video_status);
	preload_forbid_picture_to_memory(flag_video_status);
	enable_camera(0);
	RequestShowPicture2(3);
	flag_updateShowCameraDate = 1;
	time_tick = 0;
	start_time_total = 0;
	stop_time_total = 0;
	write_camera_serial_to_eeprom();
	return;
}
#endif

void console_test(void)
{
	int i;
	/* initialize and clear the display */
	//gfxInit();

	/* Set a font */
	//gwinSetDefaultFont(gdispOpenFont("*"));
	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	/* create the console window */
	GWindowInit		wi;

	gwinClearInit(&wi);
	wi.show = TRUE;
	wi.x = gdispGetWidth() / 2 - 200;
	wi.y = gdispGetHeight()-140;
	wi.width = 600;
	wi.height = 120;

	xil_printf("W = %d, H = %d\n\r", wi.width, wi.height);
	GW = gwinConsoleCreate(0, &wi);

	/* Set the fore- and background colors for the console */
	gwinSetColor(GW, White);
	gwinSetBgColor(GW, Purple);
	gwinClear(GW);

	gwinPrintf(GW, "gwinConsoleCreate size = %d X %d\n", wi.width, wi.height);

	gwinPrintf(GW, "AAAAAAAAAAAAAAA\n");
	gwinPrintf(GW, "BBBBBBBBBBBBBBBB\n");
	gwinPrintf(GW, "\n");

	for(i = 0; i < 25 ; i++)
	{
		gwinPrintf(GW, "CCCCCCCCCCCCC %2d\n", i);
		sleep(1);
	}
	return;
}

void font_test()
{
	GWidgetInit	wi;

	// Apply some default values for GWIN
	gwinWidgetClearInit(&wi);

	gwinSetDefaultFont(gdispOpenFont("iskpota232"));

	wi.g.show = TRUE;
	//wi.customStyle->background = 0xffffffff;
	wi.g.width = WIDTH1;
	wi.g.height = THICK1;
	wi.g.x = 200;
	wi.g.y = 600;
	wi.text = "Draw Test";
	ghLabel6 = gwinLabelCreate(0, &wi);

	font_t font;

	font = gdispOpenFont("iskpota232");

    gdispDrawChar(400, 500, 'A', font, Blue);
    gdispDrawString(500, 500, "Aries", font, Green);

    gdispFillChar(400, 600, 'B', font, Red, Purple);
    gdispFillString(500, 600, "Bravo", font, White, Olive);

	int xx = 750;
	int yy = 30;
	int dd = 30;

	font = gdispOpenFont("iskpota224");gdispDrawString(xx, yy, "iskpota224", font, Red);yy+=dd;
	font = gdispOpenFont("iskpota228");gdispDrawString(xx, yy, "iskpota228", font, Red);yy+=dd;
	font = gdispOpenFont("iskpota232");gdispDrawString(xx, yy, "iskpota232", font, Red);yy+=dd;
	font = gdispOpenFont("iskpota236");gdispDrawString(xx, yy, "iskpota236", font, Red);yy+=dd;
	font = gdispOpenFont("iskpota240");gdispDrawString(xx, yy, "iskpota240", font, Red);yy+=dd;

	font = gdispOpenFont("DejaVu*");gdispDrawString(xx, yy, "DejaVu*", font, Red);yy+=dd;
	font = gdispOpenFont("DejaVuSans16");gdispDrawString(xx, yy, "DejaVuSans16", font, Red);yy+=dd;

	//	font not found
	font = gdispOpenFont("Archangelsk Regular 12");gdispDrawString(xx, yy, "Archangelsk Regular 12 default font xxx", font, Red);yy+=dd;

	font = gdispOpenFont("DejaVuSans10");gdispDrawString(xx, yy, "DejaVuSans10", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans12");gdispDrawString(xx, yy, "DejaVuSans12", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans12_aa");gdispDrawString(xx, yy, "DejaVuSans12_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSansBold12");gdispDrawString(xx, yy, "DejaVuSansBold12", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans12_aa");gdispDrawString(xx, yy, "DejaVuSans12_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSansBold12_aa");gdispDrawString(xx, yy, "DejaVuSansBold12_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans16");gdispDrawString(xx, yy, "DejaVuSans16", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans16_aa");gdispDrawString(xx, yy, "DejaVuSans16_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans20");gdispDrawString(xx, yy, "DejaVuSans20", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans20_aa");gdispDrawString(xx, yy, "DejaVuSans20_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans24");gdispDrawString(xx, yy, "DejaVuSans24", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans24_aa");gdispDrawString(xx, yy, "DejaVuSans24_aa", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans32");gdispDrawString(xx, yy, "DejaVuSans32", font, Green);yy+=dd;
	font = gdispOpenFont("DejaVuSans32_aa");gdispDrawString(xx, yy, "DejaVuSans32_aa", font, Green);yy+=dd;

	font = gdispOpenFont("fixed_5x8");gdispDrawString(xx, yy, "fixed_5x8", font, Blue);yy+=dd;
	font = gdispOpenFont("fixed_7x14");gdispDrawString(xx, yy, "fixed_7x14", font, Blue);yy+=dd;
	font = gdispOpenFont("fixed_10x20");gdispDrawString(xx, yy, "fixed_10x20", font, Blue);yy+=dd;
	font = gdispOpenFont("UI1");gdispDrawString(xx, yy, "UI1", font, Blue);yy+=dd;
	font = gdispOpenFont("UI1 Double");gdispDrawString(xx, yy, "UI1 Double", font, Blue);yy+=dd;
	font = gdispOpenFont("UI1 Narrow");gdispDrawString(xx, yy, "UI1 Narrow", font, Blue);yy+=dd;
	font = gdispOpenFont("UI2");gdispDrawString(xx, yy, "UI2", font, Blue);yy+=dd;
	font = gdispOpenFont("UI2 Double");gdispDrawString(xx, yy, "UI2 Double", font, Blue);yy+=dd;
	font = gdispOpenFont("UI2 Narrow");gdispDrawString(xx, yy, "UI2 Narrow", font, Blue);yy+=dd;
	font = gdispOpenFont("LargeNumbers");gdispDrawString(xx, yy, "LargeNumbers", font, Blue);yy+=dd;

	font = gdispOpenFont("kaiu");gdispDrawString(xx, yy, "kaiu", font, Blue);yy+=dd;
	//font = gdispOpenFont("kaiu");gdispDrawString(xx, yy, "群�??�電", font, Blue);yy+=dd;

	return;
}

void ims_printf0( const char8 *ctrl1)
{
	/*
	char8 *ctrl = (char8 *)ctrl1;

    //va_start( argp, ctrl1);

    while ((ctrl != NULL) && (*ctrl != (char8)0)) {
*/
        /* move format string chars to buffer until a  */
        /* format control is found.                    */
	/*
        if (*ctrl != '%') {
			ctrl += 1;
            continue;
        }
    }

    xil_printf(ctrl1);
    */

	GWidgetInit	wi;

	gwinWidgetClearInit(&wi);
	wi.g.show = TRUE;

	// Create label
	wi.text = "";
	sprintf((char *)wi.text, "%s", ctrl1);
	wi.g.width = WIDTH3; wi.g.height = THICK1; wi.g.x = CAMERA_INFO_POS_X, wi.g.y = CAMERA_INFO_POS_Y1 + THICK1;
	ghLabel6 = gwinLabelCreate(0, &wi);

    return;
}

void ims_printf( const char8 *ctrl1)
{
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
	ims_printf0(ctrl1);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
	ims_printf0(ctrl1);
    return;
}

void enable_camera(int enable)
{
	unsigned char DongleData;
	unsigned int DongleAddr;

	/*
	DongleAddr = 0x0100;
	DongleData = dongle_read_data(DongleAddr);
	if(enable == 1)
	{
		DongleData = 1;
	}
	else
	{
		DongleData = 0;
	}
	dongle_write_data(DongleAddr, DongleData);
	*/

	DongleAddr = 0x5080;
	DongleData = dongle_read_data(DongleAddr);
	//xil_printf("addr = 0x%x, data = 0x%x test pattern registers\n\r", DongleAddr, DongleData);
	usleep(2000);
	if(enable == 1)
	{
		DongleData = 0;
	}
	else
	{
		DongleData = (1<<7) | (0 << 2);
	}
	dongle_write_data(DongleAddr, DongleData);
	return;
}

void write_camera_use_time_to_camera(int minute)
{
	int i;
	int odd;
	if(minute >= 30)
		minute = 30;
	xil_printf("\n\rwrite_camera_use_time, minute = %d\n\r", minute);	//needed
	odd = minute % 2;
	minute = (minute - 1) / 2;
	//xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(DATE_PAGE2);
	usleep(DELAY);
	//xil_printf("\n\rPROG_1PAGE\n\r");
	for(i = 0; i < 0x10; i++)
	{
		page_data[i] = 0;
	}
	page_data[15] = 0xcf;	//camera fpga
	if(odd == 1)
		page_data[minute] = 0x0A;
	else
		page_data[minute] = 0xAA;

	xil_printf("write pos = %d odd = %d value = %d", minute, odd, page_data[minute]);
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");	//needed
	ENABLE_CONFIGURE(0);
	return;
}

void write_camera_nouse_time_to_eeprom(int minute)
{
	//minute += camera_nouse_time_from_eeprom;
	XIicPs_WriteEepromData(25, 64 + minute - 1, 1, (u8*)"B");
	return;
}

int read_camera_use_time_from_camera(void)
{
	int page = DATE_PAGE2;
	int i;
	int use_time;
	xil_printf("\n\rread_camera_fpga, page = 0x%x = %d\n\r", page, page);
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(page);
	//usleep(100);
	READ_1PAGE();
	ENABLE_CONFIGURE(0);

	/*
	xil_printf("USE : %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r",
			page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7],
			page_data[8], page_data[9], page_data[10], page_data[11], page_data[12], page_data[13], page_data[14], page_data[15]);
			*/
	for(i = 0; i < 0x10; i++)
	{
		if(page_data[i] == 0x00)
		{
			break;
		}
	}
	if(i == 0)
	{
		//xil_printf("use time : 0 minute\n\r");
		use_time = 0;
	}
	else
	{
		if(i == 16)
			i = 15;
		if(page_data[i - 1] == 0x0A)
		{
			//xil_printf("use time : %d minutes\n\r", i * 2 -1);
			use_time = i * 2 -1;
		}
		else
		{
			//xil_printf("use time : %d minutes\n\r", i * 2);
			use_time = i * 2;
		}
	}
	return use_time;
}

void read_camera_fpga(uint16_t page)
{
	int i;
	xil_printf("\n\rread_camera_fpga, page = 0x%x = %d\n\r", page, page);
	ENABLE_CONFIGURE(1);
	SET_ADDRESS(page);
	//usleep(100);
	READ_1PAGE();
	ENABLE_CONFIGURE(0);

	xil_printf("DATA : %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r",
			page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7],
			page_data[8], page_data[9], page_data[10], page_data[11], page_data[12], page_data[13], page_data[14], page_data[15]);

	//return;

	if(page == SN_PAGE)
	{
		//xil_printf("S/N : %02X%02X-%02X%02X-%02X%02X-%02X%02X\n\r", page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7]);
	}
	else if(page == DATE_PAGE2)
	{
		/*
		xil_printf("USE : %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r",
				page_data[0], page_data[1], page_data[2], page_data[3], page_data[4], page_data[5], page_data[6], page_data[7],
				page_data[8], page_data[9], page_data[10], page_data[11], page_data[12], page_data[13], page_data[14], page_data[15]);
		*/
		for(i = 0; i < 0x10; i++)
		{
			if(page_data[i] == 0x00)
			{
				break;
			}
		}
		if(i == 0)
		{
			//xil_printf("use time : 0 minute\n\r");
		}
		else
		{
			if(i == 16)
				i = 15;
			/*
			if(page_data[i - 1] == 0x0F)
				xil_printf("use time : %d minutes\n\r", i*2 -1);
			else
				xil_printf("use time : %d minutes\n\r", i*2);
			*/
		}
	}
	else
	{
		for(i = 0; i < 0x10; i++)
		{
			if(isprint(RecvBuffer[i]))
				xil_printf("%c", page_data[i]);
			else
			{
				xil_printf("^");
				//xil_printf("%02x", page_data[i]);
			}
			xil_printf("%02x ", page_data[i]);
		}
		xil_printf("\n\r");
	}
	return;
}

#ifdef USE_PREVENT_REUSE
void write_date_to_eeprom(void)
{
	xil_printf("call XIicPs_WriteEepromData 25 for date\t%s\n\r", asctime(&rtc));
	asctime(&rtc);

	xil_printf("year : %d\n\r", rtc.tm_year + 2019);
	xil_printf("month : %d\n\r", rtc.tm_mon);
	xil_printf("mday : %d\n\r", rtc.tm_mday);
	xil_printf("wday : %d\n\r", rtc.tm_wday);
	xil_printf("hour : %d\n\r", rtc.tm_hour);
	xil_printf("minute : %d\n\r", rtc.tm_min);
	xil_printf("second : %d\n\r", rtc.tm_sec);

	page_data[0] = rtc.tm_year;
	page_data[1] = rtc.tm_mon + 1;
	page_data[2] = rtc.tm_mday;
	page_data[3] = rtc.tm_wday;
	page_data[4] = rtc.tm_hour;
	page_data[5] = rtc.tm_min;
	page_data[6] = rtc.tm_sec;
	XIicPs_WriteEepromData(25, 0, 7, page_data);
	return;
}

void write_invalid_to_eeprom(int forbid_id)
{
	if((forbid_id < VIDEO_OK) || (forbid_id > VIDEO_FORBID_PULL_OUT_LONG_30M))
	{
		xil_printf("write_invalid_to_eeprom, illegal forbid_id = %d, abort...\n\r", forbid_id);
		return;
	}

	xil_printf("call XIicPs_WriteEepromData 25 for invalid\t%s\n\r", asctime(&rtc));
	asctime(&rtc);

	page_data[0] = 'X';
	page_data[1] = 'X';
	page_data[2] = 'X';
	page_data[3] = 'X';
	page_data[4] = 'X';
	page_data[5] = forbid_id;
	XIicPs_WriteEepromData(25, 56, 6, page_data);
	return;
}

void read_date_from_eeprom(void)
{
	int i = 0;
	int state;
	//xil_printf("\n\rXIicPs_ReadEepromPage, page = %d\n\r", 24);
	int page = 24;
	int addr = 0;
	int len = 7;
	u8 RecvBuffer[7];

	xil_printf("read eeprom data XIicPs_ReadEepromData, page = %d, addr = %d, len = %d\n\r", page, addr, len);
	state = XIicPs_ReadEepromData(page, addr, len, RecvBuffer);
	xil_printf("data: \t0x");
	for (i = 0; i < len; i++) {
		xil_printf("%02x ", RecvBuffer[i]);
	}
	xil_printf("\n\r");

	if(state == XST_FAILURE)
	{
		xil_printf("xxxxxxx I2C fail, try again\n\r");
		usleep(1000);
		state = XIicPs_ReadEepromData(page, addr, len, RecvBuffer);
	}

	u32 year = RecvBuffer[0] + 1900;
	u8 month = RecvBuffer[1];
	u8 mday = RecvBuffer[2];
	u8 wday = RecvBuffer[3];
	u8 hour = RecvBuffer[4];
	u8 minutes = RecvBuffer[5];
	u8 seconds = RecvBuffer[6];

	xil_printf("get data: %d/%d/%d %d %02d:%02d:%02d\r\n", year, month, mday, wday, hour, minutes, seconds);
	xil_printf("Date: %02d/%02d/%02d ", year, month, mday);
	switch(wday)
	{
	case 0:		xil_printf("Sun");	break;
	case 1:		xil_printf("Mon");	break;
	case 2:		xil_printf("Tue");	break;
	case 3:		xil_printf("Wed");	break;
	case 4:		xil_printf("Thu");	break;
	case 5:		xil_printf("Fri");	break;
	case 6:		xil_printf("Sat");	break;
	default:	xil_printf("xxx");	break;
	}
	xil_printf(" %02d:%02d:%02d\t\t", hour, minutes, seconds);
	return;
}

void write_camera_use_time_to_eeprom(int minute)
{
	//xil_printf("write_camera_use_time_to_eeprom minute = %d\n\r", minute);
	//minute += camera_use_time_from_eeprom;
	XIicPs_WriteEepromData(25, 128 + minute - 1, 1, (u8*)"A");
	return;
}

void write_system_uptime_to_eeprom(int minute)
{
	//xil_printf("write_system_uptime_to_eeprom minute = %d\n\r", minute);
	if((minute % 1024) == 0)
	{
		xil_printf("call XIicPs_WriteEepromData 28 at %s\n\r", asctime(&rtc));
		XIicPs_EraseEepromPage(28);
		xil_printf("year : %d\n\r", rtc.tm_year + 1900);
		xil_printf("month : %d\n\r", rtc.tm_mon);
		xil_printf("mday : %d\n\r", rtc.tm_mday);
		xil_printf("wday : %d\n\r", rtc.tm_wday);
		xil_printf("hour : %d\n\r", rtc.tm_hour);
		xil_printf("minute : %d\n\r", rtc.tm_min);
		xil_printf("second : %d\n\r", rtc.tm_sec);

		page_data[0] = rtc.tm_year;
		page_data[1] = rtc.tm_mon + 1;
		page_data[2] = rtc.tm_mday;
		page_data[3] = rtc.tm_wday;
		page_data[4] = rtc.tm_hour;
		page_data[5] = rtc.tm_min;
		page_data[6] = rtc.tm_sec;
		XIicPs_WriteEepromData(28, 0, 7, page_data);
	}
	else
	{
		xil_printf("write A to %d at %s\n\r", minute, asctime(&rtc));
		XIicPs_WriteEepromData(28, 16 + ((minute - 1) % 1024), 1, (u8*)"A");
	}
	return;
}
#endif

void debug_console_init(void)
{
#ifdef USE_DEBUG_CONSOLE
	/* Set a font */
	gwinSetDefaultFont(gdispOpenFont("DejaVuSans24_aa"));

	/* create the console window */
	GWindowInit		wi0;
	GWindowInit		wi1;

	gwinClearInit(&wi0);
	gwinClearInit(&wi1);
	wi0.show = TRUE;
	wi1.show = TRUE;
	wi0.x = 20;
	wi1.x = 20;
	wi0.y = 580;
	wi1.y = 580;
	wi0.width = 660;
	wi1.width = 660;
	wi0.height = 490;
	wi1.height = 490;

	xil_printf("W = %d, H = %d\n\r", wi0.width, wi0.height);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	GW0a = gwinConsoleCreate(0, &wi0);
	/* Set the fore- and background colors for the console */
	//gwinSetColor(GW0a, White);
	//gwinSetBgColor(GW0a, Black);
	gwinClear(GW0a);

	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
	GW1a = gwinConsoleCreate(0, &wi1);
	/* Set the fore- and background colors for the console */
	//gwinSetColor(GW1a, White);
	//gwinSetBgColor(GW1a, Black);
	gwinClear(GW1a);
#endif
	return;
}

void debug_console_print(const char8 *ctrl1)
{
#ifdef USE_DEBUG_CONSOLE
	if(flag_enable_debug_console == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
		gwinSetColor(GW0a, White);
		gwinSetBgColor(GW0a, Purple);
		gwinPrintf(GW0a, ctrl1);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
		gwinSetColor(GW1a, White);
		gwinSetBgColor(GW1a, Purple);
		gwinPrintf(GW1a, ctrl1);
	}
#endif
	return;
}

void debug_console_print_time(unsigned long s)
{
#ifdef USE_DEBUG_CONSOLE
	if(flag_enable_debug_console == TRUE)
	{
		char str[40];

		if(s >= 86400)
		{
			//sprintf(str, "%ld Days, %ld Hours, %ld Minutes, %ld Seconds\n\r", s/86400, (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
			sprintf(str, "%ldd%ldh%ldm%lds\n\r", s/86400, (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		}
		else if(s >= 3600)
		{
			//sprintf(str, "%ld Hours, %ld Minutes, %ld Seconds\n\r", (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
			sprintf(str, "%ldh%ldm%lds\n\r", (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		}
		else if(s >= 60)
		{
			//sprintf(str, "%ld Minutes, %ld Seconds\n\r", ((s%86400)%3600)/60, ((s%86400)%3600)%60);
			sprintf(str, "%ldm%lds\n\r", ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		}
		else
		{
			//sprintf(str, "%ld Seconds\n\r", ((s%86400)%3600)%60);
			sprintf(str, "%lds\n\r", ((s%86400)%3600)%60);
		}
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
		gwinSetColor(GW0a, White);
		gwinSetBgColor(GW0a, Purple);
		gwinPrintf(GW0a, str);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
		gwinSetColor(GW1a, White);
		gwinSetBgColor(GW1a, Purple);
		gwinPrintf(GW1a, str);
	}
#endif
	return;
}

void debug_console_close(void)
{
#ifdef USE_DEBUG_CONSOLE
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(0));
	gwinSetBgColor(GW0a, Black);
	gwinClear(GW0a);
	gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1));
	gwinSetBgColor(GW1a, Black);
	gwinClear(GW1a);
#endif
	return;
}

unsigned long get_total_sec(struct tm t)
{
	unsigned long total_sec = 0;
	int yday;
	total_sec += t.tm_sec;
	total_sec += t.tm_min * 60;
	total_sec += t.tm_hour * 60 * 60;
	//xil_printf("tm_year = %d\n\r", t.tm_year);
	t.tm_year -= 119;
	//xil_printf("tm_year = %d tm_mon = %d\n\r", t.tm_year, t.tm_mon);
	switch(t.tm_mon + 1)
	{
		case 1:		yday = t.tm_mday;break;
		case 2:		yday = t.tm_mday + 31;break;
		case 3:		yday = t.tm_mday + 31 + 28;break;
		case 4:		yday = t.tm_mday + 31 + 28 + 31;break;
		case 5:		yday = t.tm_mday + 31 + 28 + 31 + 30;break;
		case 6:		yday = t.tm_mday + 31 + 28 + 31 + 30 + 31;break;
		case 7:		yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30;break;
		case 8:		yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30 + 31;break;
		case 9:		yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31;break;
		case 10:	yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30;break;
		case 11:	yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;break;
		case 12:	yday = t.tm_mday + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30;break;
		default:	yday = t.tm_mday;break;
	}
	yday += (t.tm_year + 3 - 1) / 4;	//till last year
	if(((t.tm_year + 3) % 4) == 0)
	{
		if(t.tm_mon > 1)
			yday++;
	}
	yday += t.tm_year * 365;
	//xil_printf("yday = %d\n\r", yday);
	total_sec += (yday - 1) * 60 * 60 * 24;
	return total_sec;
}

int diff_time(struct tm t1, struct tm t2)
{
	unsigned long total_sec1 = 0;
	unsigned long total_sec2 = 0;

	total_sec1 = get_total_sec(t1);
	xil_printf("total_sec1 = %ld\n\r", total_sec1);

	total_sec2 = get_total_sec(t2);
	xil_printf("total_sec2 = %ld\n\r", total_sec2);

	if(total_sec1 > total_sec2)
	{
		xil_printf("tmp1 = %ld\n\r", total_sec1 - total_sec2);
		return (total_sec1 - total_sec2);
	}
	else
	{
		xil_printf("tmp2 = %ld\n\r", total_sec2 - total_sec1);
		return (total_sec2 - total_sec1);
	}
}

#ifdef USE_PREVENT_REUSE
unsigned long get_time_interval(int index)
{
	struct tm rtc_base;
	struct tm rtc_camera;
	unsigned long difftime_now = 0;
	unsigned long difftime_camera = 0;
	unsigned long difftime = 0;
	int ret = 1;

	if(index > CURRENT_TIME)
	{
		xil_printf("get_time_interval fail, unknown index = %d\n\r", index);
		return 0;
	}

	/*
	xil_printf("now data: %d/%d/%d %d %02d:%02d:%02d\r\n",
		rtc.tm_year + 1900, rtc.tm_mon + 1, rtc.tm_mday, rtc.tm_wday, rtc.tm_hour, rtc.tm_min, rtc.tm_sec);
	*/

	rtc_base.tm_year   = 0 + 119;
	rtc_base.tm_mon    = 0;	//Jan
	rtc_base.tm_mday   = 1;
	rtc_base.tm_wday   = 1;
	rtc_base.tm_hour   = 0;
	rtc_base.tm_min    = 0;
	rtc_base.tm_sec    = 0;

	difftime_now = diff_time(rtc, rtc_base);

	if(index == CURRENT_TIME)
	{
		return difftime_now;
	}

	/*
	xil_printf("old data: %d/%d/%d %d %02d:%02d:%02d\r\n",
			rtc_base.tm_year + 1900, rtc_base.tm_mon + 1, rtc_base.tm_mday, rtc_base.tm_wday, rtc_base.tm_hour, rtc_base.tm_min, rtc_base.tm_sec);
	xil_printf("difftime_now = %ld\n\r", difftime_now);
	xil_printf("\n\r\n\r");
	*/

	u32 year;
	u8 month;
	u8 mday;
	u8 wday;
	u8 hour;
	u8 minutes;
	u8 seconds;

	if(index == CAMERA_1MIN)
	{
		ret = read_date_from_camera(DATE_PAGE1);	//camera 0xB
		if(ret == 1)
			flag_camera_status = CAMERA_1M;
		else
			flag_camera_status = CAMERA_NEW;
	}
	else if(index == CAMERA_30MIN)
	{
		ret = read_date_from_camera(DATE_PAGE3);	//camera 0xD
		if(ret == 1)
			flag_camera_status = CAMERA_30M;
	}
	else if((index == EEPROM_1MIN) || (index == EEPROM_30MIN))
	{
		read_camera_info_from_eeprom();
	}
	else if(index == LAST_POWER_OFF)
	{
		read_last_power_off_time_from_eeprom();
	}

	if(ret == 1)
	{
		if((index == CAMERA_1MIN) || (index == CAMERA_30MIN))
		{
			year = page_data[0];
			month = page_data[1];
			mday = page_data[2];
			wday = page_data[3];
			hour = page_data[4];
			minutes = page_data[5];
			seconds = page_data[6];
		}
		else// if((index == EEPROM_1MIN) || (index == EEPROM_30MIN) || (index == LAST_POWER_OFF))
		{
			if(eeprom_page_buffer[1] == 0xFF)
			{
				//xil_printf("No data in EEPROM Page 25/28\n\r");
				return 0;
			}
			year = eeprom_page_buffer[0];
			month = eeprom_page_buffer[1];
			mday = eeprom_page_buffer[2];
			wday = eeprom_page_buffer[3];
			hour = eeprom_page_buffer[4];
			minutes = eeprom_page_buffer[5];
			seconds = eeprom_page_buffer[6];

			if(index == LAST_POWER_OFF)
			{
				xil_printf("LAST_POWER_OFF\n\r");
				xil_printf("year = %d\n\r", year);
				xil_printf("month = %d\n\r", month);
				xil_printf("day = %d\n\r", mday);
				xil_printf("wday = %d\n\r", wday);
				xil_printf("hour = %d\n\r", hour);
				xil_printf("minute = %d\n\r", minutes);
				xil_printf("second = %d\n\r", seconds);
			}

		}

		/*
		xil_printf("USED : %02d/%02d/%04ld %d %02d:%02d:%02d\n\r", month, mday, year, wday, hour, minutes, seconds);

		xil_printf("year = %d\n\r", year);
		xil_printf("month = %d\n\r", month);
		xil_printf("day = %d\n\r", mday);
		xil_printf("wday = %d\n\r", wday);
		xil_printf("hour = %d\n\r", hour);
		xil_printf("minute = %d\n\r", minutes);
		xil_printf("second = %d\n\r", seconds);
		*/
		rtc_camera.tm_year   = year;
		rtc_camera.tm_mon    = month - 1;
		rtc_camera.tm_mday   = mday;
		rtc_camera.tm_wday   = wday;
		rtc_camera.tm_hour   = hour;
		rtc_camera.tm_min    = minutes;
		rtc_camera.tm_sec    = seconds;

		xil_printf("new data: %d/%d/%d %d %02d:%02d:%02d\r\n",
				rtc_camera.tm_year + 1900, rtc_camera.tm_mon + 1, rtc_camera.tm_mday, rtc_camera.tm_wday, rtc_camera.tm_hour, rtc_camera.tm_min, rtc_camera.tm_sec);

		xil_printf("base data: %d/%d/%d %d %02d:%02d:%02d\r\n",
				rtc_base.tm_year + 1900, rtc_base.tm_mon + 1, rtc_base.tm_mday, rtc_base.tm_wday, rtc_base.tm_hour, rtc_base.tm_min, rtc_base.tm_sec);

		difftime_camera = diff_time(rtc_camera, rtc_base);
		if(difftime_now < difftime_camera)
		{
			difftime = 0;
			xil_printf("time skew, let difftime = %ld\n\r", difftime);
		}
		else
		{
			xil_printf("difftime_now = %ld difftime_now\n\r", difftime);
			xil_printf("difftime_camera = %ld\n\r", difftime_camera);
			difftime = difftime_now - difftime_camera;
		}

		if(difftime > 10)
		{
			difftime -= 10;
		}
		else
		{
			xil_printf("xxxxxxxxxxxxxxxx  difftime = %ld\n\r", difftime);
		}

		xil_printf("difftime = %ld from now to first A\n\r", difftime);

		if(index == EEPROM_30MIN)
		{
			//xil_printf("camera_use_time_from_eeprom = %d\n\r", camera_use_time_from_eeprom);
			if(camera_use_time_from_eeprom > 1)
				difftime -= (camera_use_time_from_eeprom - 1) * 60;
		}
		else if(index == LAST_POWER_OFF)
		{
			xil_printf("system_power_on_count_from_eeprom = %d\n\r", system_power_on_count_from_eeprom);
			if(system_power_on_count_from_eeprom >= 1)
			{
				if(difftime < (system_power_on_count_from_eeprom - 1) * 60 * 1)
				{
					debug_console_print("XXXXXXXXXXXXXXXXXX");
					xil_printf("difftime XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  system_power_on_count_from_eeprom = %d\n\r", system_power_on_count_from_eeprom);
					//difftime = (system_power_on_count_from_eeprom - 1) * 60 * 1 - difftime;
					difftime = 0;
				}
				else
				{
					difftime -= (system_power_on_count_from_eeprom - 1) * 60 * 1;
				}
			}
		}
		xil_printf("difftime = %ld from now to last A\n\r", difftime);

		//xil_printf("difftime_camera = %ld\n\r", difftime_camera);
		//xil_printf("difftime = %ld seconds\n\r", difftime);
		return difftime;
	}
	else
	{
		xil_printf("New camera\r\n");
		return 0;
	}
}

void print_time(unsigned long s)
{
	if(s >= 86400)
	{
		//xil_printf("%ld Days, %ld Hours, %ld Minutes, %ld Seconds\n\r", s/86400, (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		xil_printf("%ldd%ldh%ldm%lds\n\r", s/86400, (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
	}
	else if(s >= 3600)
	{
		//xil_printf("%ld Hours, %ld Minutes, %ld Seconds\n\r", (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		xil_printf("%ldh%ldm%lds\n\r", (s%86400)/3600, ((s%86400)%3600)/60, ((s%86400)%3600)%60);
	}
	else if(s >= 60)
	{
		//xil_printf("%ld Minutes, %ld Seconds\n\r", ((s%86400)%3600)/60, ((s%86400)%3600)%60);
		xil_printf("%ldm%lds\n\r", ((s%86400)%3600)/60, ((s%86400)%3600)%60);
	}
	else
	{
		//xil_printf("%ld Seconds\n\r", ((s%86400)%3600)%60);
		xil_printf("%lds\n\r", ((s%86400)%3600)%60);
	}
	/*
	if(s >= 86400)
		xil_printf("%d Days, ", s/86400);
	if(s >= 3600)
		xil_printf("%d Hours, ", (s%86400)/3600);
	if(s >= 60)
		xil_printf("%d Minutes, ", ((s%86400)%3600)/60);
	xil_printf("%d Seconds\n\r", ((s%86400)%3600)%60);
	*/
	return;
}

int check_camera_serial(void)
{
	int i;
	char str[40];

	sprintf(str, "sn_old: %02X%02X-%02X%02X-%02X%02X-%02X%02X\n\r", camera_serial_old[0], camera_serial_old[1], camera_serial_old[2], camera_serial_old[3],
			camera_serial_old[4], camera_serial_old[5], camera_serial_old[6], camera_serial_old[7]);
	debug_console_print(str);

	sprintf(str, "sn_new: %02X%02X-%02X%02X-%02X%02X-%02X%02X  ", camera_serial_new[0], camera_serial_new[1], camera_serial_new[2], camera_serial_new[3],
			camera_serial_new[4], camera_serial_new[5], camera_serial_new[6], camera_serial_new[7]);
	debug_console_print(str);

	int camera_serial_the_same = 1;
	for(i = 0; i < 16; i++)
	{
		if(camera_serial_old[i] != camera_serial_new[i])
		{
			camera_serial_the_same = 0;
		}
	}

	if(camera_serial_the_same == 1)
		sprintf(str, "the same\n\r");
	else
		sprintf(str, "different\n\r");
	debug_console_print(str);

	if(camera_serial_the_same == 1)
	{
		flag_same_camera = TRUE;
		return TRUE;
	}
	else
	{
		flag_same_camera = FALSE;
		return FALSE;
	}
}

void show_camera_status(void)
{
	/*
	char str1[40];
	char str2[40];

	switch(flag_camera_status)
	{
	case CAMERA_NEW:	sprintf(str1, "NEW");break;
	case CAMERA_1M:		sprintf(str1, "1MIN");break;
	case CAMERA_30M:	sprintf(str1, "30MIN");break;
	case CAMERA_USED:	sprintf(str1, "USED");break;
	break;				sprintf(str1, "unknown");break;
	}

	if(flag_camera_status == CAMERA_NEW)
	{
		sprintf(str2, "%s  ---- ", str1);
	}
	else
	{
		if(flag_same_camera == TRUE)
			sprintf(str2, "%s  SAME ", str1);
		else if(flag_same_camera == FALSE)
			sprintf(str2, "%s  DIFF ", str1);
	}
	sprintf(str1, "%s   %lds ", str2, camera_plug_interval);
	sprintf(str2, "%s   %lds", str1, last_power_off_time + g_ms_uptime / 1000);
	sprintf(str1, "%s   %dm ", str2, camera_use_time_from_eeprom);
	sprintf(str2, "%s   %dm", str1, camera_nouse_time_from_eeprom);
	sprintf(str1, "%s   %dm\n\r", str2, camera_use_time_from_camera);
	debug_console_print(str1);
	*/
	return;
}

int get_camera_status(void)
{
	int camera_status;
	int ret = 1;
	ret = read_date_from_camera(DATE_PAGE1);	//camera 0xB
	if(ret == 1)
	{
		camera_status = CAMERA_1M;
		ret = read_date_from_camera(DATE_PAGE3);	//camera 0xD
		if(ret == 1)
		{
			camera_status = CAMERA_30M;
		}
		else
		{
			camera_status = CAMERA_1M;
		}
	}
	else
		camera_status = CAMERA_NEW;
	xil_printf("get_camera_status return status = %d\n\r", camera_status);
	return camera_status;
}
#endif

void check_draw_command()
{
	if((draw_command_index != -1) && (draw_command_index != 1) && (draw_command_index != 2) && (draw_command_index != 3))
	{
		return;
	}
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));

		if(draw_command_index == -1)
		{
			clear_layer1(next_framebuffer);
		}
		else
		{
			dma_restore_picture(draw_command_index);
			layer1_blit(pic_sizes[draw_command_index], next_framebuffer);
			layer1_blit_corners(next_framebuffer);
		}
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		draw_command_index = 0;
	}
}

void add_draw_command(int cmd, int pic)
{
	draw_command_index = cmd;
	//draw_command_pic = pic;
}

void updateShowCameraDate(void)
{
	xil_printf("\n\rupdateShowCameraDate\n\r");
	show_camera_date(1);
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		show_camera_date(1);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		show_camera_date(1);
	}
	return;
}

int check_camera_reuse(void)
{
#ifdef USE_PREVENT_REUSE
	xil_printf("\n\rcheck_camera_reuse ST\r\n");
	flag_camera_status = get_camera_status();
	//xil_printf("check_camera_reuse  flag_camera_status = %d\n\r", flag_camera_status);
	if((flag_camera_status < CAMERA_NEW) || (flag_camera_status > CAMERA_USED))
	{
		xil_printf("xxxxxxxxxxxxx  unknown flag_camera_status = %d\n\r", flag_camera_status);
	}

	if(flag_camera_status == CAMERA_NEW)
	{
		flag_check_pull_out_time = FALSE;
	}
	else
	{
		flag_check_pull_out_time = TRUE;
	}

	if(flag_camera_status == CAMERA_NEW)
	{
		xil_printf("check 1: CAMERA_NEW\n\r");
		debug_console_print("CAMERA_NEW\n\r");
		time_tick = 0;
		start_time_total = 0;
		stop_time_total = 0;
		g_updated = 1;
		g_procedure_started = STOP;
		flag_forbid_video = FALSE;
		flag_camera_invalid = FALSE;
		flag_camera_invalid_id = 0;
	}
	else
	{
		xil_printf("check 1 : CAMERA_NOT_NEW\n\r");
		flag_video_status = read_error_code_from_camera();
		if(flag_video_status != VIDEO_OK)
		{
			xil_printf("check 2 : Forbid video, error code written in camera = %d........\n\r", flag_video_status);
			flag_forbid_video = TRUE;
			forbid_video();

			flag_camera_status = get_camera_status();	//for display message
			if((flag_camera_status < 0) || (flag_camera_status > 3))
			{
				xil_printf("xxxxxxxxxxxxx  unknown flag_camera_status = %d\n\r", flag_camera_status);
			}

			read_serial_from_camera();
			show_camera_serial(1);
			if(flag_use_2_framebuffers == TRUE)
			{
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
				show_camera_serial(1);
				gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
				show_camera_serial(1);
			}
		}
		else
		{
			xil_printf("check 2 : no error code\n\r");
			int status;
			int flag_use_the_same_camera = FALSE;
			status = read_serial_from_camera();

			if(status == XST_SUCCESS)
			{
				xil_printf("read_serial_from_camera ok\n\r");
			}
			else
			{
				xil_printf("read_serial_from_camera fail\n\r");
			}

			read_camera_info_from_eeprom();
			flag_use_the_same_camera = check_camera_serial();

			if(flag_use_the_same_camera == FALSE)
			{
				xil_printf("check 3 : serial different, forbid video, old used different camera........\n\r");
				flag_video_status = VIDEO_FORBID_DIFFERENT_CAMERA;
				flag_forbid_video = TRUE;
				forbid_video();
				write_error_code_to_camera(flag_video_status);
			}
			else
			{
				xil_printf("check 3 : serial the same\n\r");
				debug_console_print("CAMERA_SAME\n\r");

				if(flag_camera_invalid == TRUE)
				{
					xil_printf("check 4 : check invalid code = %d TRUE\n\r", flag_camera_invalid);
					xil_printf("invalid this camera\n\r");
					xil_printf("flag_camera_invalid_id = %d\n\r", flag_camera_invalid_id);
					xil_printf("Forbid video, reason = %d........\n\r", flag_camera_invalid_id);
					flag_video_status = flag_camera_invalid_id;
					flag_forbid_video = TRUE;
					forbid_video();
					write_error_code_to_camera(flag_video_status);
				}
				else
				{
					xil_printf("check 4 : check invalid code = %d FALSE\n\r", flag_camera_invalid);
					camera_plug_in_time = get_time_interval(CURRENT_TIME);
					xil_printf("camera_plug_in_time = %d Seconds\n\r", camera_plug_in_time);

					xil_printf("check 5 : .... other items....\n\r");

					camera_plug_interval = camera_plug_in_time - camera_pull_out_time;
					xil_printf("camera_plug_interval = %d Seconds\n\r", camera_plug_interval);

					/*
					char str[40];
					sprintf(str, "plug_interval : %ld seconds\n", camera_plug_interval);
					debug_console_print(str);
					*/

					//last_power_off_time = get_time_interval(LAST_POWER_OFF);
					xil_printf("difftime_LAST_POWER_OFF = %d seconds\n\r", last_power_off_time);
					xil_printf("difftime_LAST_POWER_OFF = ");
					print_time(last_power_off_time);

					xil_printf("system_uptime = %d seconds\n\r", g_ms_uptime / 1000);

					xil_printf("last power off time = %d seconds\n\r", last_power_off_time + g_ms_uptime / 1000);
					xil_printf("last power off time = ");
					print_time(last_power_off_time + g_ms_uptime / 1000);
					debug_console_print("last power off time = ");
					debug_console_print_time(last_power_off_time + g_ms_uptime / 1000);

					/*
					total_power_off_time += (last_power_off_time + g_ms_uptime / 1000)/60;
					sprintf(str, "total_power_off_time : %ld minutes\n", total_power_off_time);
					debug_console_print(str);
					write_total_power_off_time_to_eeprom();
					*/

					camera_use_time_from_camera = read_camera_use_time_from_camera();
					xil_printf("camera_use_time_from_camera = %d\n\r", camera_use_time_from_camera);
					xil_printf("camera_use_time_from_eeprom = %d\n\r", camera_use_time_from_eeprom);
					xil_printf("camera_nouse_time_from_eeprom = %d\n\r", camera_nouse_time_from_eeprom);

					if(time_tick == 0)
					{
						start_time_total = camera_use_time_from_eeprom * 60;
						stop_time_total = camera_nouse_time_from_eeprom * 60;
					}

					show_camera_status();

					xil_printf("flag_use_the_same_camera = %d\n\rflag_camera_status = %d\n\rlast_power_off_time = %d\n\rflag_donot_care_power_off = %d\n\rtotal_power_off_time = %d\n\r",
							flag_use_the_same_camera, flag_camera_status, last_power_off_time, flag_donot_care_power_off, total_power_off_time);

					if((flag_camera_status < CAMERA_NEW) || (flag_camera_status > CAMERA_USED))
					{
						xil_printf("xxxxxxxxxxxxxyyyy  unknown flag_camera_status = %d read it again\n\r", flag_camera_status);
						flag_camera_status = get_camera_status();
						xil_printf("check_camera_reuse  flag_camera_status = %d\n\r", flag_camera_status);
					}

					if(last_power_off_time > 86400)
					{
						xil_printf("xxxxxxxxxxxxxyyyyzzzz  last_power_off_time = %d read it again\n\r", last_power_off_time);
						last_power_off_time = get_time_interval(LAST_POWER_OFF);
						xil_printf("check_camera_reuse  last_power_off_time = %d\n\r", last_power_off_time);
					}

					/*	debug message
					(flag_use_the_same_camera == TRUE)?xil_printf("flag_use_the_same_camera == TRUE\n\r"):xil_printf("flag_use_the_same_camera == FALSE\n\r");

					switch(flag_camera_status)
					{
					case CAMERA_NEW:	xil_printf("CAMERA_NEW\r\n");break;
					case CAMERA_1M:		xil_printf("CAMERA_1M\r\n");break;
					case CAMERA_30M:	xil_printf("CAMERA_30M\r\n");break;
					default:			xil_printf("CAMERA_xxxxx_unknown\r\n");break;
					}

					(flag_donot_care_power_off == TRUE)?xil_printf("flag_donot_care_power_off == TRUE\n\r"):xil_printf("flag_donot_care_power_off == FALSE\n\r");
					xil_printf("g_ms_uptime = %d\n\r", g_ms_uptime);
					xil_printf("last_power_off_time = %d\n\r", last_power_off_time);
					xil_printf("sum1 = %d\n\r", last_power_off_time + g_ms_uptime / 1000);
					xil_printf("60 * THIRTY_MINUTE = %d\n\r", 60 * THIRTY_MINUTE);
					xil_printf("total_power_off_time = %d minutes\n\r", total_power_off_time);
					xil_printf("camera_plug_interval = %d seconds\n\r", camera_plug_interval);
					xil_printf("stop_time_total = %d seconds\n\r", stop_time_total);
					*/

					if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_1M)
							&& ((last_power_off_time + g_ms_uptime / 1000) > 60 * THIRTY_MINUTE) && (flag_donot_care_power_off == FALSE))		//30min for CAMERA_1M power off
					{
						xil_printf("check 5a : forbid 1 video shutdown too long........ %d seconds\n\r", last_power_off_time + g_ms_uptime / 1000);
						flag_video_status = VIDEO_FORBID_POWEROFF_LONG_1M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_1M) && ((last_power_off_time + g_ms_uptime / 1000) > 130)
							&& (total_power_off_time > THIRTY_MINUTE) && (flag_donot_care_power_off == FALSE))		//CAMERA_1M total power off time > 30 min
					{
						xil_printf("check 5b : forbid 2 video shutdown too long........ total power off time %d minutes\n\r", total_power_off_time);
						flag_video_status = VIDEO_FORBID_POWEROFF_LONG_1M30M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_1M) && (camera_plug_interval > 60 * THIRTY_MINUTE))	//30min for CAMERA_1M pull-out one time
					{
						xil_printf("check 5c : forbid 3 video CAMERA_1M camera_plug_interval = %d seconds\n\r", camera_plug_interval);
						flag_video_status = VIDEO_FORBID_PULL_OUT_LONG_1M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_30M) && (camera_plug_interval > 70))	//1min for CAMERA_30M pull-out one time 60 + 10 sec
					{
						xil_printf("check 5d : forbid 4 video CAMERA_30M camera_plug_interval = %d seconds\n\r", camera_plug_interval);
						flag_video_status = VIDEO_FORBID_PULL_OUT_LONG_30M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_30M)
							&& ((last_power_off_time + g_ms_uptime / 1000) > 130) && (flag_donot_care_power_off == FALSE))		//1min for CAMERA_30M power off 1min = 130 sec
					{
						xil_printf("check 5e : forbid 5 video shutdown too long........ %d seconds\n\r", last_power_off_time + g_ms_uptime / 1000);
						flag_video_status = VIDEO_FORBID_POWEROFF_LONG_30M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					//else if((flag_use_the_same_camera == TRUE) && (stop_time_total > 60 * 30))	//30min for CAMERA_1M/CAMERA_30M pull-out total time
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_1M) && (stop_time_total > 60 * THIRTY_MINUTE) && (camera_plug_interval > 70))	//30min for CAMERA_1M pull-out total time
					{
						xil_printf("check 5f : forbid 6 video CAMERA_1M total %d seconds\n\r", stop_time_total);
						flag_video_status = VIDEO_FORBID_PULL_OUT_LONG_1M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					/*
					else if((flag_use_the_same_camera == TRUE) && (flag_camera_status == CAMERA_30M) && (stop_time_total > 60 * 2))	//1min for CAMERA_30M pull-out total time
					{
						xil_printf("Forbid video CAMERA_30M total %d seconds\n\r", stop_time_total);
						flag_video_status = VIDEO_FORBID_PULL_OUT_LONG_30M;
						flag_forbid_video = TRUE;
						forbid_video();
						write_error_code_to_camera(flag_video_status);
					}
					*/
					else
					{
						//xil_printf("\n\rcheck 6 : camera ok, stop_time_total = %d\n\r", stop_time_total);
						/*
						char str[40];
						sprintf(str, "total remove time : %ld seconds\n", stop_time_total);
						debug_console_print(str);
						*/
					}
				}
			}
		}
	}

	if(flag_forbid_video == FALSE)
	{
		enable_camera(1);
		if(flag_forbid_video_old == TRUE)
		{
			flag_forbid_video_old = FALSE;
			clear_layer1_all(current_framebuffer, TRUE);
			if(flag_use_2_framebuffers == TRUE)
				clear_layer1_all(next_framebuffer, TRUE);
			layer1_blit_corners(current_framebuffer);
			if(flag_use_2_framebuffers == TRUE)
				layer1_blit_corners(next_framebuffer);
			if(g_procedure_started == STOP)
			{
				RequestShowPicture2(2);
			}
		}
		xil_printf("\n\rcheck 6 : camera ok\n\r");
	}
	else
	{
		xil_printf("\n\rcheck 6 : camera reuse, forbid video\n\r");
	}

	read_serial_from_camera();
	show_camera_serial(1);
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		show_camera_serial(1);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		show_camera_serial(1);
	}

	show_camera_date(1);
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		show_camera_date(1);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		show_camera_date(1);
	}
	xil_printf("check_camera_reuse SP\r\n");
	return flag_forbid_video;
#else
	return 0;
#endif
}

void check_camera_reuse_clear(void)
{
	show_camera_serial(0);
	show_camera_date(0);
	if(flag_use_2_framebuffers == TRUE)
	{
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(next_framebuffer));
		show_camera_serial(0);
		show_camera_date(0);
		gdispSetuGFXFrameBufferAddr(gdispGetFrameBufferAddr(1 - next_framebuffer));
		show_camera_serial(0);
		show_camera_date(0);
	}
	return;
}

void make_camera_expired(void)
{
#ifdef USE_PREVENT_REUSE
	xil_printf("\n\rcamera erase data\n\r");
	xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(SN_PAGE);
	xil_printf("\n\rERASE_UFM\n\r");
	ERASE_UFM();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);

	sleep(2);	//must use 2 sec

	xil_printf("\n\rcamera write serial\n\r");
	write_serial_to_camera();
	xil_printf("\n\rcamera write serial OK\n\r");

	write_camera_serial_to_eeprom();

	xil_printf("\n\rcamera write date\n\r");
	write_expired_date_to_camera();
	xil_printf("\n\rcamera write date OK\n\r");
#endif
	return;
}


void write_expired_date_to_camera()
{
	int i;
	xil_printf("\n\rwrite_expired_date_to_camera\t%s\n\r", asctime(&rtc));

	//xil_printf("\n\rENABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(DATE_PAGE1);
	usleep(DELAY);

	asctime(&rtc);

	page_data[0] = 0x77;
	page_data[1] = 0x02;
	page_data[2] = 0x0E;
	page_data[3] = 0x04;

	page_data[4] = 0x0B;
	page_data[5] = 0x22;
	page_data[6] = 0x35;
	page_data[7] = 0;

	page_data[8] = 0;
	page_data[9] = 0;
	page_data[10] = 0;
	page_data[11] = 0;

	page_data[12] = 0xAA;
	page_data[13] = 0xBB;
	page_data[14] = 0xCC;
	page_data[15] = 0xDD;

	//xil_printf("\n\rPROG_1PAGE\n\r");
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);

	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(DATE_PAGE3);
	usleep(DELAY);

	asctime(&rtc);

	page_data[0] = 0x77;
	page_data[1] = 0x02;
	page_data[2] = 0x0E;
	page_data[3] = 0x04;

	page_data[4] = 0x0C;
	page_data[5] = 0x11;
	page_data[6] = 0x1D;
	page_data[7] = 0;

	page_data[8] = 0;
	page_data[9] = 0;
	page_data[10] = 0;
	page_data[11] = 0;

	page_data[12] = 0xAA;
	page_data[13] = 0xBB;
	page_data[14] = 0xCC;
	page_data[15] = 0xDD;

	//xil_printf("\n\rPROG_1PAGE\n\r");
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);

	ENABLE_CONFIGURE(1);
	//xil_printf("\n\rSET_ADDRESS\n\r");
	SET_ADDRESS(0xc);
	usleep(DELAY);

	asctime(&rtc);

	for(i = 0; i < 15; i++)
	{
		page_data[i] = 0xAA;
	}
	page_data[15] = 0xcf;	//camera fpga

	//xil_printf("\n\rPROG_1PAGE\n\r");
	PROG_1PAGE();
	xil_printf("\n\rDISABLE_CONFIGURE\n\r");
	ENABLE_CONFIGURE(0);



	return;
}


#ifdef USE_IMS_LINK
u16 CalcCheckSum(u8 *pData, u16 len)
{
    u8 i = 0,sum = 0;
    for (; i < len; i++)
    {
        sum += (u8) pData[i];
    }
    sum = (sum^0xFF) + 1;
    return (sum&0xFF);
}

void Send_IMS_Data_Cmd(u8 cmd1, u8 cmd2, u8 cmd3)
{
	int i;
	u8 UartTxBuf[5];

	UartTxBuf[0] = 0xA1;
	UartTxBuf[1] = cmd1;
	UartTxBuf[2] = cmd2;
	UartTxBuf[3] = cmd3;
	UartTxBuf[4] = CalcCheckSum(UartTxBuf, 4);

	for(i=0;i<5;i++)
	{
		xil_printf("%c", UartTxBuf[i]);
	}
}


#endif





u32 GetResetReason(void)
{
	u32 BootModeRegister = 0;

	BootModeRegister = Xil_In32(BOOT_MODE_REG);
	BootModeRegister &= BOOT_MODES_MASK;

	/*
	if (BootModeRegister == QSPI_MODE) {
		xil_printf("Boot mode is QSPI\n\r");

	}
	else if (BootModeRegister == NAND_FLASH_MODE) {
		xil_printf("Boot mode is NAND\n");
	}
	else if (BootModeRegister == NOR_FLASH_MODE) {
		xil_printf("Boot mode is NOR\n\r");
	}
	else if (BootModeRegister == SD_MODE) {
		xil_printf("Boot mode is SD\r\n");
	}
	else if (BootModeRegister == MMC_MODE) {
		xil_printf("Booting Device is MMC\r\n");
	}
	else if (BootModeRegister == JTAG_MODE) {
		xil_printf("Boot mode is JTAG\r\n");
	}
	else
	{
		xil_printf("ILLEGAL_BOOT_MODE \r\n");
	}
	*/


	return BootModeRegister;
}



void FsblMeasurePerfTime (XTime tCur, XTime tEnd)
{
	double tDiff = 0.0;
	double tPerfSeconds;
	XTime_GetTime(&tEnd);
	tDiff  = (double)tEnd - (double)tCur;

	/*
	 * Convert tPerf into Seconds
	 */
	tPerfSeconds = tDiff/COUNTS_PER_SECOND;

//#if defined(STDOUT_BASEADDRESS)
	printf("%f seconds \r\n",tPerfSeconds);
//#endif


}























