/***************************************************************************************
 * brownian.c                                                                          *
 *    This program draws a fractal line generated by one-dimensional Brownian motion.  *
 * Gaussian random numbers are summed to simulate the Brownian motion.                 *
 ***************************************************************************************/

#include "../../Common.h"

#define SEED srand
#define RANDNUM rand
#define RANDMAX RAND_MAX

#define POINTS     151
Point points[POINTS];

int Arand;
int Nrand;
double GaussAdd;
double GaussFac;
double winLimit;

/* Routine for initializing the Gaussian random number generator. This is an
 * implementation of algorithm InitGauss on page 77 of "The Science of Fractal Images".   */
void InitGauss(int seed)
{
    Nrand = 4;
    Arand = RANDMAX;
    GaussAdd = sqrt(3.0 * (double)Nrand);
    GaussFac = 2.0 * GaussAdd / ((double)Nrand * (double)Arand);
    SEED(seed);
}

/* Routine to generate a Gaussian random number. This is an implementation of
 * algorithm Gauss on page 77 of "The Science of Fractal Images."  */
double Gauss(void)
{
    double sum;
    int i;
    sum = 0.0;
    for (i = 1; i <= Nrand; i++)
    {
        sum += (double)RANDNUM();
    }
    return (GaussFac * sum - GaussAdd);
}

void make_data_3_gaussian(void)
{
    float displacement;
    int i;

    // Begin by computing the vertices for the line as the sum of Gaussian random variables.
    InitGauss((int)time(NULL));
    displacement = 0.0f;

    points[0].x = 0.0f;
    points[0].y = 0.0f;
    for (i = 1; i < POINTS; i++)
    {
        displacement += (float)Gauss();
        points[i].x = (float)i;
        points[i].y = displacement;
        //points[i].y = (float)i/10;     //debug
    }
    winLimit = 2.0 * sqrt((double)POINTS);
    //printf("winLimit = %f\n", winLimit);

    points[POINTS / 2].y = 20.0f;     //故意造一個特大點

    return;
}

int t = 0;
void make_data_2_sine(void)
{
    points[0].x = 0.0f;
    points[0].y = 0.0f;
    for (int i = 1; i < POINTS; i++)
    {
        points[i].x = (float)i;
        points[i].y = 25.0f * sin(PI * (float)(i + t) / 180);
    }
    t++;
    winLimit = 2.0 * sqrt((double)POINTS);
    //printf("winLimit = %f\n", winLimit);

    points[POINTS / 2].y = 20.0f;     //故意造一個特大點

    return;
}

void print_data(void)
{
    printf("共 %d 筆資料, 內容:\n", POINTS);
    for (int i = 0; i < POINTS; i++)
    {
        printf("(%d, %f)", (int)(points[i].x), points[i].y);
        if (i % 6 == 5)
            printf("\n");
        else
            printf(" ");
    }
    printf("\n");

    for (int i = 0; i < POINTS; i++)
    {
        printf("%0.10f  %0.10f\n", points[i].x, points[i].y);
    }

    return;
}

void display(void)
{
    //make_data_1_array();    //製作資料1, 設定陣列, TBD
    //make_data_2_sine();	//製作資料2, 計算
    make_data_3_gaussian();//製作資料3, 高斯計算
    //make_data_4_file();    //製作資料4. 讀檔案, TBD

    //print_data();

    glClear(GL_COLOR_BUFFER_BIT);   //全圖黑色

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, (double)(POINTS - 1), -winLimit, winLimit);

    //printf("窗口座標範圍2D, 顯示範圍 : X軸(%f ~ %f) Y軸(%f ~ %f), 左下為原點\n", 0.0, (double)(POINTS - 1), -winLimit, winLimit);

    glClearColor(1.0, 1.0, 1.0, 0.0);   //背景白色
    glColor3f(1.0, 0.0, 0.0);           //畫筆紅色

    glBegin(GL_LINE_STRIP);        /* Draw a line defined by some points.*/
    for (int i = 0; i < POINTS; i++)
    {
        glVertex2f(points[i].x, points[i].y);
    }
    glEnd();

    glFlush();  // 執行繪圖命令
}

void idle(void)
{
    glutPostRedisplay();    //將當前視窗打上標記，標記其需要再次顯示。
}

int main(int argc, char** argv)
{
    const char* windowName = "布朗運動";
    const char* message = "僅顯示, 無控制, 按 Esc 離開\n";
    common_setup(argc, argv, windowName, message, 0, 600, 600, 1100, 200, display, reshape0, keyboard0);

    //glutIdleFunc(idle);

    glutMainLoop();	//開始主循環繪製

    return 0;
}

