/***************************************************************************************
 * brownian.c                                                                          *
 *    This program draws a fractal line generated by one-dimensional Brownian motion.  *
 * Gaussian random numbers are summed to simulate the Brownian motion.                 *
 ***************************************************************************************/

#include "../../Common.h"

#define POINTS     200

#define SEED srand
#define RANDNUM rand
#define RANDMAX RAND_MAX

typedef GLfloat point[2];

point points[POINTS];
int Arand, Nrand;
double GaussAdd, GaussFac, winLimit;

/* Routine for initializing the Gaussian random number generator. This is an
 * implementation of algorithm InitGauss on page 77 of "The Science of Fractal Images".   */
void InitGauss(int seed)
{
    Nrand = 4;
    Arand = RANDMAX;
    GaussAdd = sqrt(3.0 * (double)Nrand);
    GaussFac = 2.0 * GaussAdd / ((double)Nrand * (double)Arand);
    SEED(seed);
}

/* Routine to generate a Gaussian random number. This is an implementation of
 * algorithm Gauss on page 77 of "The Science of Fractal Images."  */
double Gauss()
{
    double sum;
    int i;
    sum = 0.0;
    for (i = 1; i <= Nrand; i++)
    {
        sum += (double)RANDNUM();
    }
    return (GaussFac * sum - GaussAdd);
}

//This is the routine that generates the image to be displayed.
void gfxinit()
{
    int i;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, (double)(POINTS - 1), -winLimit, winLimit);

    glClearColor(1.0, 1.0, 1.0, 0.0);   //背景白色
    glColor3f(1.0, 0.0, 0.0);           //畫筆紅色

    glNewList(1, GL_COMPILE);
    glBegin(GL_LINE_STRIP);        /* Draw a line defined by some points.*/
    for (i = 0; i < POINTS; i++)
    {
        glVertex2fv(points[i]);
    }
    glEnd();
    glEndList();
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glCallList(1);
    glFlush();  // 執行繪圖命令
}

void make_data()
{
    float displacement;
    int i;

    // Begin by computing the vertices for the line as the sum of Gaussian random variables.
    InitGauss((int)time(NULL));
    displacement = 0.0f;
    points[0][0] = points[0][1] = 0.0;
    for (i = 1; i < POINTS; i++)
    {
        displacement += (float)Gauss();
        points[i][0] = (float)i;
        points[i][1] = displacement;
    }
    winLimit = 2.0 * sqrt((double)POINTS);
    return;
}

int main(int argc, char** argv)
{
    const char* windowName = "布朗運動";
    const char* message = "僅顯示, 無控制, 按 Esc 離開\n";
    common_setup(argc, argv, windowName, message, 0, 600, 600, 1100, 200, display, reshape0, keyboard0);

    make_data();    //製作資料

    printf("資料內容:\n");
    int i;
    for (i = 0; i < POINTS; i++)
    {
        printf("(%d, %f)", (int)(points[i][0]), points[i][1]);
        if (i % 8 == 7)
            printf("\n");
        else
            printf(" ");
    }
    printf("\n");

    points[100][1] = 50.0f;     //故意造一個特大點

    gfxinit();

    glutMainLoop();	//開始主循環繪製

    return 0;
}

