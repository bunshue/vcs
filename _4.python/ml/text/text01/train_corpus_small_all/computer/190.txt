日月光华 -- SE精华区文章阅读
--------------------------------------------------------------------------------
 发信人: jiachong (甲虫), 信区: SE
标  题: [转载]7.净室软件工程介绍                     jiachong 
发信站: 日月光华 (2003年04月09日12:48:22 星期三), 站内信件

【 以下文字转载自 SE 讨论区 】
【 原文由 jiachong 所发表 】
--bluefield整理

净室软件工程介绍
一、 净室方法概述
1． 净室概念
净室（cleanroom）软件工程室一种应用数学和统计学以经济的方式生产高质量软件的工
程技术。“净室”这个词来源于半导体工业的生产硬件的净室。在硬件生产过程中，严
格的工程过程预防了缺陷的产生，而不是事后再去排除故障。净室技术的重点在于通过
设计和测试中的质量认证来保证软件开发的正确性。净室方法植根于科学，它的应用可
提高软件生产效率并获得软件运行可靠性，从而成为一个工程过程。净室软件工程有两
个重要目标：一是开发过程的可管理性，二是使用时无失效。
2． 净室基础
（1） 函数理论
净室开发方法基于数学中的函数理论。一个程序的规范就是一个函数的规范，描述了一
个程序的定义域（或输入序列）到值域（或输出空间）的映射。一个定义明确（well-d
efined）的函数有如下特性：完备性、一致性和正确性。
（2） 统计理论
净室测试方法基于统计学。在软件测试中，用于采样的全体（population）是所有可能
使用情况的集合。其中集合中的每个元素代表系统的一种可能运行情况。统计的目的是
度量系统正确运行一个样本的能力。因为总体是无限的，完全的测试是不可能的，所以
必须利用统计学方法来对系统性能做一个有效的推理。在净室软件工程中，统计测试既
可用于产品检测，也可用于过程检测。
（3） 净室小组的工作
净室是面向小组的方法。净室开发小组完成三项主要工作：制定系统规范、开发和认证
。评审是净室小组的一项重要工作。每个产品从最初的概念到最后形成都要经历多次评
审。有两种评审。一种称为开发评审，开发评审的焦点集中于技术策略、好的想法以及
小组培训和交流。所走工作产品的简化是小组评审的显着目标之一。最初的思路几乎从
来都不是最好的，所以评审的一个关键目标是在规范、设计和验证方面找到更好的思路
。第二种评审称为验证评审。这种评审通过形式化方法来验证工作产品的正确性和完备
性，这些验证通常这样进行，设计者以口头方式注意列举其满足基于函数的正确性条件
的理由。小组顺序检查每个条件，不允许有存在异议的情况。任何修改必须经过后续评
审的重新验证。一个工作产品经过验证评审而不再有更改的必要就被认为是正确和完备
的。
3． 净室技术
净室软件工程可用如下三个关键技术来刻画：
（1） 置于统计过程控制之下的增量开发
增量开发基于产品开发中受控迭代的工程原理—控制迭代。增量开发不是把整个开发过
程作为一个整体，而是将其划分为一系列较小的、积累的增量。每个增量都时积累的，
也就是所有以前的增量加上新的工作而不断积累。增量开发是开发小组保持对项目智能
控制的基础。因为小组成员在任何时刻只需把注意立即终于工作的一部分，而不是一次
考虑所有的事情。
增量开发把一个净室项目分成一个有序的开发周期序列。在每个周期完成一些用户功能
。在每个增量开发完成时，产品的功能便可向客户演示。这样客户对产品有真实的改观
认识，他们可不受约束重新确认需求或时需求更加清晰。这将使产品在完成时双方的不
满程度降到最低。
（2） 基于函数的规范、设计和验证
净室采用的方法不仅有坚实的理论基础，而且可操作性也很好。规范从一个外部视图（
称之为黑盒）开始，然后被转化成一个状态机视图（称之为状态盒），最后由一个过程
（明盒）来实现。这些形式上不同、行为上等价的视图统称为盒子结构。盒子结构是基
于对象的，并支持软件工程的关键原则：信息隐藏和实现分离。
（3） 统计测试和软件认证
净室测试方法采用统计学的基本原理，既当总体太大时必须采取抽样的方法。首先确定
一个使用模型来代表系统所有可能使用的（一般是无限的）总体。然后由使用模型产生
测试用例。因为测使用历史用体的一个随机样本，所以可得到系统预期操作性能的有效
的统计推导。使用模型是指系统使用中所有可能的情形及其发生的概率。使用模型可有
许多形式（包括马尔可夫模型盒形式化的语法）来表示。在马尔可夫模型中，使用模型
是一个状态机组成，状态之间由转移弧线连接，转移弧线指系统测试时可能的激励，并
有一个概率值与之对应。概率指从给定状态进行特定转移的可能性大小。从起始状态穿
过模型到终点状态变得到了一个测试用例。
使用模型是可重用的资源，它能产生任意数目的侧使用例。实际上，测试一个系统可采
用多种使用模型，对每种使用模型可采用多种概率分布。例如，许多系统提供一些很少
使用的功能，但这些功能处理失误的后果很严重，如在核电厂关闭反应堆。这种功能在
一般的使用模型中的执行概率是很小的。当集中测试这种能产生重大后果的功能时，需
要采用严格安全使用模型、冒险使用模型、恶意使用模型或其他特定环境使用模型。
这些技术可分开使用，也可以一起使用。采用这些技术可改进软件生产过程。
4． 净室过程
净室参考模型（CRM）为净室项目运行定义了一套完整的过程和工作产品。CRM由14个分
别对应于软件管理、规范、开发和认证的独立过程组成：
l 管理过程包括项目计划、项目管理、性能改进以及工程变更。
l 规范过程包括需求分析、功能规范、使用规范、结构规范和增量计划。
l 开发过程包括软件再工程、增量设计和正确性验证。
l 认证过程包括使用建模、测试计划、统计测试和认证。]
二、 增量式开发的净室管理
统计质量控制之下的增量式开发是软件项目建立和保持管理控制的净室途径。在使用净
室方法时，软件产品是以一系列功能增量的形式开发的，这些增量合起来就形成了最终
的产品。最稳定的需求被首先实现。这些增量的集成是自顶向下来进行的。
1． 增量式开发的优点
（1） 进展的可见性
例用增量式开发，每一步增量实现了一个或多个最终用户功能。每一步增量包含所有早
期的已开发的功能集机上一些新的功能；系统再逐步积累的增量中增长。例如，在早期
增量结束时，开发者可以很有信心的说：系统的20%已100%完成了，而不是推测系统已完
成了20%。
（2） 智能控制
增量时开发通过引用透明性，实现了整个系统开发过程中的智能控制。当拥有引用透明
性时，一个系统的部件无需回溯就能根据其子规范得以实现。无需重做前期增量。这种
策略有利于在一个完整系统中对每个增量进行正确性验证。
（3） 增量系统集成
净室增量式开发允许在整个开发生命期引用透明的用户函数增量的连续集成。因为每一
步增量设计基于一个已验证的子规范和前期增量已测试的接口，因此，几乎没有更深的
设计和接口错误。较好的定义增量贯穿于整个系统开发过程，系统在良好定义的增量忠
言化。测试和验证工作始于开发周期早期。
（4） 连续质量反馈贯穿统计过程控制
已在净室中实践的增量式开发为统计过程控制提供了基础。每一个净室增量都是过程的
一个完整周期，包含规范、开发和新的用户函数的验证，加上到目前为止所有已完成工
作的测试。作为统计过程控制的典型，把过程的每一次反复的性能度量与性能目标相比
较，以决定是否过程一直在控制之下（即是否正如所期望的那样发生）。
（5） 用户使用中不断的功能反馈
增量式开发有助于用户对一个进化系统的执行功能做出尽早的不断的反馈，必要时允许
改变。因为增量执行于系统环境并代表了用户功能的子集，早期的增量能通过用户对系
统功能性和实用性的检测来反馈。这种反馈有助于避免开发出实效的系统和建立用户可
接受的最终产品。
（6） 变更的适应性
在系统需求和性努环境中增量室开发允许不可避免变更的系统适应性。在每一步增量完
成时，系统需求的积累变更所产生的影响能根据当前规范和增量设计来评估。如果变更
于将来增量相互独立，则通常与现已存在的增量开发计划相合并，并对进度和资源进行
可能的调整。如果变更影响已完成的增量，自顶向下修改系统开发，通常重用绝大多数
已存在的增量代码（通常是全部），按照要求的进度和资源来进行相应调整。
（7） 进度与资源管理
项目资源在增量式开发全过程中能在可控制的方式下分配。可用进度是决定待开发的增
量数量和其规模的一个因素。在短进度中，小规模增量将有助于在增量交付与认证组织
间维持充分的时间段，允许一个有序的测试过程。然而，这将给项目开发小组设计和实
现更大、更复杂的增量带来更多负担。进度和复杂性的折衷能够反映增量式开发计划。
另外，从后续增量得到的反馈，为过程和产品性能的目标度量提供了管理，以允许在开
发和测试中对不足和意外收获的适应。
2．增量式开发的理论基础
净室过程中的增量是开发技术是基于引用透明性原理的。引用透明性意味着一个表达式
所关心的唯一的事情是它的值，能用其值相等的子表达式代替。软件增量式开发的基础
在于为程序制定数学函数规则。这种观点认为程序开发作为一种自顶向下的控制结构或
子函数（子规范）的函数改进过程，这种改进将导致基于对象或函数分解，或者是二者
的结合。因为引用透明性，任何精化步骤的验证能够与其它精化步骤相互独立进行，这
就意味着，在系统的大部分组件写出之前，在早期的增量中，系统的体系结构能够被验
证，在后期的增量中，体系结构不需重新验证。
三、 净室软件规范
根据结构化编程的理论，无论多么复杂的程序结构都可用分层结构中的三种基本控制结
构：顺序，选择和循环嵌套而成。然而，软件系统的开发不仅仅需要系统控制流，如今
的大规模系统涉及整个企业中大量数据的存储、检索、传送和处理数据的操作。在缺乏
工程基础的系统开发中，这些操作使数据复杂性不断积累，从而难以控制。净室软件规
范和设计使用了三种系统结构─黑盒、状态盒和明盒，统称为盒子结构。这些结构体现
了数据封装和数据隐藏的重要概念。在逐步求精和验证过程中开发盒子结构，并将系统
控制和数据操作结合起来。系统的开发就是把这些结构以一种可证明的方式逐层嵌套和
排序。
1． 净室规范和设计的盒子结构
盒子结构是在规范和设计中对现实系统的外在基本属性的功能描述。有三种盒子：黑盒
、状态盒、明盒。这些盒子不仅展示了外部行为，而且还提高了内部可见度。黑盒确定
了一个系统或系统组件的外部行为。状态盒则进一步指定了完成外部行为所需的状态数
据。明盒则进一步把状态盒具体化，它确定了完成状态和行为的过程设计。它可是用已
有的黑盒或引入新的黑盒，这些黑盒将在以后细化（明盒由程序控制结构组成），每步
细化是根据前一步进行验证的。这样盒子结构将系统开发的三个方面（行为、数据和过
程的规范）分离开，但又把它们联成一个细化和验证的内聚过程。
（1） 黑盒行为
黑盒定义了一个系统或系统组件的外部行为。当系统接受激励S（视为从其环境的输入）
时，它将产生相应R（作为对其环境的输出），响应不仅与当前激励有关，还与到目前为
止收到的激励有关。
黑盒行为的数学语义可写成如下函数：
                历史激励→响应
简记为          SH→R
SH表示包括当前激励的所有历史激励。
黑盒定义不包含状态数据及过程实现。它定义了仅取决于于历史使用的能被用户感受到
的外部可见行为。因此，黑盒关心的是从用户角度看待系统行为的问题，而并不考虑状
态和过程的设计。黑盒子规范定义了所有可能使用情况所需的行为。也就是说，在黑盒
规范中为所有可能的当前激励盒历史激励以及它们的组合定义了正确的响应，在净室项
目中黑盒规范的如下三个原则对高效系统开发很关键。
l 对系统拥有者和用户而言，黑盒定义了他们分析和协商的所需行为，这是他们准备资
源、着手开发和测试的前提。
l 对系统开发者而言，黑盒定义了待设计和实现的所需行为。
l 对系统测试者而言，黑盒定义了在测试过程中待确认的所需行为。
（2） 状态盒行为
状态盒规范对系统或其组件进行初步细化，定义了状态空间。状态盒把激励历史封装成
状态数据，但仍没有涉及具体过程。它把旧的状态OS和激励S映射到新的状态NS和响应R
。而新的状态在下一次变换时则变成了旧状态。状态盒行为的于一是一个如下的变换函
数：
（旧状态，激励）→（新状态，响应）
        或简写为       （OS，S）→（NS,R）
        状态盒根据黑盒来细化和验证。状态信息就是为了符合黑盒规范而必须保存的
激励历史，这样的信息来自于黑盒，无需再定义。因为每个历史激励可用状态来表示，
所以每个黑盒有意个状态盒描述。而且，对于一个黑盒，可设计许多不同的状态盒，因
为对一个状态可能有多种不同的表示和访问方法。
        状态盒的验证是导出相应黑盒行为并与原来的黑盒相比较看是否等价。这种导
出就是将状态操作转换成激励历史形式。
（3） 明盒行为
系统或其组件的明盒设计定义了状态盒行为的过程。明盒是一个计算机程序或程序集，
基于程序的内部状态OS，它接受激励S，产生新的内部状态NS，并产生响应R。这些过程
由基于结构化程序设计的控制结构（顺序、选择、循环，如果引入并发机制还要加上并
行结构）来定义。明盒用这些控制结构来完成新状态和相应的计算。对于所给状态盒可
以定义多种不同的明盒。明盒可用一个变换函数表示：
（旧状态，激励）→（新状态，响应），借助过程
        或简记为：
（OS，S）→（NS，R），借助过程
        明盒的过程可以重用已有的黑盒，也可在后续求精过程过程的状态盒于明盒中
引入新的黑盒。定义明盒是一个关键步骤，因为它必须组织和连接处于一个盒子结构层
次的黑盒。通过定义每个黑盒用途的准确内容，这种显式的连接有助于对项目开发保持
智能控制。另外，组建及其连接是从明盒设计中局部处理需求导出的。
        明盒的验证是把其操作抽象成一个导出的状态盒并与原来的状态盒进行比较。

2． 盒子结构层次
盒子结构层次随着逐步求精和验证而不断进化。一个初始黑盒可以被细化为一个状态盒
，再细化为一个明盒。明盒的控制结构在下一个层次可以包含若干黑盒。这些黑盒可以
是相同的，也可不同，或者是几个的组合。
3． 基于序列的规范过程
规范制订有很多方法。基于顺序的规范是指逐步构造出完备、一致和正确的黑盒和状态
盒规范的过程。
在基于序列的规范过程中，按严格顺序系统的举出所有可能的激励（历史激励）序列，
如按长度0，1，2…排列。因为每个序列映射到其正确的响应，所以可通过应用规约规则
辨识等价序列，当完备和一致的定义了系统以后枚举过程结束。
四、 净室软件认证
统计测试时，需要开发出软件投入运行时的使用模型，测试用例由该使用模型随机产生
。然后按照数学和统计学模型对结果进行分析，获取软件的质量度量，并判断测试的充
分性。传统的测试方法（如白盒测试，回归测试）是净室统计使用测试方法的一种补充
，因此，不必放弃该方法，不过，大量实践表明，基于使用模型的测试更经济有效，并
且能获得实用软件的高可靠性。
1． 基于使用模型的统计测试的优点
软件系统的基于使用模型的统计测试提供了软件产品和过程质量的度量标准，它将用于
软件的整个生命期的管理和决策。由于使用模型是基于规范而不是基于代码的，因此，
源于模型构筑的洞察可用于产生在工程的早期阶段避免出现问题的有价值的管理决策。

l 需求确认
使用模型式系统规范的外部视图，它必须容易的被系统工程师、开发人员、客户和终端
用户所理解。在投入运行的环境中，当对该使用模型（包括可能的输入、可能的输入序
列以及期望的输出）进行系统的评审时，接口和需求往往被简化或明确。
l 资源和进度预测
基于一个使用模型的标准计算，为成果、进度和成本估算提供数据。
l 人工挑选非随机测试用例
依据一定的约定或规则，通过模型检查确定特殊的测试用例，以确保测试了特定的测试
序列。
l 自动生成测试用例
最小覆盖的测试脚本（对模型完全覆盖的最少测试事件）和随机测试用例（依据使用概
率分布）可由测试模型自动生成。模型覆盖测试确保了在随机测试开始之前模型的最低
功能，而且随机测试为投入运行时的可靠性评估提供了依据。
l 有效的、高效的测试
不同的缺陷并不同等的产生失效。位于频繁便利路径上的缺陷比那些位于非频繁路径上
的缺陷更有可能导致失效。随即测试的动机源于这样一个简单的事实：发现失效是根据
现场运行时失效导致故障的大致顺序。测试的预算主要用来通过测试来最大限度的提高
软件在投入运行时的可靠性。
l 聚焦测试
使用模型允许对特别序列的有偏抽样，譬如对非频繁使用但极为重要的功能序列抽样。
可以为这些功能形成单独的模型，或者对原始模型进行变换和抽样以去处偏置。
l 量化测试管理
基于使用模型的统计测试，为决策测试是否完成或软件是否可发布提供了定量的标准。
期望使用（在使用模型中所表征）与测试使用（在测试中所记录）的统计误差作为测试
充分性的度量值。
l 可靠性预测
在一定的统计测试协议下，测试时可以从软件的性能中获得预期运行性能的有效预测。
实际的测试结果（即对每一输入的正确的和不正确的情况）作为使用模型的权重记录下
来，并且该模型的计算结果提供了投入运行时的可靠性预测。
2． 统计测试的理论基础
l 样本与总体
就统计测试而言，软件测试被看作是一个统计学方法的问题。县产生软件所有可能使用
的一个子集，并以这个自己所表现的性能作为依据来考虑整体使用性能。换句话说，就
是通过样本来描述总体。
作为一个出发点，这种类比的前提是：不可能对软件的所有可能应用都进行测试，所有
可能的使用情景将不会被彻底测试。问题的关键就在于如何描述使用总体以及如何形成
用例子集。如果对软件的测试控制合理，那么，由描述恰当的总体的一个随机测试用例
，通过投入运行时的使用测试，我们可以得到总体的一个有效描述，而对于其他的用例
子集而言，无论多么全面的构筑都是不可能的。
l 软件使用的随机属性
软件的使用的过程被认为是一个随机过程。序列中的下一个事件只依赖于当前而与过去
无关。
五、 与其它方法的比较
1． 净室与CMM
CMM为软件过程改进提供了一个良好的定义范例，在许多组织中得到了成功的应用。净室
软件工程为软件规范、开发、测试和认证提供了良好的理论基础和实践。CMM主要关注管
理和组织方面，而净室则主要关注技术和工程实践方面。二者之间有相当一部分是相互
重叠的，但也有一些部分是另一方没有涉及的。
例如，在CMM第二级的关键过程域中，就有一部分是在净室的范围之外。配置管理和子合
同管理是重要的管理问题，但是净室没有涉及它们。另一方面，净室加强了软件开发的
数学基础以及软件测试的统计基础，而CMM没有涉及这些方法的优点。
总体而言，CMM和净室是兼容和互补的。把CMM的管理、组织能力和净室技术结合起来是
一种强有力的过程改进方法。基于技术得净室实践为CMM定义的“what”提供了许多“h
ow”。
2． 净室与面向对象
（1） 相同的特性
对于生命周期，净室遵循增量开发而OO遵循迭代开发。这两种方法都是试图利用用户反
馈和适应需求变更。
OO中的用例和净室的使用模型都属于使用场景（usage scenario）。这两种方法都是在
开发的早期阶段来定义出用户视图。它们产生的结果在设计和测试时都被使用到了。它
们都使用了状态机表示法。
OO和净室都使用了重用的方法。OO中的类和净室中的公共服务是重用的基本单元。
净室过程为面向对象开发提供了可管理性和技术严密性。对象从本质上来说是封装了数
据和一系列服务的状态机。一个净室组件用黑盒视图（一个对象的外部行为）、状态盒
视图（一个对象的封装数据）和明盒视图（处理外部需求和访问封装数据的服务）来定
义。一个净是组件从技术上讲就是一个对象。净室盒子结构有助于产生一个完备、一致
和正确的对象行为规范。而且，盒子结构有助于定义和管理数据并且控制数据在各个对
象之间的流动。
在净室技术中，数学形式化方法成为规范、设计、正确性验证和认证测试的基础。这种
成熟的形式化方法可为相对直观的面向对象方法增加精确性和可预见性。净室是应用工
程而非领域工程的一种方法。面向对象方法的普遍力量在于寻求某领域应用特征的关系
和抽象。面向对象的领域分析可作为净室应用工程的补充。
六、 结论
净室软件工程允许在生命周期的早期发现错误，这是后来的昂贵的返工的可能性降到最
低，并且加速了软件上市时间。它使设计变得简化，可验证。软件质量是靠设计和认证
来保证的，而不是测试。净室支持原型法，面向对象和复用。这项技术室与平台和开发
语言无关的，并且生产率很高。净室由一系列精化和变换组成，经过这些精化和变换，
也就一步步从需求到了代码。每一步变换都要根据前一级精化来认证，这就是错误减到
了最少。净室既可以应用于新系统也可应用于已经存在的系统。

--
这个世界总会有点不公正
但是我们总能用心去平衡
※来源:·日月光华 bbs.fudan.edu.cn·FROM:[甲虫窝]
※ 修改:·jiachong 於 03月04日20:52:13 修改本文·[FROM: 218.79.59.90]
--
※ 转载:·日月光华 bbs.fudan.edu.cn·[FROM: 61.170.202.109]

 

--------------------------------------------------------------------------------
[返回上一页] [本讨论区]