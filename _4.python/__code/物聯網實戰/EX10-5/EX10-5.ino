#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/f6cfadb7-be59-4fd5-82ff-5dabfbbf2bb1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String opening_status;
  bool close;
  bool full;
  bool half;
  bool ls_close;
  bool ls_full;
  bool ls_half;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define motorRunPin   D1 
#define motorDirPin   D3 
unsigned int limitSWPin[] = {D5, D6, D7};
char opening = '0';
char previousOpening = '0';
unsigned long startTime;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  for (int i=0; i<3; i++) pinMode(limitSWPin[i], INPUT_PULLUP);
  ls_close = false;
  ls_half = false;
  ls_full = false;
  pinMode(motorDirPin, OUTPUT);
  pinMode(motorRunPin, OUTPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
}
void open_curtain()  {
  switch (opening) {
    case '0':
      if ( opening == previousOpening ) break;
      else {
        previousOpening = opening;
        startTime = millis();
        while ( digitalRead(limitSWPin[0])==HIGH && (millis()-startTime)<10000 ) {
          yield();
          digitalWrite(motorDirPin, HIGH);
          analogWrite(motorRunPin, 1023);
        }
        analogWrite(motorRunPin, 0);
      }
      break;
    case '1':
      if ( opening == previousOpening ) break;
      else if ( opening < previousOpening ) {
        previousOpening = opening;
        startTime = millis();
        while ( digitalRead(limitSWPin[1])==HIGH && (millis()-startTime)<10000 ) {
          yield();
          digitalWrite(motorDirPin, HIGH);
          analogWrite(motorRunPin, 1023);
        }
        analogWrite(motorRunPin, 0);
      }
      else {
        previousOpening = opening;
        startTime = millis();
        while ( digitalRead(limitSWPin[1])==HIGH && (millis()-startTime)<10000 ) {
          yield();
          digitalWrite(motorDirPin, LOW);
          analogWrite(motorRunPin, 1023);
        }
        analogWrite(motorRunPin, 0);
      }
      break;
    case '2':
      if ( opening == previousOpening ) break;
      else {
        previousOpening = opening;
        startTime = millis();
        while ( digitalRead(limitSWPin[2])==HIGH && (millis()-startTime)<10000 ) {
          yield();
          digitalWrite(motorDirPin, LOW);
          analogWrite(motorRunPin, 1023);
        }
        analogWrite(motorRunPin, 0);
      }
      break;
    defalult:
      break;
  }
}
void onCloseChange()  {
  Serial.println("Close ...");
  opening = '0';
  opening_status = "Curtain is close";
  ls_close = true;
  ls_half = false;
  ls_full = false;
  open_curtain();
}
void onHalfChange()  {
  Serial.println("Half ...");
  opening = '1';
  opening_status = "Curtain is half open";
  ls_half = true;
  ls_close = false;
  ls_full = false;
  open_curtain();
}
void onFullChange()  {
  Serial.println("Full ...");
  opening = '2';
  opening_status = "Curtain is full open";
  ls_full = true;
  ls_close = false;
  ls_half = false;
  open_curtain();
}
