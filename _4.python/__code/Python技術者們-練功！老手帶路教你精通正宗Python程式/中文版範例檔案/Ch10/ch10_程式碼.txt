### 10.2 ###

"""mymath – 自訂數學模組"""
pi = 3.14159
def area(r):
    """area(r): 傳回半徑r的圓形面積."""
    global pi
    return(pi * r * r)

---

>>> import os
>>> os.getcwd()

---

>>> pi
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name 'pi' is not defined
>>> area(2)
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name 'area' is not defined

---

>>> import mymath
>>> pi
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name 'pi' is not defined
>>> mymath.pi
3.14159
>>> mymath.area(2)
12.56636
>>> mymath.__doc__ 
"""mymath – 自訂數學模組"""
>>> mymath.area.__doc__
'area(r): 傳回半徑r的圓形面積."""

---

>>> from mymath import pi
>>> pi
3.14159
>>> area(2)
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name 'area' is not defined

---

>>> import mymath, importlib
>>> importlib.reload(mymath)
<module 'mymath' from '/home/doc/quickpythonbook/code/mymath.py'>

### 10.3 ###

>>> import mymath as circle 
>>> circle.area(2)
12.56636

---

>>> from mymath import area as circle_area 
>>> circle_area(2)
12.56636

### 10.4 ###

>>> import sys
>>> sys.path

### 10.5 ###

"""modtest: our test module"""
def f(x):
    return x
def _g(x):
    return x
a = 4
_b = 2

---

>>> from modtest import *
>>> f(3)
3
>>> _g(3)
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name '_g' is not defined
>>> a
4
>>> _b
Traceback (innermost last):
  File "<stdin>", line 1, in ?
NameError: name '_b' is not defined

---

>>> import modtest
>>> modtest._b
2
>>> from modtest import _g
>>> _g(5)
5

### 10.7.1 ###

>>> locals()
{'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__', 
'__doc__': None, '__package__': None}
>>> globals()
{'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__', 
'__doc__': None, '__package__': None}>>> 

---

>>> z = 2
>>> import math
>>> from cmath import cos
>>> globals()
{'cos': <built-in function cos>, '__builtins__': <module 'builtins' 
(built-in)>, '__package__': None, '__name__': '__main__', 'z': 2,
'__doc__': None, 'math': <module 'math' from 
'/usr/local/lib/python3.0/libdynload/math.so'>}
>>> locals()
{'cos': <built-in function cos>, '__builtins__':
<module 'builtins' (built-in)>, '__package__': None, '__name__': 
'__main__', 'z': 2, '__doc__': None, 'math': <module 'math' from
'/usr/local/lib/python3.0/libdynload/math.so'>}
>>> math.ceil(3.4)
4

---

>>> del z, math, cos
>>> locals()
{'__builtins__': <module 'builtins' (built-in)>, '__package__': None, 
'__name__': '__main__', '__doc__': None}
>>> math.ceil(3.4)
Traceback (innermost last):
  File "<stdin>", line 1, in <module>
NameError: math is not defined
>>> import math
>>> math.ceil(3.4)
4

---

>>> def f(x):
...     print("global: ", globals())
...     print("進入 local: ", locals())
...     y = x
...     print("離開 local: ", locals())
...
>>> z = 2
>>> globals()
{'f': <function f at 0xb7cbfeac>, '__builtins__': <module 'builtins' 
(built-in)>, '__package__': None, '__name__': '__main__', 'z': 2, 
'__doc__': None}
>>> f(z)
global:  {'f': <function f at 0xb7cbfeac>, '__builtins__': <module 
'builtins' (built-in)>, '__package__': None, '__name__': '__main__', 
'z': 2, '__doc__': None}
進入 local:  {'x': 2}
離開 local:  {'y': 2, 'x': 2}  
>>>

### 10.7.2 ###

"""scopetest: 可視範圍測試模組"""
v = 6
def f(x):
    """f: scope test function"""
    print("global: ", list(globals().keys()))
    print("進入 local:", locals())
    y = x
    w = v
    print("離開 local:", locals().keys())

---

>>> import scopetest
>>> z = 2
>>> scopetest.f(z)
global: ['__name__', '__doc__', '__package__', '__loader__', '__
spec__', '__file__', '__cached__', '__builtins__', 'v', 'f']
進入 local: {'x': 2}
離開 local: dict_keys(['x', 'w', 'y'])

---

num = 0
def add():
    global num
    num += 1

---

>>> import counter
>>> counter.num
0
>>> counter.add()
>>> counter.num
1

---

>>> from counter import num, add
>>> num
0
>>> add()
>>> num
0                 
>>> import counter
>>> counter.num
1                 

---

>>> dir(__builtins__)

---

>>> help(max)

---

>>> print(max.__doc__)
max(iterable[, key=func]) -> value
max(a, b, c, ...[, key=func]) -> value
With a single iterable argument, return its largest item.
With two or more arguments, return the largest argument.

---

>>> list("Peyto Lake")
['P', 'e', 'y', 't', 'o', ' ', 'L', 'a', 'k', 'e']
>>> list = [1, 3, 5, 7]
>>> list("Peyto Lake")
Traceback (innermost last):
  File "<stdin>", line 1, in ?
TypeError: 'list' object is not callable

---

>>> import mymath
>>> mymath = mymath.area
>>> mymath.pi
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'function' object has no attribute 'pi'

---

>>> del list
>>> list("Peyto Lake")
['P', 'e', 'y', 't', 'o', ' ', 'L', 'a', 'k', 'e']
>>> import mymath
>>> mymath.pi
3.14159

---

>>> x1 = 6
>>> xl = x1 - 2
>>> x1
6
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'x1', 'xl']

---

n = 0

---

import config
def add():
    config.n += 1

---

>>> import config
>>> import mymodule
>>> config.n
0
>>> mymodule.add()
>>> config.n
1                 

