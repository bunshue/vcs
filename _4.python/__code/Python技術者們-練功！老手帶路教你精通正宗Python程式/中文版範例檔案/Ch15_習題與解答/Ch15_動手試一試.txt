### 15.2 ###

class Rectangle:
    def __init__(self): 
        self.height = 1
        self.width = 2

### 15.3 ###

class Rectangle:
    def __init__(self, width, height): 
        self.height = height
        self.width = width
        
    def area(self):
        return self.height * self.width

### 15.5 ###

class Circle:
    pi = 3.14159
    all_circles = []

    def __init__(self, radius):
        self.radius = radius
        self.__class__.all_circles.append(self)    
        
    def area(self):
        return self.radius * self.radius * Circle.pi
    
    def circumference(self):
        return 2 * self.radius * Circle.pi
    
    @classmethod
    def total_circumference(cls):
        """class method to total the circumference of all Circles """
        total = 0
        for c in cls.all_circles:
            total = total + c.circumference()
        return total

### 15.6 ###

class Shape:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Rectangle(Shape):
    def __init__(self, x, y):
        super().__init__(x, y)

---

def area(self):
    return self.x * self.x

將 area（）方法放在 Square 所繼承的Rectangle類別中是有意義的，
但將它放在 Shape 中並不是很有用，因為不同的形狀計算面積的規則
也不一樣，基底類別中的 area（）方法不管怎麼寫都會被不同形狀特
有的計算方式所覆蓋。

### 15.9 ###

class Rectangle():
    def __init__(self, x, y):
        self.__x = x
        self.__y = y

類別外部將無法再以 .x 和 .y 來存取維度變數。

### 15.10 ###

class Rectangle():
    def __init__(self, x, y):
        self.__x = x
        self.__y = y
    
    @property
    def x(self):
        return self.__x
            
    @x.setter
    def x(self, new_x):
        if new_x >= 0:
            self.__x = new_x
            
    @property
    def y(self):
        return self.__y
            
    @y.setter
    def y(self, new_y):
        if new_y >= 0:
            self.__y = new_y
            
>>> my_rect = Rectangle(1,2)
>>> print(my_rect.x, my_rect.y)
1 2
>>> my_rect.x = 4
>>> my_rect.y = 5
>>> print(my_rect.x, my_rect.y)
4 5


