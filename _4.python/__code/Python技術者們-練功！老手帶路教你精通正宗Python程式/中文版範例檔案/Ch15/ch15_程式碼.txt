### 15.1 ###

class MyClass:
    pass

---

instance1 = MyClass()
instance2 = MyClass()

### 15.1.1 ###

>>> class Circle:
...     """一個空的類別"""
...     pass
...
>>> my_circle1 = Circle()
>>> my_circle1.radius = 5  
>>> print(2 * 3.14 * my_circle1.radius)
31.4
>>> my_circle2 = Circle()
>>> my_circle2.radius = 3
>>> print(2 * 3.14 * my_circle2.radius)
18.84

---

>>> my_circle1.__doc__
'一個空的類別'

---

>>> class Circle:
...     def __init__(self):   
...         self.radius = 1
...
>>> my_circle = Circle() 
>>> print(2 * 3.14 * my_circle.radius) 
6.28 
>>> my_circle.radius = 5 
>>> print(2 * 3.14 * my_circle.radius) 
31.400000000000002

---

>>> class Circle:
...    def __init__(self):
...        self.radius = 1   
...        radius = 2   
...        
>>> my_circle =Circle()
>>> my_circle.radius
1

### 15.3 ###

>>> class Circle:
...     def __init__(self):
...         self.radius = 1
...     def area(self):
...         return self.radius * self.radius * 3.14159
...
>>> c = Circle() 
>>> print(c.area())  
3.14159
>>> c.radius = 3
>>> print(c.area())
28.27431
>>> print(Circle.area(c))
28.27431

---

class Circle:
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return self.radius * self.radius * 3.14159

---

class MyName:
    def c_method(self, n)
        self.name = n
        ...

---

c = Circle(5)

---

def __init__(self, radius=1):

### 15.4 ###

class Circle:
    pi = 3.14159
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return self.radius * self.radius * Circle.pi

---

>>> Circle.pi
3.14159
>>> Circle.pi = 4
>>> Circle.pi
4
>>> Circle.pi = 3.14159
>>> Circle.pi
3.14159

---

>>> c = Circle(3)
>>> c.area()
28.27431

---

>>> Circle
<class '__main__.Circle'>
>>> c.__class__
<class '__main__.Circle'>

---

>>> c.__class__.pi
3.14159

### 15.4.1 ###

>>> c = Circle(3)
>>> c.pi
3.14159

---

>>> c1 = Circle(1)
>>> c2 = Circle(2)
>>> c1.pi = 3.14
>>> c1.pi
3.14
>>> c2.pi
3.14159
>>> Circle.pi
3.14159

### 15.5.1 ###

>>> import circle
>>> c1 = circle.Circle(1)
>>> c2 = circle.Circle(2)
>>> circle.Circle.total_area()
15.70795
>>> c2.radius = 3
>>> circle.Circle.total_area()
31.415899999999997
>>> c1.total_area()  
31.415899999999997

### 15.5.2 ###

>>> import circle_cm
>>> c1 = circle_cm.Circle(1)
>>> c2 = circle_cm.Circle(2)
>>> circle_cm.Circle.total_area()
15.70795
>>> c2.radius = 3
>>> circle_cm.Circle.total_area()
31.415899999999997

### 15.6 ###

class Square:
    def __init__(self, side=1):
        self.side = side

---

class Square:
    def __init__(self, side=1, x=0, y=0):
        self.side = side
        self.x = x
        self.y = y
class Circle:
    def __init__(self, radius=1, x=0, y=0):
        self.radius = radius
        self.x = x
        self.y = y

---

class Shape:
    def __init__(self, x, y):
        self.x = x
        self.y = y
class Square(Shape):
    def __init__(self, side=1, x=0, y=0):
        super().__init__(x, y)
        self.side = side
class Circle(Shape):
    def __init__(self, r=1, x=0, y=0):
        super().__init__(x, y)
        self.radius = r

---

class Shape:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def move(self, delta_x, delta_y):
        self.x = self.x + delta_x
        self.y = self.y + delta_y

---

>>> c = Circle(1)
>>> c.move(3, 4)
>>> c.x
3
>>> c.y
4

### 15.7 ###

class P:
    z = "Hello"
    def set_p(self):
        self.x = "Class P"
    def print_p(self):
         print(self.x)
class C(P):
    def set_c(self):
        self.x = "Class C"
    def print_c(self):
        print(self.x)

---

>>> c = C()
>>> c.set_p()
>>> c.print_p()
Class P
>>> c.print_c()
Class P
>>> c.set_c()
>>> c.print_c()
Class C
>>> c.print_p()
Class C

---

>>> c.z; C.z; P.z
'Hello'
'Hello'
'Hello'

---

>>> C.z = "Bonjour"
>>> c.z; C.z; P.z
'Bonjour'
'Bonjour'
'Hello'

---

>>> c.z = "Ciao"
>>> c.z; C.z; P.z
'Ciao'
'Bonjour'
'Hello'

### 15.8 ###

class Shape:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def move(self, delta_x, delta_y):
        self.x = self.x + delta_x    
        self.y = self.y + delta_y

---

class Circle(Shape):                 
    pi = 3.14159                     
    all_circles = []                 
    def __init__(self, r=1, x=0, y=0):
        super().__init__(x, y)        
        self.radius = r
        __class__.all_circles.append(self)
    @classmethod                          
    def total_area(cls):
        area = 0
        for circle in cls.all_circles:
            area += cls.circle_area(circle.radius)
        return area
    @staticmethod
    def circle_area(radius):
        return Circle.pi * radius * radius 

---

>>> c1 = Circle()
>>> c1.radius, c1.x, c1.y
(1, 0, 0)

---

>>> c2 = Circle(2, 1, 1)
>>> c2.radius, c2.x, c2.y
(2, 1, 1)

---

>>> c2.move(2, 2)
>>> c2.radius, c2.x, c2.y
(2, 3, 3)

---

>>> Circle.all_circles
[<__main__.Circle object at 0x7fa88835e9e8>, <__main__.Circle object at 0x7fa88835eb00>]
>>> [c1, c2]
[<__main__.Circle object at 0x7fa88835e9e8>, <__main__.Circle object
>>> at 0x7fa88835eb00>]

---

>>> Circle.total_area()
15.70795
>>> c2.total_area()
15.70795

===

>>> Circle.circle_area(c1.radius)
3.14159
>>> c1.circle_area(c1.radius)
3.14159

### 15.9 ###

class Mine:
    def __init__(self):
        self.x = 2
        self.__y = 3 
    def print_y(self):
        print(self.__y)

---

>>> m = Mine()

---

>>> print(m.x)
2

---

>>> print(m.__y)
Traceback (innermost last):
  File "<stdin>", line 1, in ?
AttributeError: 'Mine' object has no attribute '__y'

---

>>> m.print_y()
3

---

>>> dir(m)
['_Mine__y', 'x', ...]

---

m1.set_x(m2.get_x() + m3.get_x() * 2)

---

m1.x = m2.x + m3.x * 2

### 15.10 ###

class Temperature:
    def __init__(self):
        self._temp_fahr = 0
    @property
    def temp(self):
        return (self._temp_fahr - 32) * 5 / 9

---

>>> t = Temperature()
>>> t._temp_fahr
0
>>> t.temp
-17.77777777777778  

---

    @temp.setter    
    def temp(self, new_temp):
        self._temp_fahr = new_temp * 9 / 5 + 32

---

>>> t.temp = 34
>>> t._temp_fahr
93.2    
>>> t.temp
34.0

### 15.11 ###

>>> import cs
>>> c = cs.C() 
>>> c.m()
直接存取區域、全域、和內建命名空間
區域命名空間: ['lv', 'p', 'self'] 
參數: p
區域變數: lv
全域命名空間: ['C',   'mf',   '__builtins__',   '__file__',   '__package__', 'mv', 'SC', '__name__', '__doc__']
模組變數: mv
模組函式: mf()
透過 'self' 存取物件, 類別, 父類別命名空間 
物件命名空間: ['_C__pcv', '_C__piv', '_C__pm', '_SC__pscv', '_SC__psiv', '_SC__spm', '__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'cv', 'iv', 'm', 'm2', 'scv', 'siv', 'sm']
物件變數: self.xi
私有物件變數: self.__piv
父類別定義的物件變數: self.siv (但必須透過 SC.siv 才能賦值)
類別命名空間: ['_C__pcv', '_C__pm', '_SC__pscv', '_SC__spm', '__class__','__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'cv', 'm', 'm2', 'scv', 'sm']
類別變數: self.cv (但必須透過 C.cv 才能賦值)
方法: self.m2()
私有類別變數: self.__pcv (但必須透過 C.__pcv 才能賦值)
私有方法: self.__pm()
父類別命名空間: ['_SC__pscv', '_SC__spm', '__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'scv', 'sm']
父類別的方法: self.sm()
父類別的類別變數: self.scv

### 15.13 ###

class E:
. . .
class F:
. . .
class G:
. . .
class D(G):
. . .
class C:
. . .
class B(E, F):
. . .
class A(B, C, D):
. . .



