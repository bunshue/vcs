### 6.1 ###

>>> x = "Hello"
>>> x[0]
'H'
>>> x[-1]
'o'
>>> x[1:]
'ello'

---

>>> x = "Goodbye\n"
>>> x = x[:-1]
>>> x
'Goodbye'

---

>>> len("Goodbye")
7

---

### 6.2 ###

>>> x = "Hello " + "World"
>>> x
'Hello World'

---

>>> x = "Hello "   "World"
>>> x
'Hello World'

---

>>> 8 * "x"
'xxxxxxxx'

### 6.3.2 ###

>>> 'm'
'm'
>>> '\155'
'm'
>>> '\x6D'
'm'
>>> '\x6d'
'm'

---

>>> '\n'
'\n'
>>> '\012'
'\n'
>>> '\x0A'
'\n'

---

>>> unicode_a ='\N{LATIN SMALL LETTER A}'
>>> unicode_a
'a'                                      
>>> unicode_a_with_acute = '\N{LATIN SMALL LETTER A WITH ACUTE}'      
>>> unicode_a_with_acute
'á'
>>> "\u00E1"                             
'á'

### 6.3.3 ###

>>> 'a\n\tb'
'a\n\tb'
>>> print('a\n\tb')
a
    b

---

>>> print("abc\n")
abc

>>> print("abc\n", end="")           
abc
>>>

### 6.4.1 ###

>>> " ".join(["join", "puts", "spaces", "between", "elements"])
'join puts spaces between elements'

---

>>> "::".join(["Separated", "with", "colons"])
'Separated::with::colons'

---

>>> "".join(["Separated", "by", "nothing"])
'Separatedbynothing'

---

>>> x = "You\t\t can have tabs\t\n \t and newlines \n\n mixed in"
>>> x.split()
['You', 'can', 'have', 'tabs', 'and', 'newlines', 'mixed', 'in']
>>> x = "Mississippi"
>>> x.split("ss")
['Mi', 'i', 'ippi']

---

>>> x = 'a b c d'
>>> x.split(' ', 1)
['a', 'b c d']
>>> x.split(' ', 2)
['a', 'b', 'c d']
>>> x.split(' ', 9)
['a', 'b', 'c', 'd']

---

>>> x = 'a\nb c d'
>>> x.split(' ', 2)
['a\nb', 'c', 'd']
>>> x.split(None, 2)
['a', 'b', 'c d']

### 6.4.2 ###

>>> float('123.456')
123.456
>>> float('xxyy') 
Traceback (innermost last):
 File "<stdin>", line 1, in ?
ValueError: could not convert string to float: 'xxyy'
>>> int('3333')
3333
>>> int('123.456')
Traceback (innermost last):
 File "<stdin>", line 1, in ?
ValueError: invalid literal for int() with base 10: '123.456'
>>> int('10000', 8)
4096
>>> int('101', 2)
5
>>> int('ff', 16)
255
>>> int('123456', 6)
Traceback (innermost last):
 File "<stdin>", line 1, in ?
ValueError: invalid literal for int() with base 6: '123456'

### 6.4.3 ###

>>> x = "  Hello,    World\t\t "
>>> x.strip()
'Hello,    World'
>>> x.lstrip()
'Hello,    World\t\t '
>>> x.rstrip()
'  Hello,    World'

---

>>> import string
>>> string.whitespace
' \t\n\r\x0b\x0c'
>>> " \t\n\r\v\f"
' \t\n\r\x0b\x0c'

---

>>> x = "www.python.org"
>>> x.strip("w")        
'.python.org'
>>> x.strip("gor")      
'www.python.'
>>> x.strip(".gorw")    
'python'

---

### 6.4.4 ###

>>> x = "123"
>>> x.isdigit() 
True
>>> x.isalpha() 
False
>>> x = "MM"
>>> x.islower() 
False
>>> x.isupper() 
True

### 6.5.1 ###

>>> x = "The string"
>>> "str" in x
True
>>> "sTr" in x
False
>>> "e s" in x
True

### 6.5.2 ###

>>> x = "Mississippi"
>>> x.find("ss")
2
>>> x.find("zz")
-1

---

>>> x = "Mississippi"
>>> x.find("s")
2
>>> x.find("s",2)
2
>>> x.find("s",4)
5
>>> x.find("s",4,5)
-1
>>> x.find("ss", 3)
5
>>> x.find("ss", 0, 3)
-1

---

>>> x = "Mississippi"
>>> x.rfind("ss")
5

---

>>> x = "Mississippi"
>>> x.count("ss")
2

---

>>> x = "Mississippi"
>>> x.startswith("Miss")
True
>>> x.startswith("Mist")
False
>>> x.endswith("pi")
True
>>> x.endswith("p")
False

---

>>> x.endswith(("i", "u"))
True

### 6.6.1 ###

>>> x = "Mississippi"
>>> x.replace("ss", "+++")
'Mi+++i+++ippi'

### 6.6.2 ###

>>> x = "~x ^ (y % z)"
>>> table = x.maketrans("~^()", "!&[]")
>>> x.translate(table)
'!x & [y % z]'

### 6.6.5 ###

>>> text = "Hello, World"
>>> wordList = list(text)
>>> wordList[6:] = []       
>>> wordList.reverse()
>>> text = "".join(wordList)
>>> print(text)             
,olleH

### 6.7 ###

>>> repr([1, 2, 3])
'[1, 2, 3]'
>>> x = [1]
>>> x.append(2)
>>> x.append([3, 4])
>>> 'the list x is ' + repr(x)
'the list x is [1, 2, [3, 4]]'

---

>>> repr(len)
'<built-in function len>'

---

>>> from datetime import datetime
>>> now = datetime.now()
>>> str(now)
'2019-04-20 12:56:26.814148'
>>> print(now)
2019-04-20 12:56:26.814148
>>> repr(now)
'datetime.datetime(2019, 4, 20, 12, 56, 26, 814148)'

### 6.8.1 ###

>>> "{} is the {} of {}".format("Ambrosia", "food", "the gods")
'Ambrosia is the food of the gods'
>>> "{{Ambrosia}} is the {} of {}".format("food", "the gods")
'{Ambrosia} is the food of the gods'

---

>>> "{} + {} = {}".format(1, 2, 1+2)
'1 + 2 = 3'
>>> x = [1, 2, "three"]
>>> "The {} contains: {}".format("list", x)
"The list contains: [1, 2, 'three']"

---

>>> "{2} is the {0} of {1}".format("food", "the gods", "Ambrosia")
'Ambrosia is the food of the gods'

---

>>> '{0}{1}{0}'.format('abc', 'def')
'abcdefabc'

### 6.8.2 ###

>>> "{food} is the food of {user}".format(food="Ambrosia", user="the gods") 
'Ambrosia is the food of the gods'

---

>>> "{0} is the food of {user[1]}".format("Ambrosia", user=["men", "the gods", "others"]) 
'Ambrosia is the food of the gods'

---

>>> "{0} is the food of {user}".format(user="the gods", "Ambrosia")
  File "<stdin>", line 1
SyntaxError: non-keyword arg after keyword arg

---

user = "the gods"
food = "Ambrosia"
s = food + " is the food of " + user

---

"Name: " + name + ", Age: " + age + ", Email: " + email 

---

"Name: " + name + ", Age: " + str(age) + ", Email: " + email 

---

"Name: {}, Age: {}, Email: {}".format(name, age, email)

---

"http://flag.com.tw/api/?user=" + user + "&key=" + key + "&id=" + id 
"http://flag.com.tw/api/?user={}&key={}&id={}".format(user, key, id)

### 6.6.3 ###

>>> "{0:10} is the food of gods".format("Ambrosia")
'Ambrosia   is the food of gods'
>>> "{0:>10} is the food of gods".format("Ambrosia")
'  Ambrosia is the food of gods'
>>> "{0:&>10} is the food of gods".format("Ambrosia")
'&&Ambrosia is the food of gods'

---

>>> "{0:{1}} is the food of gods".format("Ambrosia", 10)
'Ambrosia   is the food of gods'
>>> "{food:{width}} is the food of gods".format(food="Ambrosia", width=10) 
'Ambrosia   is the food of gods'

### 6.9 ###

>>> "%s is the %s of %s" % ("Ambrosia", "food", "the gods")
'Ambrosia is the food of the gods'

---

>>> "%s is the %s of %s" % ("Nectar", "drink", "gods")
'Nectar is the drink of gods'
>>> "%s is the %s of the %s" % ("Brussels Sprouts", "food", "foolish")
'Brussels Sprouts is the food of the foolish'

---

>>> x = [1, 2, "three"]
>>> "The %s contains: %s" % ("list", x)
"The list contains: [1, 2, 'three']"

### 6.9.1 ###

>>> "Pi is <%-6.2f>" % 3.14159 # use of the formatting sequence: %–6.2f
'Pi is <3.14  >'

### 6.9.2 ###

>>> num_dict = {'e': 2.718, 'pi': 3.14159}
>>> print("%(pi).2f - %(pi).4f - %(e).2f" % num_dict)
3.14 - 3.1416 - 2.72

### 6.10 ###

>>> value = 42
>>> message = f"The answer is {value}"
>>> print(message)
The answer is 42

---

>>> pi = 3.1415
>>> print(f"pi is {pi:{10}.{2}}")
pi is        3.1

### 6.11 ###

>>> unicode_string = '中'
>>> unicode_string
'中'
>>> xb = unicode_string.encode(
>>> xb
b'\xe4\xb8\xad'
>>> xb += 'A'
Traceback (most recent call last):
File "<pyshell#35>", line 1, in <module>
xb += 'A'
TypeError: can't concat str to bytes
>>> xb.decode()
'中'

---

>>> byte_object = "測試".encode("utf-8") 
>>> byte_object
b'\xe6\xb8\xac\xe8\xa9\xa6'

---

>>> len("測試")
2
>>> len(byte_object)
6
>>> "測試"[0]
'測'
>>> byte_object[0]
230

---

>>> byte_object.decode("utf-8")  

### 6.12 ###

>>> print("a")
a
>>> print(1)
1

---

>>> print("a", "b", "c")
a b c

---

>>> print("a", "b", "c", sep="|")
a|b|c
>>> print("a", "b", "c", end="\n\n")
a b c 

---

>>> print("a", "b", "c", file=open("testfile.txt", "w"))
