 日月 光华   - -   SE 精华区 文章 阅读 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   发信人 :   Jove   ( 死 生契阔 ， 与子 相悦 ， 执子之手 ， 与子偕老 ) ,   信 区 :   SE 标     题 :   [ zz ] MVC 减少 编程 复杂性   发信站 :   日月 光华   ( 2003 年 04 月 20 日 21 : 16 : 03   星期天 ) ,   站 内 信件 MVC 减少 编程 复杂性   　 　 随着 面向对象 的 语言 （ 如 Java ） 的 迅速 发展 和 普及 ， 越来越 多 的 编程人员 开始 在 应用 开发 中 使用 这些 语言 。 然而 原有 的 开发 语   言 （ 即 面向 操作 的 开发 语言 如 C ＋ ＋ 等 ） 在 短时间 内 还 不 可能 退出 历史舞台 ， 因此 现在 就 出现 了 面向对象 的 语言 和 传统 的 面向 操作 的   语言 共存 的 局面 。 在 设计 应用 中 同时 使用 两类 不同 的 语言 （ 混合 语言 设计 ） 比 过去 只 使用 一类 语言 会 带来 许多 新 的 问题 ， 其中 复杂   性 就是 混合 语言 设计 中 最 经常 遇到 的 问题 。 下面 我们 探讨 混合 语言 设计 中 可能 导致 复杂性 增加 的 地方 ， 以及 如何 减少 以至 消除 这些   复杂性 。   　 　 复杂性   　 　 复杂性 是 应用 开发 过程 中 最 令人 头疼 的 一个 问题 。 每当 在 一个 应用 中 增加 一个 功能 时 ， 它 的 复杂性 通常 呈几何 级 的 增长 。 这种   复杂性 往往 导致 程序 的 开发 无法 再 继续下去 。 这 也 是 现在 为什么 许多 应用 只有 Beta 版本 而 没有 正式版 的 原因 。   　 　 专家 将 应用 开发 过程 产生 的 复杂性 分为 两类 ， 即 非本质 的 （ accidental ） 和 本质 的 （ essential ） 。 本质 的 复杂性 是 对于 解决 目   标 问题 所 必然 产生 的 复杂性 ， 非本质 的 复杂性 是 由于 选择 了 不 适当 的 开发工具 和 设计 工具 而 产生 的 复杂性 。 对于 一个 功能 确定 的 程   序 来讲 ， 本质 的 复杂性 是 确定 的 ， 而 非本质 的 复杂性 则 是 没有 限制 的 。 因此 ， 一个 应用 的 开发 要 想 较 顺利 地 取得成功 ， 就 需要 尽 可   能地 减少 非本质 的 复杂性 。   　 　 OOD 的 特点   　 　 面向对象 的 设计 （ OOD ） 将 一个 程序 分解成 根据 具体 的 对象 而 设计 的 一系列 元素 。 这些 具体 对象 的 行为 和 数据 以 一种 叫做 “ 类   （ class ） ” 的 编程 单元 进行 打包 。 应用程序 创建 一个 或 多个 这些 类 的 例示 ， 也 称为 “ 对象 （ object ） ” 。 类 的 行为 是 通过 创建对象   之间 的 关系 组合 在 一起 的 。   　 　 OOD 允许 开发者 用 两种 主要 的 方法 来 控制 复杂性 的 增加 。 第一 ， OOD 定义 严格 的 出口 语义 ， 这 允许 开发者 隐藏 实现 的 细节 ， 并且   明确 说明 什么 方法 是 其它 的 对象 可以 访问 的 。 这个 信息 隐藏 使得 可以 对 大部分 的 代码 进行 修改 而 不 影响 其它 的 对象 。   　 　 第二 ， OOD 将 对象 之间 的 关系 分为 四类 ： 继承 、 包容 、 使用 和 协调 。 适当 地 使用 这些 关系 可以 大大减少 应用 开发 过程 中 本质 的 和   非本质 的 复杂性 。 如 ， 继承 是 产生 面向对象 设计 中 可 再 使用 的 主要 因素 。 这个 再 使用 性是 通过 代码 共享 和 多态性 获得 的 。 这种 再 使   用 可以 大大减少 应用 的 本质 的 复杂性 。 包容 允许 一个 类 的 用户 在 使用 包 容器 时 忽略 被 包容 的 类 （ class ） 。 这个 简化 使 设计者 能够 大   大 减少 应用 的 非本质 的 复杂性 。   　 　 可视化 接口 在 OOD 方面 的 不足   　 　 许多 程序 都 需要 可视化 接口 ， 这些 接口 由 对话框 、 选单 、 工具条 等 组成 。 这些 可视化 接口 的 增加 会 引进 OOD 设计 的 不足 ， 使得 一   个 好 的 面向对象 的 设计 走向 反面 。 可视化 接口 有 三个 属性 可能 会 给 应用 开发 带来 麻烦 。   　 　 第一 ， 可视化 接口 提高 了 传统 的 面向 操作 的 拓扑 结构 。 用户 产生 接口 事件 ， 如 开关 按键 和 列表框 选择 等 ， 受到 程序 的 一个 模块   的 驱动 并且 用来 对 静态 的 数据 进行 操作 。 在 设计 中将 这 面向 操作 的 拓扑 结构 同一个 面向对象 的 设计 混合 在 一起 将 导致 对象 之间 的 大   量 的 杂合 。   　 　 第二 ， 用户 接口 通常 对于 同样 的 信息 经常 会 需要 许多 不同 的 显示 。 如 ， 一个 客户 选择 列表框 可以 包含 一个 客户 的 名字 和 电话 号   码 以及 许多 其它 客户 的 名字 。   　 　 当 用户 选择 某个 特定 的 客户 后 ， 他 ／ 她 的 名字 和 电话号码 及其 它 全部 相关 的 信息 都 会 详细 地 显示 出来 。   　 　 除此之外 ， 一个 简单 的 程序 可能 具有 不同 的 用户 接口 。 如 一个 银行 账户 系统 有 一个 接口 用于 出纳员 来 访问 账户 平衡 、 存款 和 取   款 ， 而 监督者 的 接口 则 包含 另外 的 信息 并 加上 账号 管理 的 功能 。 这些 不同 的 接口 很 容易 导致 类 的 扩展 。   　 　 最后 ， 可视化 接口 在 整个 设计阶段 还会 进行 较大 的 改变 。 这些 改变 包括 完全 重新安排 用户 与 系统 的 交互 操作 等 。 可视化 接口 的   这些 改变 即使 在 最好 的 设计 中 也 会 增加 应用 开发 的 复杂性 。   　 　 MVC 弥补 可视化 接口 / OOD 的 不足   　 　 模型 ／ 界面 ／ 控制器 （ Model ／ View ／ Controller ， MVC ） 编程技术 允许 一个 开发者 将 一个 可视化 接口 连接 到 一个 面向对象 的 设   计中 ， 而 同时 还 可以 避免 我们 上面 讨论 的 几个 问题 。 MVC 最初 是 为 Smalltalk 语言 而 设计 的 。 MVC 通过 创建 下面 三个 层 将 面向对象 的 设   计与 可视化 接口 分开 ：   　 　 模型 （ Model ） ： 模型 包含 完成 任务 所 需要 的 所有 的 行为 和 数据 。 模型 一般 由 许多 类 组成 并且 使用 面向对象 的 技术 来 创建 满足 五   个 设计 目标 的 程序 。   　 　 界面 （ View ） ： 一个 界面 就是 一个 程序 的 可视化 元素 ， 如 对话框 、 选单 、 工具条 等 。 界面显示 从 模型 中 提供 的 数据 ， 它 并 不控   制 数据 或 提供 除 显示 外 的 其它 行为 。 一个 单一 的 程序 或 模型 一般 有 两种 界面 行为 。   　 　 控制器 （ Controller ） ： 控制器 将 模型 映射 到 界面 中 。 控制器 处理 用户 的 输入 ， 每个 界面 有 一个 控制器 。 它 是 一个 接收 用户 输   入 、 创建 或 修改 适当 的 模型 对象 并且 将 修改 在 界面 中 体现 出来 的 状态机 。 控制器 在 需要 时 还 负责 创建 其它 的 界面 和 控制器 。   　 　 控制器 一直 决定 哪些 界面 和 模型 组件 应该 在 某个 给定 的 时刻 是 活动 的 ， 它 一直 负责 接收 和 处理 用户 的 输入 ， 来自 用户 输入 的 任   何 变化 都 被 从 控制器 送到 模型 。   　 　 界面 从 模型 内 的 对象 中 显示 数据 。 这些 对象 的 改变 可以 通过 也 可以 不 通过 用户 的 交互 操作 来 完成 。 如 ： 在 一个 Web 浏览器 中 负责   接收 页面 的 对象 收集 和 装配 栈中 的 信息 ， 必须 有 某种 方式 来 让 这些 对象 通知 界面 数据 已经 被 改变 了 。 在 模型 变化 时有 两种 方法 来 对   界面 进行 更新 。   　 　 在 第一种 方法 中 ， 界面 可以 告诉 模型 它 正在 监视 哪些 对象 。 当 这些 对象 中有 任何 一个 发生变化 时 ， 一个 信息 就 被 发送给 界面 。   界面 接收 这些 信息 并且 相应 地 进行 更新 。 为了 避免 我们 上面 讨论 的 不足 ， 模型 必须 能够 不用 修改 就 支持 许多种 不同 的 界面显示 。   　 　 第二个 方法 并 不 直接 将 界面 连接 到 模型 中 ， 它 的 控制器 负责 在 模型 变化 时 更新 界面 。 控制器 通过 对模型 对象 或 观察器 方法 进行   监测 来 检测 模型 中 的 变化 。 这个 方法 不用 了解 界面 的 模型 知识 ， 因此 界面 就 变成 是 可以 跨 应用 使用 的 。   　 　 使用 MVC 的 优点   　 　 MVC 通过 以下 三种 方式 消除 与 用户 接口 和 面向对象 的 设计 有关 的 绝大部分 困难 ：   　 　 第一 ， 控制器 通过 一个 状态机 跟踪 和 处理 面向 操作 的 用户 事件 。 这 允许 控制器 在 必要 时 创建 和 破坏 来自 模型 的 对象 ， 并且 将面   向 操作 的 拓扑 结构 与 面向对象 的 设计 隔离 开来 。 这个 隔离 有助于 防止 面向对象 的 设计 走向 反面 。   　 　 第二 ， MVC 将 用户 接口 与 面向对象 的 模型 分开 。 这 允许 同样 的 模型 不用 修改 就 可 使用 许多 不同 的 界面显示 方式 。 除此之外 ， 如果   模型 更新 由 控制器 完成 ， 那么 界面 就 可以 跨 应用 再 使用 。   　 　 最后 ， MVC 允许 应用 的 用户 接口 进行 大 的 变化 而 不 影响 模型 。 每个 用户 接口 的 变化 将 只 需要 对 控制器 进行 修改 ， 但是 既然 控制器   包含 很少 的 实际 行为 ， 它 是 很 容易 修改 的 。   　 　 面向对象 的 设计 人员 在 将 一个 可视化 接口 添加 到 一个 面向对象 的 设计 中 时 必须 非常 小心 ， 因为 可视化 接口 的 面向 操作 的 拓扑 结   构 可以 大大增加 设计 的 复杂性 。   　 　 MVC 设计 允许 一个 开发者 将 一个 好 的 面向对象 的 设计 与 用户 接口隔离 开来 ， 允许 在 同样 的 模型 中 容易 地 使用 多个 接口 ， 并且 允许   在 实现 阶段 对接口 作大 的 修改 而 不 需要 对 相应 的 模型 进行 修改 。   - - " I ' m   not   a   great   programmer ;   I ' m   just   a   good   programmer   with   great   habits " .                                                                                                                                   - - - Kent   Beck ※   来源 : · 日月 光华   bbs . fudan . edu . cn · [ FROM :   10.85 . 38.144 ]   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [ 返回 上 一页 ]   [ 本 讨论区 ]