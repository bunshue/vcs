<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>
        <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的實作，它只會在資料庫不存在時重新建立資料庫，並選擇性地使用資料重新植入資料庫。若要植入資料庫，請建立衍生類別並覆寫 Seed 方法。</summary>
      <typeparam name="TContext">內容的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>當覆寫時，將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context">要植入的內容。</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>這個類別的執行個體是從 <see cref="T:System.Data.Entity.DbContext" /> 物件取得，而且可用來管理支援 <see cref="T:System.Data.Entity.DbContext" /> 或連接的實際資料庫。其中包括建立和刪除資料庫及檢查資料庫是否存在。資料庫的刪除及是否存在的檢查只需要使用連接就可以執行 (不需要完整內容)，方式是透過這個類別的靜態方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>如果內容有模型雜湊，而且資料庫包含模型雜湊且這些雜湊相符時，這個方法會傳回 true。這表示，用來建立資料庫的模型與目前模型相同，所以這兩個模型可以一起使用。</summary>
      <returns>如果內容與資料庫中的模型雜湊相符，則為 true，否則為 false。</returns>
      <param name="throwIfNoMetadata">如果設定為 true，則在與內容相關的模型或資料庫本身中找不到任何模型中繼資料時，便會擲回例外狀況。如果設定為 false，則在找不到中繼資料時，這個方法會傳回 true。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>傳回這個內容正在使用的連接。這可能會讓內容初始化，並在連接不存在時加以建立。</summary>
      <returns>這個內容正在使用的連接。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>在資料庫伺服器上針對支援內容中所定義的模型建立新的資料庫。請注意，在執行資料庫初始化策略之前呼叫這個方法將會停用該策略的執行。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>在資料庫伺服器上針對支援內容中所定義的模型建立新的資料庫，但前提是伺服器上尚未有同名的資料庫存在。</summary>
      <returns>如果資料庫尚未存在但是已建立則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>只從資料庫名稱或連接字串建立 <see cref="T:System.Data.Common.DbConnection" /> 時所要使用的連接 Factory。</summary>
      <returns>要使用的連接 Factory。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
      <param name="existingConnection">與資料庫的現有連接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>如果資料庫伺服器上有資料庫則將它刪除，否則不執行任何動作。與資料庫的連接是使用給定的資料庫名稱或連接字串所建立，如同 <see cref="T:System.Data.Entity.DbContext" /> 類別的文件中所述。</summary>
      <returns>如果資料庫存在但是已刪除則為 true，否則為 false。</returns>
      <param name="nameOrConnectionString">與資料庫連接的資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>傳回指定的資料庫是否等於目前的資料庫。</summary>
      <returns>如果指定的資料庫等於目前的資料庫，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的資料庫。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>針對資料庫執行給定的 DDL/DML 命令。</summary>
      <returns>執行此命令之後由資料庫傳回的結果。</returns>
      <param name="sql">命令字串。</param>
      <param name="parameters">要套用至命令字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>檢查資料庫是否存在伺服器上。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>檢查資料庫是否存在伺服器上。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
      <param name="existingConnection">與資料庫的現有連接。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>檢查資料庫是否存在伺服器上。與資料庫的連接是使用給定的資料庫名稱或連接字串所建立，如同 <see cref="T:System.Data.Entity.DbContext" /> 類別的文件中所述。</summary>
      <returns>如果資料庫存在則為 true，否則為 false。</returns>
      <param name="nameOrConnectionString">與資料庫連接的資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>傳回指定之資料庫的雜湊函式。</summary>
      <returns>指定之資料庫的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>取得目前資料庫的型別。</summary>
      <returns>目前資料庫的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>在此內容上執行登錄的 <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />。如果 <paramref name="force" /> 參數設定為 true，則會執行初始設定式，不論它之前是否已執行。如果在應用程式執行時刪除資料庫而且需要重新初始化，這樣的處理方式會很實用。</summary>
      <param name="force">如果設定為 true，則會執行初始設定式，即使它已經執行亦然。</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>取得或設定資料庫初始化策略。當從 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> 初始化 <see cref="T:System.Data.Entity.DbContext" /> 執行個體時，便會呼叫資料庫初始化策略。</summary>
      <param name="strategy">策略。</param>
      <typeparam name="TContext">內容的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回給定泛型型別的項目。此型別可以是擁有屬性的任何型別 (這些屬性符合從查詢傳回的資料行名稱) 或者可以是簡單基本型別。</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。</param>
      <typeparam name="TElement">查詢傳回之物件的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回給定型別的項目。此型別可以是擁有屬性的任何型別 (這些屬性符合從查詢傳回的資料行名稱) 或者可以是簡單基本型別。</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Collections.IEnumerable" /> 物件。</returns>
      <param name="elementType">查詢傳回之物件的型別。</param>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>傳回資料庫的字串表示法。</summary>
      <returns>資料庫的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>提供以物件形式查詢和使用實體資料的機能。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>使用慣例建構新的內容執行個體，以建立將建立連接的資料庫名稱。根據慣例，此名稱為衍生內容類別的完整名稱 (命名空間 + 類別名稱)。如需如何使用此名稱建立連接的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbContext" /> 的＜備註＞一節。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>使用現有的連接來連接資料庫，以建構新的內容執行個體。當處置此內容時，將不會處置此連接。</summary>
      <param name="existingConnection">要用於新內容的現有連接。</param>
      <param name="contextOwnsConnection">如果設定為 true，則處置內容時也會處置此連接，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>使用現有的連接連接資料庫來建構新的內容執行個體，並從給定的模型將它初始化。當處置此內容時，將不會處置此連接。</summary>
      <param name="existingConnection">要用於新內容的現有連接。</param>
      <param name="model">將會支援此內容的模型。</param>
      <param name="contextOwnsConnection">如果設定為 true，則處置內容時也會處置此連接，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>使用慣例建構新的內容執行個體，以建立將建立連接的資料庫名稱，並從給定的模型將它初始化。根據慣例，此名稱為衍生內容類別的完整名稱 (命名空間 + 類別名稱)。如需如何使用此名稱建立連接的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbContext" /> 的＜備註＞一節。</summary>
      <param name="model">將會支援此內容的模型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>根據現有的 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 建構新的內容執行個體。</summary>
      <param name="objectContext">包裝新內容的現有 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />。</param>
      <param name="dbContextOwnsObjectContext">如果設定為 true，則處置 <see cref="T:System.Data.Entity.DbContext" /> 時也會處置 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />，否則呼叫端必須處置此連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>使用給定字串當做資料庫的名稱或連接字串來建構新的內容執行個體 (這是將會建立連接的資料庫)。如需如何使用此名稱建立連接的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbContext" /> 的＜備註＞一節。</summary>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>使用給定字串當做資料庫的名稱或連接字串來建構新的內容執行個體 (這是將會建立連接的資料庫)，並從給定的模型將它初始化。如需如何使用此名稱建立連接的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbContext" /> 的＜備註＞一節。</summary>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
      <param name="model">將會支援此內容的模型。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>針對處理實體變更追蹤的內容功能提供存取權。</summary>
      <returns>用來存取功能的物件 (這些功能會處理變更追蹤)。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>為內容的組態選項提供存取權。</summary>
      <returns>用來存取組態選項的物件。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>為此內容建立資料庫執行個體，並允許您針對基礎資料庫執行建立、刪除或存在檢查。</summary>
      <returns>建立的資料庫。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>呼叫受保護的 Dispose 方法。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>處置內容。如果基礎 <see cref="T:System.Data.Objects.ObjectContext" /> 是由這個內容所建立，或者當建立此內容時將擁有權傳給此內容，則也會處置它。如果資料庫的連接 (<see cref="T:System.Data.Common.DbConnection" /> 物件) 是由這個內容所建立，或者當建立此內容時將擁有權傳給此內容，則也會處置此連接。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>取得給定實體的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件，以便提供有關此實體之資訊的存取權以及針對此實體執行動作的能力。</summary>
      <returns>實體的項目。</returns>
      <param name="entity">實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>取得給定實體的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 物件，以便提供有關此實體之資訊的存取權以及針對此實體執行動作的能力。</summary>
      <returns>實體的項目。</returns>
      <param name="entity">實體。</param>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>傳回指定的內容是否等於目前的內容。</summary>
      <returns>如果指定的內容等於目前的內容，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的內容。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>傳回指定之內容的雜湊函式。</summary>
      <returns>指定之內容的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>取得目前內容的型別。</summary>
      <returns>目前內容的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>驗證追蹤的實體，並傳回包含驗證結果的 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 集合。</summary>
      <returns>無效實體的驗證結果集合。此集合絕對不會是 null 而且不得包含 null 值或是有效實體的結果。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>這個方法的呼叫時機是在初始化衍生內容的模型時，但在鎖定此模型及使用此模型初始化內容之前。這個方法的預設實作不會做任何事，但是可以在衍生類別中覆寫它，以便可以進一步設定此模型然後再將它鎖定。</summary>
      <param name="modelBuilder">針對建立的內容定義模型的產生器。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>將此內容中所做的所有變更儲存到基礎資料庫。</summary>
      <returns>寫入基礎資料庫的物件數目。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>傳回指定之型別的 <see cref="T:System.Data.Entity.DbSet" />，以便針對內容中的給定實體執行 CRUD 作業。</summary>
      <returns>給定實體類型的 <see cref="T:System.Data.Entity.DbSet" /> 執行個體。</returns>
      <typeparam name="TEntity">應該傳回集合的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>傳回指定之型別的 <see cref="T:System.Data.Entity.DbSet" />，以便針對內容中的給定實體執行 CRUD 作業。</summary>
      <returns>給定實體類型的 <see cref="T:System.Data.Entity.DbSet" />。</returns>
      <param name="entityType">應該傳回集合的實體類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>可讓使用者覆寫只驗證 Added 和 Modified 實體之預設行為的擴充點。</summary>
      <returns>true 表示繼續驗證，否則為 false。</returns>
      <param name="entityEntry">應該要驗證的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>傳回在這個內容底層的 Entity Framework <see cref="T:System.Data.Objects.ObjectContext" />。</summary>
      <returns>傳回 <see cref="T:System.Data.Objects.ObjectContext" />。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>傳回內容的字串表示法。</summary>
      <returns>內容的字串表示法。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>可讓使用者自訂實體驗證或篩選出驗證結果的擴充點。由 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 呼叫。</summary>
      <returns>實體驗證結果。已覆寫時可能為 null。</returns>
      <param name="entityEntry">要驗證的 DbEntityEntry 執行個體。</param>
      <param name="items">包含自訂驗證之其他資訊的使用者定義字典。此字典將會傳遞給 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> 而且會公開為 <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />。這個參數是選擇性而且可以是 null。</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>包含一組擴充方法，可幫助您執行一般工作。</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Objects.ObjectContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢，如果不支援 NoTracking 則為來源查詢。</returns>
      <param name="source">來源查詢。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Objects.ObjectContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢，如果不支援 NoTracking 則為來源查詢。</returns>
      <param name="source">來源查詢。</param>
      <typeparam name="T">項目型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>新的 IQueryable，包含定義的查詢路徑。</returns>
      <param name="source">呼叫 Include 所在的來源 IQueryable。</param>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>T 的新 IQueryable，包含定義的查詢路徑。</returns>
      <param name="source">呼叫 Include 所在的來源 IQueryable。</param>
      <param name="path">Lambda 運算式，表示要包含的路徑。</param>
      <typeparam name="T">正在查詢之實體的型別。</typeparam>
      <typeparam name="TProperty">所包含之導覽屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>指定要包含在查詢結果中的相關物件。</summary>
      <returns>T 的新 IQueryable，包含定義的查詢路徑。</returns>
      <param name="source">呼叫 Include 所在的來源 IQueryable。</param>
      <param name="path">要在查詢結果中傳回的相關物件清單 (以點分隔)。</param>
      <typeparam name="T">正在查詢之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>IQueryable 上的擴充方法，此方法會列舉查詢的結果。這等於呼叫 ToList 而不用實際建立清單。</summary>
      <param name="source">來源查詢。</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> 傳回 <see cref="T:System.ComponentModel.BindingList`1" /> 實作，它會維持與給定的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 同步。</summary>
      <returns>繫結清單。</returns>
      <param name="source">繫結清單將會持續同步的集合。</param>
      <typeparam name="T">項目型別。</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 是用來將 CLR 類別對應到資料庫結構描述。這種以程式碼為中心的建立實體資料模型 (EDM) 方式稱為 Code First。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別的新執行個體。探索初始模型的程序將會使用電腦上安裝之最新版 Entity Framework 所隨附的慣例集合。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別的新執行個體，它會使用一組特定的慣例來探索初始模型。</summary>
      <param name="modelBuilderVersion">要使用的慣例版本。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>根據使用這個產生器所執行的組態建立 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。此連接是用來判斷當做此用途使用的資料庫提供者是否會影響產生之模型的資料庫層級。</summary>
      <returns>已建立的模型。</returns>
      <param name="providerConnection">用來判斷提供者資訊的連接。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>根據使用這個產生器所執行的組態建立 <see cref="T:System.Data.Entity.Infrastructure.DbModel" />。必須指定提供者資訊，因為這會影響產生之模型的資料庫層級。如果是 SqlClient，非變異名稱為 'System.Data.SqlClient' 而且資訊清單語彙基元為版本年份 (例如 '2005' 或 '2008')。</summary>
      <returns>已建立的模型。</returns>
      <param name="providerInfo">此模型將會搭配使用的資料庫提供者。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>登錄型別當做模型中的複雜類型，並傳回可用來設定複雜類型的物件。可以針對相同的型別呼叫這個方法多次，以執行多行組態。</summary>
      <returns>指定之複雜類型的組態物件。</returns>
      <typeparam name="TComplexType">要登錄或設定的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>取得這個 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" />。登錄器允許向這個產生器登錄衍生的實體和複雜類型組態。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 的組態。</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>針對處理慣例的這個 <see cref="T:System.Data.Entity.DbModelBuilder" /> 設定提供存取權。</summary>
      <returns>此設定的存取權</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>登錄實體類型當做模型的一部分，並傳回可用來設定實體的物件。可以針對相同的實體呼叫這個方法多次，以執行多行組態。</summary>
      <returns>指定之實體類型的組態物件。</returns>
      <typeparam name="TEntityType">要登錄或設定的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>傳回指定的模型產生器是否等於目前的模型產生器。</summary>
      <returns>如果指定的模型產生器等於目前的模型產生器，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的模型產生器。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>傳回指定之模型產生器的雜湊函式。</summary>
      <returns>指定之模型產生器的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>取得目前模型產生器的型別。</summary>
      <returns>目前模型產生器的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>從模型中排除型別。這是用來從模型中移除型別，這些型別是之前在初始模型探索期間由慣例所加入。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體，以便鏈結多個呼叫。</returns>
      <typeparam name="T">要排除的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>從模型中排除型別。這是用來從模型中移除型別，這些型別是之前在初始模型探索期間由慣例所加入。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="types">要從模型中排除的型別。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>傳回模型產生器的字串表示法。</summary>
      <returns>模型產生器的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>這個列舉中的值可以直接提供給 <see cref="T:System.Data.Entity.DbModelBuilder" /> 類別，或者可以在套用至從 <see cref="T:System.Data.Entity.DbContext" /> 衍生之類別的 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 中使用。使用的值會定義從程式碼建立模型時，應該使用哪一個版本的 <see cref="T:System.Data.Entity.DbContext" /> 和 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>表示應該使用最新版本的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>表示應該使用隨附在 Entity Framework v4.1 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>表示將目標設為 .Net Framework 4 時，應該使用隨附在 Entity Framework v5.0 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>表示應該使用隨附在 Entity Framework v5.0 中的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 和 <see cref="T:System.Data.Entity.DbContext" /> 慣例的版本。</summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>這個屬性可以套用至衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的類別，以便設定從程式碼建立模型時，應該使用哪一個版本的 <see cref="T:System.Data.Entity.DbContext" /> 和 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例。如需 <see cref="T:System.Data.Entity.DbModelBuilder" /> 版本的詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 列舉。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>初始化 <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="version">要使用的 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>取得 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例版本。</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>表示用來執行建立、讀取、更新和刪除作業的實體集。非泛型版本的 <see cref="T:System.Data.Entity.DbSet`1" />，在建置階段不知道實體類型時可以使用。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>將給定的實體加入至處於 <see cref="F:System.Data.EntityState.Added" /> 狀態的內容。儲存變更時，處於 Added 狀態的實體會插入資料庫中。儲存變更之後，物件狀態會變更為 <see cref="F:System.Data.EntityState.Unchanged" />。</summary>
      <returns>實體。</returns>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>將給定的實體附加至處於 <see cref="F:System.Data.EntityState.Unchanged" /> 狀態的內容。</summary>
      <returns>實體。</returns>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.DbSet`1" /> 物件。</summary>
      <returns>泛型集合物件。</returns>
      <typeparam name="TEntity">要轉換成泛型集合物件之物件的基底類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>針對這個集合的型別建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>針對這個集合的型別或是衍生自這個集合之型別的型別，建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>實體執行個體，可能是 Proxy。</returns>
      <param name="derivedEntityType">衍生的實體類型。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>傳回指定的集合是否等於目前的集合。</summary>
      <returns>如果指定的物件等於目前的集合，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>使用主索引鍵值來嘗試尋找內容所追蹤的實體。如果實體不在內容中，則會針對資料來源中的資料執行並評估查詢，而且如果在內容或資料來源中找不到實體，則會傳回 null。請注意，Find 也會傳回已經加入至內容但尚未儲存至資料庫的實體。</summary>
      <returns>找到的實體或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>傳回指定之集合的雜湊函式。</summary>
      <returns>指定之集合的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>取得目前集合的型別。</summary>
      <returns>目前集合的型別。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>傳回 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，表示集合中目前正由內容追蹤而且尚未標示為 Deleted 的實體。存取此本機屬性永遠不會讓查詢傳送至資料庫。這個屬性通常是在已經執行查詢之後使用。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>將給定的實體標示為 <see cref="F:System.Data.EntityState.Deleted" />。儲存變更時，系統會從資料庫中刪除此實體。實體必須存在於某個其他狀態的內容中，然後才會呼叫這個方法。</summary>
      <returns>實體。</returns>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回此集合中的實體。根據預設，傳回的實體會由內容所追蹤。這可藉由在此方法傳回的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 上呼叫 AsNoTracking 來變更。</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">要套用至 SQL 查詢字串的參數。</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>表示用來執行建立、讀取、更新和刪除作業的具型別實體集。DbSet 不可公開建構，只能從 <see cref="T:System.Data.Entity.DbContext" /> 執行個體建立。</summary>
      <typeparam name="TEntity">定義集合的型別。此型別可以是衍生型別以及基底類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>將給定的實體加入至處於 <see cref="F:System.Data.EntityState.Added" /> 狀態的內容。儲存變更時，處於 Added 狀態的實體會插入資料庫中。儲存變更之後，物件狀態會變更為 <see cref="F:System.Data.EntityState.Unchanged" />。</summary>
      <returns>傳回 <see cref="{0}" />。</returns>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>將給定的實體附加至處於 <see cref="F:System.Data.EntityState.Unchanged" /> 狀態的內容。</summary>
      <returns>傳回 <see cref="{0}" />。</returns>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>針對這個集合的型別或是衍生自這個集合之型別的型別，建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>傳回 <see cref="{0}" />。</returns>
      <typeparam name="TDerivedEntity">定義集合的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>針對這個集合的型別建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>傳回 <see cref="{0}" />。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>傳回指定的物件是否等於目前的集合。</summary>
      <returns>如果指定的集合等於目前的集合，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的集合。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>使用主索引鍵值來嘗試尋找內容所追蹤的實體。如果實體不在內容中，則會針對資料來源中的資料執行並評估查詢，而且如果在內容或資料來源中找不到實體，則會傳回 null。請注意，Find 也會傳回已經加入至內容但尚未儲存至資料庫的實體。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>傳回指定之集合的雜湊函式。</summary>
      <returns>指定之集合的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>取得目前集合的型別。</summary>
      <returns>目前集合的型別。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>傳回 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，表示集合中目前正由內容追蹤而且尚未標示為 Deleted 的實體。存取此本機屬性永遠不會讓查詢傳送至資料庫。這個屬性通常是在已經執行查詢之後使用。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>傳回相等的非泛型 <see cref="T:System.Data.Entity.DbSet" /> 物件。</summary>
      <returns>傳回非泛型集合物件的 <see cref="T:System.Data.Entity.DbSet" />。</returns>
      <param name="entry">要傳回相等非泛型 <see cref="T:System.Data.Entity.DbSet" /> 所針對的項目。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>將給定的實體標示為 <see cref="F:System.Data.EntityState.Deleted" />。儲存變更時，系統會從資料庫中刪除此實體。實體必須存在於某個其他狀態的內容中，然後才會呼叫這個方法。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.DbSet" />。</returns>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>建立原始 SQL 查詢，此查詢將會傳回此集合中的實體。根據預設，傳回的實體會由內容所追蹤。這可藉由在此方法傳回的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 上呼叫 AsNoTracking 來變更。</summary>
      <returns>將在列舉時執行查詢的 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 物件。</returns>
      <param name="sql">SQL 查詢字串。</param>
      <param name="parameters">傳回的實體一定會具有這個集合的型別，而且絕對不會具有衍生型別。如果查詢的資料表可能包含其他實體類型的資料，則必須適當地撰寫 SQL 查詢，以確保只會傳回正確型別的實體。要套用至 SQL 查詢字串的參數。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>
        <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的實作，當初次在應用程式定義域中使用內容時，它一定會重新建立資料庫，並選擇性地使用資料重新植入資料庫。若要植入資料庫，請建立衍生類別並覆寫 Seed 方法。</summary>
      <typeparam name="TContext">內容的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>當覆寫時，將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context">要植入的內容。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>
        <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> 的實作，它只會在模型於資料庫建立後已變更時刪除及重新建立資料庫，並選擇性地使用資料重新植入資料庫。其達成方式是在建立資料庫時撰寫資料庫的存放區模型雜湊，然後將此雜湊與目前模型中產生的雜湊相比較。若要植入資料庫，請建立衍生類別並覆寫 Seed 方法。</summary>
      <typeparam name="TContext">內容的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>應該覆寫的動作，以便實際將資料加入內容中進行植入。預設實作不做任何動作。</summary>
      <param name="context">要植入的內容。</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>為資料庫初始設定式定義方法。</summary>
      <typeparam name="TContext">內容的型別。此型別參數是 Contravariant。也就是說，您可以使用指定的型別或是任何更不具衍生性的型別。如需關於共變數及反變數的詳細資訊，請參閱 。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>表示內容中所有實體的集合，或者可以從資料庫查詢且具有給定型別的集合。<see cref="T:System.Data.Entity.DbSet" /> 是 <see cref="T:System.Data.Entity.IDbSet`1" /> 的具體實作。</summary>
      <typeparam name="TEntity">定義集合的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>將給定的實體加入至處於 <see cref="F:System.Data.EntityState.Added" /> 狀態的內容。儲存變更時，處於 Added 狀態的實體會插入資料庫中。儲存變更之後，物件狀態會變更為 <see cref="F:System.Data.EntityState.Unchanged" />。</summary>
      <returns>傳回實體。</returns>
      <param name="entity">要加入的實體。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>將給定的實體附加至處於 <see cref="F:System.Data.EntityState.Unchanged" /> 狀態的內容。</summary>
      <returns>傳回實體。</returns>
      <param name="entity">要附加的實體。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>針對這個集合的型別建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>傳回實體執行個體，這可能是 Proxy。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>針對這個集合的型別或是衍生自這個集合之型別的型別，建立實體的新執行個體。這個執行個體不會加入或附加至集合中。如果設定基礎內容建立 Proxy 而且實體類型符合建立 Proxy 的需求，則傳回的執行個體將會是 Proxy。</summary>
      <returns>傳回實體執行個體，這可能是 Proxy。</returns>
      <typeparam name="TDerivedEntity">要建立之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>使用主索引鍵值來嘗試尋找內容所追蹤的實體。如果實體不在內容中，則會針對資料來源中的資料執行並評估查詢，而且如果在內容或資料來源中找不到實體，則會傳回 null。請注意，Find 也會傳回已經加入至內容但尚未儲存至資料庫的實體。</summary>
      <returns>傳回找到的實體或 null。</returns>
      <param name="keyValues">要尋找之實體的主索引鍵值。</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>傳回 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，表示集合中目前正由內容追蹤而且尚未標示為 Deleted 的實體。存取此本機屬性永遠不會讓查詢傳送至資料庫。這個屬性通常是在已經執行查詢之後使用。</summary>
      <returns>本機檢視。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>將給定的實體標示為 <see cref="F:System.Data.EntityState.Deleted" />。儲存變更時，系統會從資料庫中刪除此實體。實體必須存在於某個其他狀態的內容中，然後才會呼叫這個方法。</summary>
      <returns>傳回實體。</returns>
      <param name="entity">要移除的實體。</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>使用 Code First 移轉以將資料庫更新至最新移轉之 IDatabaseInitializer 的實作。</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> 初始化 MigrateDatabaseToLatestVersion 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> 初始化 MigrateDatabaseToLatestVersion 類別的新執行個體，這個執行個體會使用組態檔中的特定連接字串來連接到資料庫，以便執行移轉。</summary>
      <param name="connectionStringName">要用於移轉之連接字串的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>執行為給定內容初始化資料庫的策略。</summary>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 ChangeTracker 方法所傳回，可提供與實體變更追蹤有關之內容功能的存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>偵測對 POCO 實體的屬性和關聯性所做的變更。請注意，某些型別的實體 (例如變更追蹤 Proxy 及衍生自 <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> 的實體) 會自動報告變更，所以這些型別的實體通常不需要呼叫這個方法。也請注意，通常 <see cref="T:System.Data.Entity.DbContext" /> 的許多方法以及其相關類別會自動呼叫這個方法，因此需要明確呼叫這個方法的情況很少見。但是，通常為了效能的理由，可能需要從 <see cref="P:System.Data.Entity.DbContext.Configuration" /> 使用 AutoDetectChangesEnabled 旗標來關閉這個方法的自動呼叫。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>針對這個內容所追蹤的所有實體取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件。</summary>
      <returns>項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>針對這個內容所追蹤之給定型別的所有實體取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件。</summary>
      <returns>項目。</returns>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>傳回指定的追蹤程式是否等於目前的追蹤程式。</summary>
      <returns>如果指定的追蹤程式等於目前的追蹤程式，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的追蹤程式。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>傳回指定之追蹤程式的雜湊函式。</summary>
      <returns>指定之追蹤程式的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>取得目前追蹤程式的型別。</summary>
      <returns>目前追蹤程式的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>傳回追蹤程式的字串表示法。</summary>
      <returns>追蹤程式的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的型別。</typeparam>
      <typeparam name="TElement">集合項目的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>這個導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>取得值，指出是否已從資料庫載入實體的集合。</summary>
      <returns>如果已載入集合則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>從資料庫載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>傳回查詢，這原本是從資料庫載入這個集合所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算，例如在資料庫內計算集合中的實體數目，而不用實際載入這些實體。</summary>
      <returns>集合的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>這個類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> 方法傳回，並允許在實體的集合導覽屬性上執行類似載入的作業。</summary>
      <typeparam name="TEntity">這個屬性所屬之實體的型別。</typeparam>
      <typeparam name="TElement">實體集合中項目的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>這個導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>取得值，指出是否已從資料庫載入實體的集合。</summary>
      <returns>如果已載入集合則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>從資料庫載入實體的集合。請注意，已經存在於內容中的實體不會以資料庫中的值覆寫。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>針對這個物件所表示的導覽屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>傳回查詢，這原本是從資料庫載入這個集合所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算，例如在資料庫內計算集合中的實體數目，而不用實際載入這些實體。</summary>
      <returns>集合的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>實體資料模型 (EDM) 的不可變表示法，可用來建立 <see cref="T:System.Data.Objects.ObjectContext" /> 或者可以傳遞給 <see cref="T:System.Data.Entity.DbContext" /> 的建構函式。為了提高效能，這個型別的執行個體應該要快取，並重複加以使用來建構內容。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>建立 <see cref="T:System.Data.Objects.ObjectContext" /> 的執行個體或衍生自 ObjectContext 的類別。請注意，可以改為使用適當的 DbContext 建構函式建立 DbContext 的執行個體。如果使用衍生的 ObjectContext，它必須擁有包含單一 EntityConnection 參數的公用建構函式。建立的 ObjectContext 會使用傳遞的連接，但是內容不會擁有此連接。呼叫端必須在處置內容之後處置此連接。</summary>
      <returns>傳回內容。</returns>
      <param name="existingConnection">與資料庫的現有連接，可供內容使用。</param>
      <typeparam name="TContext">要建立之內容的型別。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的型別。</typeparam>
      <typeparam name="TComplexProperty">複雜屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>取得代表這個屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>取得代表這個屬性之巢狀屬性的物件。這個方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>這個類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 ComplexProperty 方法傳回，並允許存取複雜屬性的狀態。</summary>
      <typeparam name="TEntity">這個屬性所屬之實體的型別。</typeparam>
      <typeparam name="TComplexProperty">這個屬性所屬之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>取得代表這個屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="property">表示巢狀屬性的運算式。</param>
      <typeparam name="TNestedComplexProperty">巢狀屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>取得代表這個屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>取得代表這個屬性之巢狀複雜屬性的物件。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
      <typeparam name="TNestedComplexProperty">巢狀屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>針對這個物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>取得代表這個屬性之巢狀屬性的物件。這個方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="property">表示巢狀屬性的運算式。</param>
      <typeparam name="TNestedProperty">巢狀屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>取得代表這個屬性之巢狀屬性的物件。這個方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
      <typeparam name="TNestedProperty">巢狀屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>取得代表這個屬性之巢狀屬性的物件。這個方法可用於純量屬性或複雜屬性。</summary>
      <returns>表示巢狀屬性的物件。</returns>
      <param name="propertyName">巢狀屬性的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>表示資料庫連接的相關資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>建立 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類別的新執行個體，這個執行個體表示應用程式組態檔中指定的連接。</summary>
      <param name="connectionName">應用程式組態中之連接字串的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>根據連接字串建立 <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 類別的新執行個體。</summary>
      <param name="connectionString">要用於連接的連接字串。</param>
      <param name="providerInvariantName">要用於連接之提供者的名稱。若為 SQL Server，請使用 'System.Data.SqlClient'。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>取得目前執行個體的型別。</summary>
      <returns>目前執行個體的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>傳回表示目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>描述與 <see cref="T:System.Data.Entity.DbContext" /> 物件相關聯之資料庫連接字串的來源。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>此連接字串是依照慣例建立的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>此連接字串是從外部組態讀取的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>此連接字串是在執行階段明確指定的。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     此連接字串是由提供給 DbContextInfo 的連接資訊所覆寫。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>由 <see cref="T:System.Data.Entity.DbContext" /> 的 Configuration 方法所傳回，可為內容提供組態選項的存取。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>取得或設定是否啟用組態中的自動偵測變更。</summary>
      <returns>如果啟用組態中的自動偵測變更則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>傳回指定的組態是否等於目前的組態。</summary>
      <returns>如果指定的組態等於目前的組態則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的組態。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>傳回指定之組態的雜湊函式。</summary>
      <returns>指定之組態的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>取得目前組態的型別。</summary>
      <returns>目前組態的型別。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>取得或設定值，指出公開為導覽屬性之關聯性的消極式載入是否已啟用。根據預設，會啟用消極式載入。</summary>
      <returns>如果啟用消極式載入則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>取得或設定值，指出每當此架構建立實體類型的執行個體時，它是否會建立動態產生之 Proxy 類別的執行個體。請注意，即使使用這個旗標來啟用 Proxy 建立，也只會針對符合進行 Proxy 處理需求的實體類型來建立 Proxy 執行個體。預設會啟用 Proxy 建立。</summary>
      <returns>如果啟用 Proxy 建立則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>傳回組態的字串表示法。</summary>
      <returns>組態的字串表示法。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>取得或設定值，指出當叫用 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 時是否應該自動驗證追蹤的實體。預設值為 true。</summary>
      <returns>如果應該自動驗證追蹤的實體則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>提供有關給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的執行階段資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。您可以提供外部 config 物件 (例如 app.config 或 web.config)，而這個物件將在連接字串解析期間使用。這包括尋找連接字串和 DefaultConnectionFactory 項目。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
      <param name="config">表示組態檔的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> (將特定資料庫設為目標) 的新執行個體。您可以提供外部 config 物件 (例如 app.config 或 web.config)，而這個物件將在連接字串解析期間使用。這包括尋找連接字串和 DefaultConnectionFactory 項目。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
      <param name="config">表示組態檔的物件。</param>
      <param name="connectionInfo">要使用之資料庫的連接資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。您可以提供連接字串的外部清單，而這份清單將在連接字串解析期間用來取代外部組態檔中指定的任何連接字串。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
      <param name="connectionStringSettings">連接字串的集合。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> (將特定資料庫設為目標) 的新執行個體。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
      <param name="connectionInfo">要使用之資料庫的連接資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>初始化表示給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。您可以提供 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 物件，以便覆寫建構基礎 EDM 模型時所使用的預設決定提供者。</summary>
      <param name="contextType">衍生自 <see cref="T:System.Data.Entity.DbContext" /> 的型別。</param>
      <param name="modelProviderInfo">指定要設為目標之基礎 ADO.NET 提供者的 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 物件。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>取得或設定基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用之連接的 ADO.NET 提供者名稱。</summary>
      <returns>基礎型別所使用之連接的 ADO.NET 提供者名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>取得或設定基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用的連接字串。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用的連接字串。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>取得或設定基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用的連接字串名稱。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用的連接字串名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>取得或設定基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用之連接字串的來源。</summary>
      <returns>基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別所使用之連接字串的來源。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>取得或設定具象 <see cref="T:System.Data.Entity.DbContext" /> 型別。</summary>
      <returns>具象 <see cref="T:System.Data.Entity.DbContext" /> 型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>建立表示給定之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。</summary>
      <returns>如果可以建立基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別的執行個體，則傳回新的執行個體，否則傳回 null。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>取得或設定值，指出是否可以建立基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別。</summary>
      <returns>如果可以建立基礎 <see cref="T:System.Data.Entity.DbContext" /> 型別，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>取得或設定已經初始化之衍生內容的模型。</summary>
      <returns>已經初始化之衍生內容的模型。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>針對這個物件所表示之追蹤實體的給定泛型型別傳回泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 類別的新執行個體。追蹤之實體的型別必須與泛型型別相容，否則會擲回例外狀況。</summary>
      <returns>泛型版本。</returns>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>取得物件，表示從這個實體到相關實體集合的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>取得物件，表示這個實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>針對這個物件所表示的追蹤實體取得目前的屬性值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>取得實體。</summary>
      <returns>實體。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 是否等於這個執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相比較的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於這個執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的物件等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>存放區的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>取得目前資料庫實體項目的型別。</summary>
      <returns>目前資料庫實體項目的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>驗證這個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體並傳回驗證結果。</summary>
      <returns>實體驗證結果。如果覆寫 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法則可能為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段型別會因要求的成員種類而異。目前支援的成員型別以及其傳回型別為參考導覽屬性 (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />)、集合導覽屬性 (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />)、基本/純量屬性 (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) 和複雜屬性 (<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />)。</summary>
      <returns>表示成員的物件。</returns>
      <param name="propertyName">成員的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>針對這個物件所表示的追蹤實體取得原始的屬性值。原始的值通常是上一次從資料庫查詢時的實體屬性值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>取得物件，表示這個實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>取得物件，表示從這個實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫這個方法之後，此實體將會處於 Unchanged 狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>取得或設定實體的狀態。</summary>
      <returns>狀態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>傳回資料庫實體項目的字串表示法。</summary>
      <returns>資料庫實體項目的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>這個類別的執行個體會提供有關 <see cref="T:System.Data.Entity.DbContext" /> 所追蹤之實體的資訊存取權及控制權。請使用內容的 Entity 或 Entities 方法來取得這個型別的物件。</summary>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>取得物件，表示從這個實體到相關實體集合的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">表示導覽屬性的運算式。</param>
      <typeparam name="TElement">集合中項目的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>取得物件，表示從這個實體到相關實體集合的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
      <typeparam name="TElement">集合中項目的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>取得物件，表示從這個實體到相關實體集合的集合導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示這個實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="property">屬性。</param>
      <typeparam name="TComplexProperty">複雜屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>取得物件，表示這個實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
      <typeparam name="TComplexProperty">複雜屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>取得物件，表示這個實體的複雜屬性。</summary>
      <returns>表示複雜屬性的物件。</returns>
      <param name="propertyName">複雜屬性的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>針對這個物件所表示的追蹤實體取得目前的屬性值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>取得實體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 是否等於這個執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相比較的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於這個執行個體。如果兩個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體是相同 <see cref="T:System.Data.Entity.DbContext" /> 上相同實體的項目，這兩者會視為相同。</summary>
      <returns>如果指定的物件等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>查詢資料庫，以找出目前存在於資料庫中之追蹤實體值的複本。變更傳回的字典中的值將不會更新資料庫中的值。如果資料庫中找不到此實體，將會傳回 null。</summary>
      <returns>存放區的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼，適用於雜湊演算法和資料結構 (例如雜湊資料表)。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>取得目前資料庫實體的型別。</summary>
      <returns>目前資料庫實體的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>驗證這個 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 執行個體並傳回驗證結果。</summary>
      <returns>實體驗證結果。如果覆寫 <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> 方法則可能為 null。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段型別會因要求的成員種類而異。目前支援的成員型別以及其傳回型別為：參考導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />。集合導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />。基本/純量屬性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。複雜屬性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />。</summary>
      <returns>實體的成員。</returns>
      <param name="propertyName">成員的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>取得表示實體成員的物件。傳回之物件的執行階段型別會因要求的成員種類而異。目前支援的成員型別以及其傳回型別為：參考導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />。集合導覽屬性：<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />。基本/純量屬性：<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />。複雜屬性：<see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />。</summary>
      <returns>表示成員的物件。</returns>
      <param name="propertyName">成員的名稱。</param>
      <typeparam name="TMember">成員的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>針對這個物件所表示的追蹤實體傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>針對這個物件所表示的追蹤實體取得原始的屬性值。原始的值通常是上一次從資料庫查詢時的實體屬性值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示這個實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="property">屬性。</param>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>取得物件，表示這個實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>取得物件，表示這個實體的純量或複雜屬性。</summary>
      <returns>表示屬性的物件。</returns>
      <param name="propertyName">屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>取得物件，表示從這個實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">表示導覽屬性的運算式。</param>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>取得物件，表示從這個實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>取得物件，表示從這個實體到另一個實體的參考 (非集合) 導覽屬性。</summary>
      <returns>表示導覽屬性的物件。</returns>
      <param name="navigationProperty">導覽屬性的名稱。</param>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>從資料庫重新載入實體，以資料庫中的值覆寫任何屬性值。在呼叫這個方法之後，此實體將會處於 Unchanged 狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>取得或設定實體的狀態。</summary>
      <returns>狀態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>傳回資料庫實體值的字串表示法。</summary>
      <returns>資料庫實體值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>這是抽象基底類別，用來表示純量或複雜屬性或是實體的導覽屬性。純量和複雜屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />，參考導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />，而集合導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的型別。</typeparam>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>取得或設定這個屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>取得這個成員所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此成員之實體的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>傳回指定的項目是否等於目前的查詢。</summary>
      <returns>如果指定的項目等於目前的項目，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>傳回指定之項目的雜湊函式。</summary>
      <returns>指定之項目的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>取得目前項目的型別。</summary>
      <returns>目前項目的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>驗證這個屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 物件的集合。絕對不會是 null。如果此實體有效，此集合會是空的。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>取得屬性的名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>傳回資料庫屬性值的字串表示法。</summary>
      <returns>資料庫屬性值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>抽象基底類別，用來表示純量或複雜屬性或是實體的導覽屬性。純量和複雜屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />，參考導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />，而集合導覽屬性會使用衍生類別 <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />。</summary>
      <typeparam name="TEntity">這個屬性所屬之實體的型別。</typeparam>
      <typeparam name="TProperty">這個屬性所屬之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>取得或設定這個屬性的目前值。</summary>
      <returns>傳回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>取得這個成員所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此成員之實體的項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>傳回指定的查詢是否等於目前的查詢。</summary>
      <returns>如果指定的查詢等於目前的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>傳回指定之查詢的雜湊函式。</summary>
      <returns>指定之查詢的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>取得目前查詢的型別。</summary>
      <returns>目前查詢的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>驗證這個屬性。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 物件的集合。絕對不會是 null。如果此實體有效，此集合會是空的。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>取得資料庫成員項目的名稱。</summary>
      <returns>資料庫成員項目的名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>針對這個物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>傳回資料庫屬性值的字串表示法。</summary>
      <returns>資料庫屬性值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>表示 <see cref="T:System.Data.Entity.DbModelBuilder" /> 建立的實體資料模型 (EDM)。<see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> 方法可用來從 EDM 表示法轉換為 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，這是適合快取和建立 <see cref="T:System.Data.Entity.DbContext" /> 或 <see cref="T:System.Data.Objects.ObjectContext" /> 執行個體之模型的編譯快照集。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>為這個模式建立 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />，這是適合快取和建立 <see cref="T:System.Data.Entity.DbContext" /> 執行個體的編譯快照集。</summary>
      <returns>編譯的模型。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的型別。</typeparam>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>取得或設定這個屬性的目前值。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>這個屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>取得或設定值，指出這個屬性的值從資料庫載入之後是否已修改。</summary>
      <returns>如果這個執行個體已修改，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>取得或設定這個屬性的原始值。</summary>
      <returns>原始的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>屬於巢狀屬性之屬性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。這個方法只會針對複雜物件的屬性傳回非 null 項目，否則它會針對實體本身的屬性傳回 null。</summary>
      <returns>父代複雜屬性的項目，如果這是實體屬性則為 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>這個類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Property 方法傳回，並允許存取純量或複雜屬性的狀態。</summary>
      <typeparam name="TEntity">這個屬性所屬之實體的型別。</typeparam>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>取得或設定這個屬性的目前值。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>這個屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>取得或設定值，指出這個屬性的值從資料庫載入之後是否已修改。</summary>
      <returns>如果這個執行個體已修改，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>針對這個物件所表示的屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>取得或設定這個屬性的原始值。</summary>
      <returns>傳回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>屬於巢狀屬性之屬性的 <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />。這個方法只會針對複雜物件的屬性傳回非 null 項目，否則它會針對實體本身的屬性傳回 null。</summary>
      <returns>父代複雜屬性的項目，如果這是實體屬性則為 null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>基礎實體或複雜物件的所有屬性集合。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>建立新的字典，其中包含這個字典中所有屬性的複本。對新的字典所做的變更將不會反映在這個字典中，反之亦然。</summary>
      <returns>這個字典的複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>傳回指定的值是否等於目前的值。</summary>
      <returns>如果指定的值等於目前的值，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的值。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>傳回指定之值的雜湊函式。</summary>
      <returns>指定之值的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>取得目前值的型別。</summary>
      <returns>目前值的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>取得屬性的值，就像使用具索引的屬性 getter 一樣，但是具有泛型參數的型別。這對於巢狀字典特別實用，可避免撰寫具有許多轉換的運算式。</summary>
      <returns>傳回 <see cref="T:System.Type" />。<paramref name="propertyName" /> 指定的屬性值。</returns>
      <param name="propertyName">屬性的名稱。</param>
      <typeparam name="TValue">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>取得或設定已指定屬性名稱的屬性值。此值可能是這個類別的巢狀執行個體。</summary>
      <returns>屬性的值。</returns>
      <param name="propertyName">要擷取的屬性名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>在這個字典中取得所有屬性名稱的集合當做唯讀集合。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>從另一個字典讀取值來設定這個字典的值。另一個字典必須根據與這個字典相同的型別，或是根據衍生自這個字典之型別的型別。</summary>
      <param name="propertyValues">要從中讀取值的字典。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>從給定的物件讀取值來設定這個字典的值。給定的物件可能是任何型別。當物件上任何屬性的名稱符合字典中的屬性名稱而且可以讀取時，都會讀取該屬性。其他屬性都會被忽略。如此可從簡單「資料傳輸物件」(DTO) 複製屬性。</summary>
      <param name="obj">要從中讀取值的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>針對這個字典建立基礎型別的物件，並與這個字典中的屬性值結合。</summary>
      <returns>這個字典中複製到新物件的屬性。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>傳回資料庫屬性值的字串表示法。</summary>
      <returns>資料庫屬性值的字串表示法。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>儲存有關資料庫提供者的資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> 類別的新執行個體。</summary>
      <param name="providerInvariantName">提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</param>
      <param name="providerManifestToken">Schema 項目上提供者的資訊清單語彙基元資訊。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>取得提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</summary>
      <returns>資料庫提供者的資料提供者。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>取得 Schema 項目上提供者的資訊清單語彙基元資訊。</summary>
      <returns>資訊清單語彙基元。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>表示針對 <see cref="T:System.Data.Entity.DbContext" /> 的非泛型 LINQ to Entities 查詢。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 物件。</summary>
      <returns>泛型集合物件。</returns>
      <typeparam name="TElement">建立之查詢所針對的項目型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 項目型別。</summary>
      <returns>項目型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>傳回指定的查詢是否等於目前的查詢。</summary>
      <returns>如果指定的查詢等於目前的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>傳回指定之查詢的雜湊函式。</summary>
      <returns>指定之查詢的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>取得目前查詢的型別。</summary>
      <returns>目前查詢的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>傳回針對 <see cref="T:System.Data.Entity.DbContext" /> 所包含的非泛型 LINQ to Entities 查詢。</summary>
      <returns>包含的 LINQ 查詢。</returns>
      <param name="path">包含之 LINQ 的路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>取得此查詢的列舉 (使得針對存放區執行此查詢)。</summary>
      <returns>查詢的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 運算式。</summary>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供者。</summary>
      <returns>傳回 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>傳回基礎查詢的 <see cref="T:System.String" /> 表示法。</summary>
      <returns>查詢字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>表示針對 <see cref="T:System.Data.Entity.DbContext" /> 的 LINQ to Entities 查詢。</summary>
      <typeparam name="TResult">要查詢之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>傳回新的查詢，其中傳回的實體將不會在 <see cref="T:System.Data.Entity.DbContext" /> 中快取。</summary>
      <returns>已套用 NoTracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>傳回指定的查詢是否等於目前的查詢。</summary>
      <returns>如果指定的查詢等於目前的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>傳回指定之查詢的雜湊函式。</summary>
      <returns>指定之查詢的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>取得目前查詢的型別。</summary>
      <returns>目前查詢的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>傳回針對 <see cref="T:System.Data.Entity.DbContext" /> 所包含的 LINQ to Entities 查詢。</summary>
      <returns>包含的 LINQ。</returns>
      <param name="path">包含之 LINQ 的路徑。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>針對這個查詢傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>取得此查詢的列舉 (使得針對存放區執行此查詢)。</summary>
      <returns>傳回查詢的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>取得此查詢的列舉 (使得針對存放區執行此查詢)。</summary>
      <returns>傳回查詢的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 項目型別。</summary>
      <returns>傳回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 運算式。</summary>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable 提供者。</summary>
      <returns>傳回 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>傳回基礎查詢的 <see cref="T:System.String" /> 表示法。</summary>
      <returns>查詢字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 類別的非泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>傳回相等的泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> 物件。</summary>
      <returns>相等的泛型物件。</returns>
      <typeparam name="TEntity">這是成員宣告所在之實體的型別。</typeparam>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>目前的值。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>這個導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>取得值，指出是否已從資料庫載入實體。</summary>
      <returns>如果已載入實體則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>從資料庫載入實體。請注意，如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>傳回查詢，這原本是從資料庫載入這個實體所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算。</summary>
      <returns>此實體的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>這個類別的執行個體會從 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> 的 Reference 方法傳回，並允許在實體的參考導覽屬性上執行類似載入的作業。</summary>
      <typeparam name="TEntity">這個屬性所屬之實體的型別。</typeparam>
      <typeparam name="TProperty">此屬性的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>取得或設定導覽屬性的目前值。目前的值是導覽屬性所參考的實體。</summary>
      <returns>傳回 <see cref="T:System.Linq.IQueryable`1" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>這個導覽屬性所屬的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>擁有此導覽屬性之實體的項目。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>取得值，指出是否已從資料庫載入實體。</summary>
      <returns>如果已載入實體則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>從資料庫載入實體。如果此實體已經存在於內容中，不會以資料庫中的值覆寫此實體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>取得屬性名稱。</summary>
      <returns>屬性名稱。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> 針對這個物件所表示的導覽屬性傳回非泛型 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> 類別的新執行個體。</summary>
      <returns>傳回 <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />。</returns>
      <param name="entry">項目。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>傳回查詢，這原本是從資料庫載入這個實體所使用的查詢。傳回的查詢可以使用 LINQ 加以修改，以便在資料庫中執行篩選或運算。</summary>
      <returns>此實體的查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>表示實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。這個類別的執行個體會從實體類型的 <see cref="T:System.Data.Entity.DbSet" /> 執行個體取得。建立這個物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。非實體的 SQL 查詢會使用 <see cref="P:System.Data.Entity.DbContext.Database" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> 以取得這個類別的泛型版本。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>傳回新的查詢，其中查詢的結果將不會由關聯的 <see cref="T:System.Data.Entity.DbContext" /> 所追蹤。</summary>
      <returns>已套用 no-tracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>傳回指定的查詢是否等於目前的查詢。</summary>
      <returns>如果指定的查詢等於目前的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>執行查詢並傳回項目的列舉程式。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Collections.IEnumerator" /> 物件。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>傳回指定之查詢的雜湊函式。</summary>
      <returns>指定之查詢的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>取得目前查詢的型別。</summary>
      <returns>目前查詢的型別。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>傳回 <see cref="T:System.String" />，其中包含建立查詢時所設定的 SQL 字串。不包含參數。</summary>
      <returns>表示這個執行個體的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>表示實體的 SQL 查詢，該查詢是從 <see cref="T:System.Data.Entity.DbContext" /> 建立而且會使用該內容中的連接來執行。這個類別的執行個體會從實體類型的 <see cref="T:System.Data.Entity.DbSet`1" /> 執行個體取得。建立這個物件時不會執行此查詢，每當列舉此查詢時便會執行，例如，藉由使用 foreach。非實體的 SQL 查詢會使用 <see cref="P:System.Data.Entity.DbContext.Database" /> 加以建立。請參閱 <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> 以取得這個類別的非泛型版本。</summary>
      <typeparam name="TEntity">實體。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>傳回新的查詢，其中查詢的結果將不會由關聯的 <see cref="T:System.Data.Entity.DbContext" /> 所追蹤。</summary>
      <returns>已套用 no-tracking 的新查詢。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>傳回指定的查詢是否等於目前的查詢。</summary>
      <returns>如果指定的查詢等於目前的查詢，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的查詢。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>執行查詢並傳回項目的列舉程式。</summary>
      <returns>項目的列舉值。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>傳回指定之查詢的雜湊函式。</summary>
      <returns>指定之查詢的雜湊函式。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>取得目前查詢的型別。</summary>
      <returns>目前查詢的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>執行查詢並傳回項目的列舉程式。</summary>
      <returns>可以用於逐一查看項目的 <see cref="T:System.Collections.IEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>傳回 false。</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>擲回例外狀況，表示不支援直接繫結至存放區查詢。</summary>
      <returns>絕對不會傳回，一定會擲回。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>傳回 <see cref="T:System.String" />，其中包含建立查詢時所設定的 SQL 字串。不包含參數。</summary>
      <returns> 表示這個執行個體的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>當預期的行為是實體的 SaveChanges 會產生資料庫更新但實際上資料庫中沒有任何資料列受到影響時，<see cref="T:System.Data.Entity.DbContext" /> 所擲回的例外狀況。這通常表示，資料庫已經並行更新，而且原本預期要符合的並行 Token 實際上並未符合。這個例外狀況所參考的狀態項目並未序列化，因為安全性的緣故以及序列化之後狀態項目的存取將會傳回 null。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>表示資料庫更新期間所遇到的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>取得 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 物件，表示無法儲存到資料庫的實體。</summary>
      <returns>無法儲存到資料庫的實體。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>表示用來儲存有關資料庫內 EDM 之中繼資料的實體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>取得或設定中繼資料實體的識別碼，此識別碼目前一定是 1。</summary>
      <returns>識別碼。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>取得或設定模型雜湊，此雜湊是用來檢查從此模型建立資料庫之後，此模型是否已變更。</summary>
      <returns>模型雜湊。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>嘗試針對給定內容取得 Code First 所計算的模型雜湊。如果 Code First 模式中未使用此內容，這個方法將會傳回 null。</summary>
      <returns>雜湊字串。</returns>
      <param name="context">內容。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>包含用來存取 EDMX 表單中 Code First 所建立之實體資料模型的方法。當需要查看 Code First 在內部建立的模型時，這些方法通常會用來偵錯。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>搭配給定的內容使用 Code First 並將產生的實體資料模型寫入 EDMX 表單中的給定寫入器。這個方法只能搭配使用 Code First 並在內部建立模型的內容執行個體一起使用。此方法無法用於使用 Database First 或 Model First 建立的內容、使用預先存在的 <see cref="T:System.Data.Objects.ObjectContext" /> 建立的內容或是使用預先存在的 <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> 建立的內容。</summary>
      <param name="context">內容。</param>
      <param name="writer">寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>將給定 <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> 所表示的實體資料模型寫入 EDMX 表單中的給定寫入器。</summary>
      <param name="model">表示 EDM 的物件。</param>
      <param name="writer">寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>這個介面的實作是用來根據給定的資料庫名稱，針對某一種類型的資料庫伺服器建立 DbConnection 物件。在 <see cref="T:System.Data.Entity.Database" /> 類別上設定執行個體，好讓所有 <see cref="T:System.Data.Entity.DbContext" /> 物件得以建立而不需要任何連接資訊，或是只需要資料庫名稱或連接字串，就可以在預設情況下使用某種類型的資料庫伺服器。提供這個介面的兩個實作：<see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" />，這是用來建立與 Microsoft SQL Server 的連接 (包括 EXPRESS 版本) 以及 <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" />，這是用來建立與 Microsoft SQL Server Compact Edition 的連接。其他資料庫伺服器所適用的其他實作可視需要加入。實作應該具備執行緒安全或不可變，因為在同時間可能會有多個執行緒加以存取。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立連接。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>用於建立衍生之 <see cref="T:System.Data.Entity.DbContext" /> 執行個體的 Factory。請實作此介面，以便針對沒有公用預設建構函式的內容型別啟用設計階段服務和具現化。您可以在設計階段建立衍生的 <see cref="T:System.Data.Entity.DbContext" /> 執行個體，以便啟用特定的設計階段經驗，例如模型轉譯和 DDL 產生。設計階段服務可以自動探索與衍生之 <see cref="T:System.Data.Entity.DbContext" /> 型別位於相同組件的介面實作。</summary>
      <typeparam name="TContext">此型別參數是 Covariant。也就是說，您可以使用指定的型別或是任何更具衍生性的型別。如需關於共變數及反變數的詳細資訊，請參閱 。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>建立衍生之 <see cref="T:System.Data.Entity.DbContext" /> 型別的新執行個體。</summary>
      <returns>
        <see cref="TContext" /> 的執行個體</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>這個 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使得 <see cref="T:System.Data.Entity.DbModelBuilder" /> 在建立模型時包含有關此模型的中繼資料。當 <see cref="T:System.Data.Entity.DbContext" /> 依照慣例建立模型時，它會將這個慣例加入至 <see cref="T:System.Data.Entity.DbModelBuilder" /> 所使用之慣例的清單。如果使用 <see cref="T:System.Data.Entity.DbContext" /> 來建立資料庫，這會使得模型中繼資料寫入資料庫。然後這可用來確認上次針對資料庫使用此模型之後，此模型是否已變更。您可以藉由覆寫 <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" /> 方法從 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例的清單中移除此慣例。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>可以提供 <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> 執行個體之物件所實作的介面。<see cref="T:System.Data.Entity.DbContext" /> 類別會實作這個介面，以提供基礎 ObjectContext 的存取。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>取得物件內容。</summary>
      <returns>物件內容。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     這個類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server LocalDb 建立 DbConnection 物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     針對給定的 LocalDb 版本建立連接 Factory 的新執行個體。若為 SQL Server 2012 LocalDb，請使用 "v11.0"。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     針對給定的 LocalDb 版本建立連接 Factory 的新執行個體。若為 SQL Server 2012 LocalDb，請使用 "v11.0"。</summary>
      <param name="localDbVersion">要使用的 LocalDb 版本。</param>
      <param name="baseConnectionString">     要針對 'Initial Catalog'、'Data Source' 和 'AttachDbFilename' 以外之資料庫選項使用的連接字串。呼叫 CreateConnection 時，系統將會根據資料庫名稱在這個字串的前面加上 'Initial Catalog' 和 'AttachDbFilename'。'Data Source' 則是根據 LocalDbVersion 引數所設定。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     要針對 'Initial Catalog'、'Data Source' 和 'AttachDbFilename' 以外之資料庫選項使用的連接字串。呼叫 CreateConnection 時，系統將會根據資料庫名稱在這個字串的前面加上 'Initial Catalog' 和 'AttachDbFilename'。'Data Source' 則是根據 LocalDbVersion 引數所設定。預設值為 'Integrated Security=True; MultipleActiveResultSets=True;'。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     根據給定的資料庫名稱或連接字串建立 SQL Server LocalDb 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>這個 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使用衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別的名稱當做 Code First 所建置之概念模型的容器。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>這個 <see cref="T:System.Data.Entity.DbModelBuilder" /> 慣例會使用衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別的命名空間當做 Code First 所建置之概念模型的命名空間。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>這個類別的執行個體會在內部使用，以便建立插入運算式樹狀架構中的常數運算式來取代 <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> 和 <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> 的參考。</summary>
      <typeparam name="TElement">項目的型別。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 運算式樹狀架構中所預期的公用屬性。</summary>
      <returns>傳回 <see cref="T:System.Data.Objects.ObjectQuery`1" />。查詢。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>這個類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server Compact Edition 建立 DbConnection 物件。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> 使用空的 (預設) <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> 和 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> 屬性建立新的連接 Factory。</summary>
      <param name="providerInvariantName">提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>使用給定的 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> 和 <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> 屬性建立新的連接 Factory。</summary>
      <param name="providerInvariantName">提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</param>
      <param name="databaseDirectory">當 SQL Server Compact Edition 建立或讀取資料庫檔案時，在資料庫名稱前面加上的路徑 (此名稱將會形成 SQL Server Compact Edition 使用的檔案名稱)。空的字串將會導致 SQL Server Compact Edition 使用其預設位置當做資料庫檔案位置。</param>
      <param name="baseConnectionString">用於資料庫 (而非「資料來源」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在這個字串的前面加上資料來源。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>用於資料庫 (而非「資料來源」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在這個字串的前面加上資料來源。預設值為空字串，這表示不會使用其他選項。</summary>
      <returns>使用的連接字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立 SQL Server Compact Edition 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>當 SQL Server Compact Edition 建立或讀取資料庫檔案時，在資料庫名稱前面加上的路徑 (此名稱將會形成 SQL Server Compact Edition 使用的檔案名稱)。預設值為 "|DataDirectory|"，這表示檔案將會放在指定的資料目錄。</summary>
      <returns>資料庫的路徑。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>提供者非變異名稱，可指定應該使用的 SQL Server Compact Edition 版本。</summary>
      <returns>提供者非變異名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> 這個類別的執行個體是用來根據給定的資料庫名稱或連接字串，針對 SQL Server 建立 DbConnection 物件。預設會建立與 '.\SQLEXPRESS' 的連接。如果要變更這個值，可以在建構 Factory 執行個體時變更基本連接字串。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>使用預設的 BaseConnectionString 屬性 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True' 建立新的連接 Factory。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>使用給定的 BaseConnectionString 屬性建立新的連接 Factory。</summary>
      <param name="baseConnectionString">用於資料庫 (而非「初始資料庫目錄」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在這個字串的前面加上「初始資料庫目錄」。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>用於資料庫 (而非「初始資料庫目錄」) 之選項的連接字串。當呼叫 CreateConnection 時，將會根據資料庫名稱在這個字串的前面加上「初始資料庫目錄」。預設值為 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'。</summary>
      <returns>連接字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>根據給定的資料庫名稱或連接字串建立 SQL Server 的連接。如果給定的字串包含 '=' 字元，則會將它視為完整連接字串，否則只會將它視為資料庫名稱。</summary>
      <returns>初始化的 DbConnection。</returns>
      <param name="nameOrConnectionString">資料庫名稱或連接字串。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>這個屬性 (Attribute) 可套用至整個衍生 <see cref="T:System.Data.Entity.DbContext" /> 類別或是該類別上的個別 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 屬性 (Property)。當套用時，任何找出的 <see cref="T:System.Data.Entity.DbSet`1" /> 或 <see cref="T:System.Data.Entity.IDbSet`1" /> 屬性仍然會包含在模型中，但是不會自動初始化。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>當從 Database First 或 Model First 模式的 <see cref="T:System.Data.Entity.DbContext" /> 範本產生內容然後將此內容用於 Code First 模式時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="info">保存序列化物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> 類別的新執行個體。</summary>
      <param name="message">訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>表示以程式碼為基礎之移轉的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     加入作業以將資料行加入至現有的資料表。</summary>
      <param name="table">     要加入資料行之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">     要加入之資料行的名稱。</param>
      <param name="columnAction">     指定要加入之資料行的動作，亦即 c =&amp;gt; c.Int(nullable: false, defaultValue: 3)。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     加入作業以建立新的外部索引鍵限制式。</summary>
      <param name="dependentTable">     包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumn">外部索引鍵資料行。</param>
      <param name="principalTable">     包含這個外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumn">     這個外部索引鍵所參考的資料行。如果沒有提供值，則會參考主要資料表的主索引鍵。</param>
      <param name="cascadeDelete">     值，指出是否應該針對外部索引鍵關聯性設定串聯刪除。如果沒有提供值，則會關閉串聯刪除。</param>
      <param name="name">     資料庫中之外部索引鍵限制式的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     加入作業以建立新的外部索引鍵限制式。</summary>
      <param name="dependentTable">     包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumns">外部索引鍵資料行。</param>
      <param name="principalTable">     包含這個外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumns">     這個外部索引鍵所參考的資料行。如果沒有提供值，則會參考主要資料表的主索引鍵。</param>
      <param name="cascadeDelete">     值，指出是否應該針對外部索引鍵關聯性設定串聯刪除。如果沒有提供值，則會關閉串聯刪除。</param>
      <param name="name">     資料庫中之外部索引鍵限制式的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     加入作業以建立新的主索引鍵。</summary>
      <param name="table">     包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="column">主索引鍵資料行。</param>
      <param name="name">     資料庫中之主索引鍵的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     加入作業以根據多個資料行建立新的主索引鍵。</summary>
      <param name="table">     包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">主索引鍵資料行。</param>
      <param name="name">     資料庫中之主索引鍵的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     加入作業以更改現有資料行的定義。</summary>
      <param name="table">     資料行所在之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要變更之資料行的名稱。</param>
      <param name="columnAction">     指定資料行之新定義的動作，亦即 c =&amp;gt; c.String(nullable: false, defaultValue: "none")。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     加入作業以建立單一資料行的索引。</summary>
      <param name="table">     要建立索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="column">要建立索引之資料行的名稱。</param>
      <param name="unique">     值，指出這是否為唯一索引。如果沒有提供值，則會建立非唯一索引。</param>
      <param name="name">     要用於資料庫中之索引的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     加入作業以建立多個資料行的索引。</summary>
      <param name="table">     要建立索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">要建立索引之資料行的名稱。</param>
      <param name="unique">     值，指出這是否為唯一索引。如果沒有提供值，則會建立非唯一索引。</param>
      <param name="name">     要用於資料庫中之索引的名稱。如果沒有提供值，則會產生唯一名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     加入作業以建立新的資料表。</summary>
      <returns>允許進一步設定資料表建立作業的物件。</returns>
      <param name="name">資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columnsAction">     指定要包含在資料表中之資料行的動作，亦即 t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">     這個建立資料表作業中的資料行。您不需要指定此型別。系統會根據您所提供的 columnsAction 參數推斷此型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     要在降級處理序期間執行的作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     加入作業以卸除現有的資料行。</summary>
      <param name="table">     要卸除資料行之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     加入作業以根據名稱卸除外部索引鍵限制式。</summary>
      <param name="dependentTable">     包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">資料庫中之外部索引鍵限制式的名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     加入作業以根據設為目標的資料行卸除外部索引鍵限制式。</summary>
      <param name="dependentTable">     包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumn">外部索引鍵資料行。</param>
      <param name="principalTable">     包含這個外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="principalColumn">這個外部索引鍵所參考的資料行。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     加入作業以根據設為目標的資料行卸除外部索引鍵限制式。</summary>
      <param name="dependentTable">     包含外部索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="dependentColumns">外部索引鍵資料行。</param>
      <param name="principalTable">     包含這個外部索引鍵所參考之資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     加入作業以根據名稱卸除索引。</summary>
      <param name="table">     要卸除索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的索引名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     加入作業以根據設為目標的資料行卸除索引。</summary>
      <param name="table">     要卸除索引之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="columns">索引設為目標之資料行的名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     加入作業以卸除使用預設名稱建立的現有主索引鍵。</summary>
      <param name="table">     包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     加入作業以卸除沒有預設名稱的現有主索引鍵。</summary>
      <param name="table">     包含主索引鍵資料行的資料表。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要卸除的主索引鍵名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     加入作業以卸除資料表。</summary>
      <param name="name">     要卸除的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>判斷這個執行個體是否等於指定的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>取得參數或資料行的資料做為指定的型別。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>傳回目前執行個體的執行階段型別。</summary>
      <returns>表示目前執行個體之確切執行階段型別的 Type 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     加入作業以將資料表移至新的結構描述。</summary>
      <param name="name">     要移動之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newSchema">資料表要移往的結構描述。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     加入作業以重新命名資料行。</summary>
      <param name="table">     包含要重新命名之資料行的資料表名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="name">要重新命名之資料行的名稱。</param>
      <param name="newName">資料行的新名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     加入作業以重新命名資料表。若要變更資料表的結構描述，請使用 MoveTable。</summary>
      <param name="name">     要重新命名之資料表的名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="newName">     資料表的新名稱。結構描述名稱是選擇性的，如果沒有指定結構描述，則會採用 dbo。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     加入作業以執行 SQL 命令。</summary>
      <param name="sql">要執行的 SQL。</param>
      <param name="suppressTransaction">     值，指出是否應該在用於移轉處理序的交易外部執行 SQL。如果沒有提供值，則會在交易內部執行 SQL。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>傳回表示目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     要在升級處理序期間執行的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>與給定模型之移轉用法有關的組態。您通常會建立衍生自 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> 的組態類別，而非使用這個類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     初始化 DbMigrationsConfiguration 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     取得或設定值，指出自動移轉期間是否可接受資料遺失。如果設定為 false，而且自動移轉期間可能會發生資料遺失，就會擲回例外狀況。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     取得或設定值，指出是否可在移轉資料庫時使用自動移轉。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     取得或設定要對移轉進行 Scaffold 時使用的程式碼產生器。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     取得或設定表示要移轉之模型的衍生 DbContext。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     取得設定為要搭配給定之資料庫提供者使用的 SQL 產生器。</summary>
      <returns>針對資料庫提供者所設定的 SQL 產生器。</returns>
      <param name="providerInvariantName">要取得 SQL 產生器之資料庫提供者的名稱。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     取得或設定包含以程式碼為基礎之移轉的組件。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     取得或設定儲存以程式碼為基礎之移轉的子目錄。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     取得或設定用於以程式碼為基礎之移轉的命名空間。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     加入要用於給定之資料庫提供者的新 SQL 產生器。</summary>
      <param name="providerInvariantName">要設定 SQL 產生器之資料庫提供者的名稱。</param>
      <param name="migrationSqlGenerator">要使用的 SQL 產生器。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     取得或設定值以覆寫要移轉之資料庫的連接。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>表示與給定模型之移轉用法有關的組態。</summary>
      <typeparam name="TContext">內容。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>     初始化 <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體是否等於指定的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>取得參數或資料行的資料做為指定的型別。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>傳回目前執行個體的執行階段型別。</summary>
      <returns>表示目前執行個體之確切執行階段型別的 Type 執行個體。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     在升級為最新的移轉之後執行，以便允許更新初始資料。</summary>
      <param name="context">要用於更新初始資料的內容。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>用來將現有的移轉套用至資料庫。這個類別可用來升級和降級為任何給定的移轉。若要根據模型的變更對移轉進行 Scaffold，請使用 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     初始化 DbMigrator 類別的新執行個體。</summary>
      <param name="configuration">要用於移轉處理序的組態。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     取得用於移轉處理序的組態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     取得已經套用至目標資料庫的所有移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     取得已設定之移轉組件中定義的所有移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     取得已定義於組件但尚未套用至目標資料庫的所有移轉。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     移轉 ID，表示套用任何移轉之前的資料庫狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     將目標資料庫更新至給定的移轉。</summary>
      <param name="targetMigration">要升級/降級的目標移轉。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>一組 <see cref="T:System.Data.Entity.IDbSet`1" /> 的擴充方法。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>呼叫 SaveChanges 時，按照索引鍵加入或更新實體。相當於資料庫術語中的「更新並插入」作業。當您使用移轉來植入資料時，這個方法可能很有用。</summary>
      <param name="set">用來執行建立、讀取、更新和刪除作業的 <see cref="T:System.Data.Entity.IDbSet`1" /> 物件。</param>
      <param name="identifierExpression">運算式，它會指定用以判斷應該執行加入或更新作業的屬性。</param>
      <param name="entities">要加入或更新的實體。</param>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>呼叫 SaveChanges 時，按照索引鍵加入或更新實體。相當於資料庫術語中的「更新並插入」作業。當您使用移轉來植入資料時，這個方法可能很有用。</summary>
      <param name="set">用來執行建立、讀取、更新和刪除作業的 <see cref="T:System.Data.Entity.IDbSet`1" /> 物件。</param>
      <param name="entities">要加入或更新的實體。</param>
      <typeparam name="TEntity">實體的型別。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>表示用來設定資料行的 Helper 類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Binary 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="maxLength">陣列資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="isMaxLength">值，指出是否應該使用資料庫提供者所支援的最大長度。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="timestamp">值，指出是否應該將此資料行設定為時間戳記。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Boolean 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Byte 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 DateTime 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 DateTimeOffset 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>建立新的資料行定義以儲存 Decimal 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的數字整數位數。</param>
      <param name="scale">資料行的數字小數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Double 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存地理資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存幾何資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>取得目前執行個體的型別。</summary>
      <returns>目前執行個體的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 GUID 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Integer 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Long 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Short 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="identity">值，指出資料庫是否會在插入期間產生此資料行的值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Single 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 String 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="maxLength">字串資料所容許的最大長度。</param>
      <param name="fixedLength">值，指出所有資料是否應該填補至最大長度。</param>
      <param name="isMaxLength">值，指出是否應該使用資料庫提供者所支援的最大長度。</param>
      <param name="unicode">值，指出資料行是否支援 Unicode 內容。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>建立新的資料行定義以儲存 Time 資料。</summary>
      <returns>新建構的資料行定義。</returns>
      <param name="nullable">值，指出資料行是否允許 null 值。</param>
      <param name="precision">資料行的整數位數。</param>
      <param name="defaultValue">要當做此資料行之預設值使用的常數值。</param>
      <param name="defaultValueSql">當做此資料行之預設值使用的 SQL 運算式。</param>
      <param name="name">資料行名稱。</param>
      <param name="storeType">要用於此資料行的提供者特有資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>傳回表示目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Helper 類別，這個類別是用來進一步設定 <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 之 CreateTable 呼叫所建立的資料表。</summary>
      <typeparam name="TColumns">資料表中之所有資料行的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" /> 類別的新執行個體。</summary>
      <param name="createTableOperation">要進一步設定的資料表建立作業。</param>
      <param name="migration">用以建立資料表的移轉。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <returns>如果指定的物件等於目前的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>指定要針對資料表建立的外部索引鍵限制式。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="principalTable">外部索引鍵限制式設為目標之資料表的名稱。</param>
      <param name="dependentKeyExpression">Lambda 運算式，表示外部索引鍵的屬性。如果多個屬性組成外部索引鍵，請指定匿名型別 (包括屬性)。</param>
      <param name="cascadeDelete">值，指出是否應該針對外部索引鍵限制式設定串聯刪除。</param>
      <param name="name">這個外部索引鍵限制式的名稱。如果沒有提供名稱，則會計算預設名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>取得目前物件的雜湊碼。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>取得目前物件的型別。</summary>
      <returns>目前物件的型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>指定要針對資料表建立的索引。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="indexExpression">Lambda 運算式，表示要進行索引的屬性。如果要對多個屬性進行索引，請指定匿名型別 (包括屬性)。</param>
      <param name="unique">值，指出這是否為唯一索引。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>建立目前物件的淺層複本。</summary>
      <returns>目前物件的淺層複本。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>指定資料表的主索引鍵。</summary>
      <returns>它本身，以便鏈結多個呼叫。</returns>
      <param name="keyExpression">Lambda 運算式，表示要當做主索引鍵使用的屬性。如果主索引鍵是由多個屬性所組成，請指定匿名型別 (包括屬性)。</param>
      <param name="name">主索引鍵的名稱。如果提供了 null，則會產生預設名稱。</param>
      <param name="anonymousArguments">提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>傳回目前物件的字串表示。</summary>
      <returns>目前物件的字串表示。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>針對以程式碼為基礎的移轉產生 C# 程式碼。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>產生程式碼以指定 <see cref="T:System.Byte" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>產生程式碼以指定 <see cref="T:System.Byte[]" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>產生使用者可以檢視和編輯的主要程式碼檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以使用 Lambda 運算式來指定一組資料行名稱。</summary>
      <param name="columns">要產生程式碼的資料行。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定義。</summary>
      <param name="column">要產生程式碼的資料行定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">值，指出是否要在定義中包含資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Spatial.DbGeography" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Spatial.DbGeometry" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTime" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>產生程式碼以指定 <see cref="T:System.DateTimeOffset" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>產生程式碼以指定 <see cref="T:System.Decimal" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>產生程式碼以指定 <see cref="T:System.Guid" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>產生程式碼以指定 <see cref="T:System.Int64" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>產生程式碼以指定未知資料型別之資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>產生程式碼以指定 <see cref="T:System.Single" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>產生程式碼以指定 <see cref="T:System.String" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>產生程式碼以指定 <see cref="T:System.TimeSpan" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>使用適當的逸出為識別項加上引號，以便將它儲存在字串中。</summary>
      <returns>引號識別項。</returns>
      <param name="identifier">要加上引號的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>從資料庫成品的名稱中移除任何無效的字元。</summary>
      <returns>清理的名稱。</returns>
      <param name="name">要清理的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>取得要針對給定資料型別之資料行使用的型別名稱。</summary>
      <returns>要用於產生之移轉的型別名稱。</returns>
      <param name="primitiveTypeKind">要轉譯的資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>針對使用 WriteClassStart 啟動的類別產生關閉程式碼。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>使用陳述式和類別定義來產生命名空間。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="base">產生之類別的基底類別。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
      <param name="namespaces">要加入 using 指示詞的命名空間。如果為 null，則會使用 GetDefaultNamespaces 所傳回的命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生屬性以傳回程式碼後置檔案中的來源或目標模型。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>針對以程式碼為基礎之移轉產生程式碼的提供者基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     產生應該加入至使用者專案的程式碼。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> 取得預設命名空間，這些命名空間必須針對任何產生的程式碼輸出成 "using" 或 "Imports" 指示詞。</summary>
      <returns>命名空間名稱的排序清單。</returns>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> 取得命名空間，這些命名空間必須輸出成 "using" 或 "Imports" 指示詞，才能處理給定作業所產生的程式碼。</summary>
      <returns>命名空間名稱的排序清單。</returns>
      <param name="operations">即將產生程式碼的目標作業。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便將暫止的模型變更套用至資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /> 類別的新執行個體。</summary>
      <param name="migrationsConfiguration">要用於 Scaffolding 的組態。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> 取得或設定用於移轉之產生程式碼的命名空間。根據預設，這個命名空間與傳入建構函式之移轉組態物件的 MigrationsNamespace 相同。若為 VB.NET 專案，您就必須更新這個命名空間，才能將專案的根命名空間納入考量。</summary>
      <returns>用於移轉之產生程式碼的命名空間。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     對以程式碼為基礎的移轉進行 Scaffold，以便將任何暫止的模型變更套用至資料庫。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">要用於已進行 Scaffold 之移轉的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便將任何暫止的模型變更套用至資料庫。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">要用於已進行 Scaffold 之移轉的名稱。</param>
      <param name="ignoreChanges">true 表示排除模型變更，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> 對以程式碼為基礎的初始移轉 (對應至先前執行的資料庫初始設定式) 進行 Scaffold。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   表示已經進行 Scaffold 而且準備寫入檔案之以程式碼為基礎的移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     取得或設定應該儲存在程式碼後置檔案中的 Scaffold 移轉程式碼。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     取得或設定使用者專案中應該儲存這個移轉的子目錄。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     取得或設定用於這個移轉的程式設計語言。通常用於產生之程式碼的副檔名。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     取得或設定這個移轉的唯一識別項。通常用於產生之程式碼的檔案名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     取得或設定使用者可以編輯的 Scaffold 移轉程式碼。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>表示在 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 中的另一個 AppDomain 內執行作業時發生的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> 類別的新執行個體。</summary>
      <param name="info">擲回例外狀況相關的序列化物件資料。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的錯誤、內部例外狀況型別和堆疊追蹤，初始化 <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerType">已擲回之例外狀況的型別。</param>
      <param name="innerStackTrace">已擲回之例外狀況的堆疊追蹤。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將序列化目標物件所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">這個序列化的目標。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>取得已擲回之例外狀況的堆疊追蹤。</summary>
      <returns>已擲回之例外狀況的堆疊追蹤。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>取得已擲回之例外狀況的型別。</summary>
      <returns>已擲回之例外狀況的型別。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>表示設計階段工具用來執行移轉相關命令的 Helper 類別，這些命令必須與正在 Visual Studio 中編輯的應用程式進行互動。因為正在編輯應用程式，所以組件必須載入個別的 AppDomain 中，才能確保系統一律載入最新的版本。此外，系統也會複製啟始專案中的 App/Web.config 檔案，以便確保套用任何組態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 類別的新執行個體。</summary>
      <param name="assemblyName">包含要使用之移轉組態的組件名稱。</param>
      <param name="configurationTypeName">要使用之移轉組態的命名空間限定名稱。</param>
      <param name="workingDirectory">包含已編譯之組件的工作目錄。</param>
      <param name="configurationFilePath">啟始專案中之組態檔的路徑。</param>
      <param name="dataDirectory">啟始專案中之應用程式資料目錄的路徑。通常是 Web 應用程式的 App_Data 目錄或可執行檔的工作目錄。</param>
      <param name="connectionStringInfo">要移轉之資料庫的連接。如果提供了 null，則會使用內容的預設連接。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>釋放 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 使用的所有資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> 使用的所有資源。</summary>
      <param name="disposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>釋放外觀使用的所有 Unmanaged 資源。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>取得衍生自 <see cref="T:System.Data.Entity.DbContext" /> 之所有型別的完整名稱。</summary>
      <returns>找到的所有內容型別。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>取得已經套用至資料庫的所有移轉清單。</summary>
      <returns>已套用之移轉的 ID。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>取得尚未套用至資料庫的所有移轉清單。</summary>
      <returns>暫止移轉的 ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>取得或設定為了記錄資訊所執行的動作。</summary>
      <returns>為了記錄資訊所執行的動作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>取得或設定為了記錄詳細資訊所執行的動作。</summary>
      <returns>為了記錄詳細資訊所執行的動作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>取得或設定為了記錄警告所執行的動作。</summary>
      <returns>為了記錄警告所執行的動作。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>對以程式碼為基礎的移轉進行 Scaffold，以便套用任何暫止的模型變更。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="migrationName">產生之移轉的名稱。</param>
      <param name="language">產生之移轉的程式設計語言。</param>
      <param name="rootNamespace">要加入移轉之專案的根命名空間。</param>
      <param name="ignoreChanges">true 表示排除模型變更，否則為 false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>對以程式碼為基礎的初始移轉 (對應至先前執行的資料庫初始設定式) 進行 Scaffold。</summary>
      <returns>已進行 Scaffold 的移轉。</returns>
      <param name="language">產生之移轉的程式設計語言。</param>
      <param name="rootNamespace">要加入移轉之專案的根命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>產生 SQL 指令碼以在兩個移轉之間移轉。</summary>
      <returns>產生的 SQL 指令碼。</returns>
      <param name="sourceMigration">要更新的來源移轉。如果提供了 null，則會產生更新目前資料庫的指令碼。</param>
      <param name="targetMigration">要更新的目標移轉。如果提供了 null，則會產生更新至最新移轉的指令碼。</param>
      <param name="force">值，指出自動移轉期間是否可接受資料遺失。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>將資料庫更新至指定的移轉。</summary>
      <param name="targetMigration">要移轉之目標移轉的 ID。如果提供了 null，則會將資料庫更新至最新的移轉。</param>
      <param name="force">值，指出自動移轉期間是否可接受資料遺失。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>針對以程式碼為基礎的移轉產生 Visual Basic .Net 程式碼。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>產生程式碼以指定 <see cref="T:System.Byte" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>產生程式碼以指定 <see cref="T:System.Byte[]" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>產生使用者可以檢視和編輯的主要程式碼檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以使用 Lambda 運算式來指定一組資料行名稱。</summary>
      <param name="columns">要產生程式碼的資料行。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />。</summary>
      <param name="addColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />。</summary>
      <param name="alterColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>產生程式碼以指定 <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> 的定義。</summary>
      <param name="column">要產生程式碼的資料行定義。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="emitName">值，指出是否要在定義中包含資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />。</summary>
      <param name="createTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />。</summary>
      <param name="dropColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />。</summary>
      <param name="dropForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />。</summary>
      <param name="dropIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />。</summary>
      <param name="dropPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />。</summary>
      <param name="dropTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />。</summary>
      <param name="moveTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />。</summary>
      <param name="renameColumnOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />。</summary>
      <param name="renameTableOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />。</summary>
      <param name="sqlOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>     產生程式碼以指定 <see cref="T:System.Data.Spatial.DbGeography" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>     產生程式碼以指定 <see cref="T:System.Data.Spatial.DbGeometry" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>     產生程式碼以指定 <see cref="T:System.DateTime" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>     產生程式碼以指定 <see cref="T:System.DateTimeOffset" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>     產生程式碼以指定 <see cref="T:System.Decimal" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>     產生程式碼以指定 <see cref="T:System.Guid" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>     產生程式碼以指定 <see cref="T:System.Int64" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     產生程式碼以指定未知資料型別之資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>     產生程式碼以指定 <see cref="T:System.Single" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>     產生程式碼以指定 <see cref="T:System.String" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="operations">要由移轉執行的作業。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>產生包含移轉中繼資料的程式碼後置檔案。</summary>
      <returns>產生的程式碼。</returns>
      <param name="migrationId">移轉的唯一識別項。</param>
      <param name="sourceModel">要儲存在移轉中繼資料中的來源模型。</param>
      <param name="targetModel">要儲存在移轉中繼資料中的目標模型。</param>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>     產生程式碼以指定 <see cref="T:System.TimeSpan" /> 資料行的預設值。</summary>
      <returns>表示預設值的程式碼。</returns>
      <param name="defaultValue">要當做預設值使用的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />。</summary>
      <param name="addForeignKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />。</summary>
      <param name="addPrimaryKeyOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生程式碼以執行屬於 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 一部分的 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />。</summary>
      <param name="createIndexOperation">要產生程式碼的作業。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     使用適當的逸出為識別項加上引號，以便將它儲存在字串中。</summary>
      <returns>引號識別項。</returns>
      <param name="identifier">要加上引號的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     從資料庫成品的名稱中移除任何無效的字元。</summary>
      <returns>清理的名稱。</returns>
      <param name="name">要清理的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     取得要針對給定資料型別之資料行使用的型別名稱。</summary>
      <returns>要用於產生之移轉的型別名稱。</returns>
      <param name="primitiveTypeKind">要轉譯的資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> 針對使用 WriteClassStart 啟動的類別產生關閉程式碼。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     使用陳述式和類別定義來產生命名空間。</summary>
      <param name="namespace">應該用以產生程式碼的命名空間。</param>
      <param name="className">應該產生之類別的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
      <param name="base">產生之類別的基底類別。</param>
      <param name="designer">值，指出是否針對程式碼後置檔案產生此類別。</param>
      <param name="namespaces">要加入 Imports 指示詞的命名空間。如果為 null，則會使用 GetDefaultNamespaces 所傳回的命名空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     產生屬性以傳回程式碼後置檔案中的來源或目標模型。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="writer">要加入產生之程式碼的文字寫入器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   這個類別是供 Code First 移轉用來從資料庫讀取和寫入移轉記錄。它並非設計成可供其他程式碼使用，而且只有公用類別，以便 Entity Framework 能夠在部分信任下執行時存取此類別。未來可能會變更或移除此類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     取得或設定這個移轉記錄項目的建立日期和時間。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     取得或設定這個資料列所表示之移轉的 ID。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     取得或設定套用這個移轉之後的模型狀態。</summary>
      <returns>傳回 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     取得或設定建立這個項目的 Entity Framework 版本。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>表示自動移轉會造成資料遺失時發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     初始化 AutomaticDataLossException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>表示套用最後一個移轉且停用自動移轉之後存在暫止模型變更時發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     初始化 AutomaticMigrationsDisabledException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>提供有關以程式碼為基礎之移轉的其他中繼資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     取得移轉的唯一識別項。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     取得執行這個移轉之前的模型狀態。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     取得執行這個移轉之後的模型狀態。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>表示在 Code First 移轉管線內部發生的錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> 使用序列化資料，初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，其中保存有關擲回之例外狀況的序列化物件資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，其中包含有關來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> 初始化 MigrationsException 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>可用於移轉處理序之記錄器的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     記錄告知性訊息。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     記錄只有在使用者要求詳細資訊輸出時才呈現給他們的一些其他資訊。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     記錄使用者應該注意的警告。</summary>
      <param name="message">要記錄的訊息。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>包裝核心 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 之裝飾項目的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     初始化 MigratorBase 類別的新執行個體。</summary>
      <param name="innerMigrator">這個裝飾項目所包裝的移轉程式。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     取得用於移轉處理序的組態。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     取得已經套用至資料庫的移轉清單。</summary>
      <returns>移轉 ID 的清單</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     取得組件中所定義的移轉清單。</summary>
      <returns>移轉 ID 的清單</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     取得尚未套用至資料庫的暫止移轉清單。</summary>
      <returns>移轉 ID 的清單</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     將目標資料庫更新至最新的移轉。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     將目標資料庫更新至給定的移轉。</summary>
      <param name="targetMigration">要升級/降級的目標移轉。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>要在移轉作業期間提供記錄的裝飾項目。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     初始化 MigratorLoggingDecorator 類別的新執行個體。</summary>
      <param name="innerMigrator">這個裝飾項目所包裝的移轉程式。</param>
      <param name="logger">要寫入訊息的記錄器。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>表示要產生 SQL 指令碼而非套用變更至資料庫的裝飾項目。使用這個裝飾項目來包裝 <see cref="T:System.Data.Entity.Migrations.DbMigrator" />，可防止 <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 將任何變更套用至目標資料庫。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" /> 類別的新執行個體。</summary>
      <param name="innerMigrator">這個裝飾項目所包裝的移轉程式。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>將資料庫更新至目標移轉。</summary>
      <returns>產生的 SQL 指令碼。</returns>
      <param name="sourceMigration">來源移轉。</param>
      <param name="targetMigration">要升級/降級的目標移轉。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>表示正在將資料行加入至資料表。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     初始化 AddColumnOperation 類別的新執行個體。</summary>
      <param name="table">應該加入資料行的資料表名稱。</param>
      <param name="column">正在加入之資料行的詳細資料。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     取得正在加入之資料行的詳細資料。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     取得表示卸除已加入之資料行的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>取得 {在這裡插入文字}。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     取得應該加入資料行的資料表名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>表示正在加入至資料表的外部索引鍵限制式。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     初始化 AddForeignKeyOperation 類別的新執行個體。您也應該填入 PrincipalTable、PrincipalColumns、DependentTable 和 DependentColumns 屬性。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     取得或設定值，指出是否應該針對外部索引鍵限制式設定串聯刪除。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     取得要針對外部索引鍵資料行建立索引的作業。</summary>
      <returns>要加入索引的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     取得要卸除外部索引鍵限制式的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     外部索引鍵限制式應該設為目標之資料行的名稱。</summary>
      <returns>資料行名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>表示將主索引鍵加入至資料表。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     初始化 AddPrimaryKeyOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     取得要卸除主索引鍵的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>表示更改現有的資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     初始化 AlterColumnOperation 類別的新執行個體。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="column">應該更改之目標資料行內容的詳細資料。</param>
      <param name="isDestructiveChange">值，指出這項變更是否會造成資料遺失。</param>
      <param name="inverse">要還原這項資料行更改的作業。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     初始化 AlterColumnOperation 類別的新執行個體。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="column">應該更改之目標資料行內容的詳細資料。</param>
      <param name="isDestructiveChange">值，指出這項變更是否會造成資料遺失。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     取得資料行的新定義。</summary>
      <returns>資料行定義。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     取得表示還原更改的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，這個屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     取得資料行所屬之資料表的名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>表示資料行的相關資訊。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     初始化此類別的新執行個體。</summary>
      <param name="type">此資料行的資料型別。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     初始化此類別的新執行個體。</summary>
      <param name="type">此資料行的資料型別。</param>
      <param name="typeUsage">     關於資料型別的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     取得對應至此資料行之資料庫型別的 CLR 型別的預設值。</summary>
      <returns>預設值。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     取得對應至此資料行之資料庫型別的 CLR 型別。</summary>
      <returns>CLR 型別。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     取得或設定要當做此資料行之預設值使用的常數值。</summary>
      <returns>資料行的預設值。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     取得或設定當做此資料行之預設值使用的 SQL 運算式。</summary>
      <returns>資料行的預設值。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     取得或設定值，指出這個資料行是否為固定長度。只對陣列資料型別有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     取得或設定值，指出資料庫是否將使用識別模式來產生此資料行的值。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     判斷這個資料行的資料型別是否比另一個資料行要窄。用來判斷將提供的資料行定義更改為此定義是否會造成資料遺失。</summary>
      <returns>如果這個資料行的資料型別比較窄，則為 True。</returns>
      <param name="column">要比較的資料行。</param>
      <param name="providerManifest">正在使用之資料庫提供者的詳細資料。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     取得或設定值，指出這個資料行是否可以儲存 null 值。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     取得或設定值，指出是否應該將此資料行設定為時間戳記。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     取得或設定值，指出這個資料行是否支援 Unicode 字元。只對文字資料型別有效。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     取得或設定這個資料行的最大長度。只對陣列資料型別有效。</summary>
      <returns>最大長度。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     取得或設定資料行的名稱。</summary>
      <returns>名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     取得或設定這個資料行的整數位數。只對十進位資料型別有效。</summary>
      <returns>整數位數。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     取得或設定這個資料行的小數位數。只對十進位資料型別有效。</summary>
      <returns>小數位數。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     取得或設定要用於此資料行的提供者特有資料型別。</summary>
      <returns>資料型別。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     取得此資料行的資料型別。</summary>
      <returns>資料型別。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     取得有關此資料行之資料型別的其他詳細資料。這包括最大長度、Null 屬性等詳細資料。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>表示建立資料庫索引。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     初始化 CreateIndexOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     取得要卸除此索引的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     取得或設定值，指出這是否為唯一索引。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>表示建立資料表。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     初始化 CreateTableOperation 類別的新執行個體。</summary>
      <param name="name">要建立之資料表的名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     取得要包含在新資料表中的資料行。</summary>
      <returns>要包含的資料行。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     取得要卸除資料表的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     取得要建立之資料表的名稱。</summary>
      <returns>名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     取得或設定新資料表的主索引鍵。</summary>
      <returns>主索引鍵。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>表示從移轉記錄資料表中刪除新的記錄。移轉記錄資料表是用來儲存已經套用至資料庫的移轉記錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     初始化 DeleteHistoryOperation 類別的新執行個體。</summary>
      <param name="table">移轉記錄資料表的名稱。</param>
      <param name="migrationId">要刪除之移轉記錄的 ID。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>表示正在從資料表中卸除資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     初始化 DropColumnOperation 類別的新執行個體。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="inverse">表示還原卸除作業的作業。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     初始化 DropColumnOperation 類別的新執行個體。</summary>
      <param name="table">應該從中卸除資料行的資料表名稱。</param>
      <param name="name">要卸除的資料行名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     取得表示還原卸除資料行的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，這個屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     取得要卸除的資料行名稱。</summary>
      <returns>資料行名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     取得應該從中卸除資料行的資料表名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>表示正在從資料表中卸除外部索引鍵限制式。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     初始化 DropForeignKeyOperation 類別的新執行個體。</summary>
      <param name="inverse">表示還原卸除外部索引鍵限制式的作業。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     初始化 DropForeignKeyOperation 類別的新執行個體。您也應該填入 PrincipalTable、DependentTable 和 DependentColumns 屬性。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     取得要卸除外部索引鍵資料行之相關聯索引的作業。</summary>
      <returns>要卸除索引的作業。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     取得表示還原卸除外部索引鍵限制式的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，這個屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>表示卸除現有的索引。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     初始化 DropIndexOperation 類別的新執行個體。</summary>
      <param name="inverse">表示還原卸除索引的作業。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     初始化 DropIndexOperation 類別的新執行個體。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     取得表示還原卸除索引的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，這個屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>表示從資料表中卸除主索引鍵。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     初始化 DropPrimaryKeyOperation 類別的新執行個體。您也應該填入 Table 和 Columns 屬性。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     取得要加入主索引鍵的作業。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>表示卸除現有的資料表。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     初始化 DropTableOperation 類別的新執行個體。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="inverse">表示還原卸除資料表的作業。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     初始化 DropTableOperation 類別的新執行個體。</summary>
      <param name="name">要卸除的資料表名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     取得表示還原卸除資料表的作業。系統無法自動計算反向，而且如果沒有提供給建構函式，這個屬性將會傳回 null。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     取得要卸除之資料表的名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>影響外部索引鍵限制式之變更的基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     初始化 ForeignKeyOperation 類別的新執行個體。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     外部索引鍵資料行的名稱。</summary>
      <returns>資料行名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     取得或設定外部索引鍵資料行所在之資料表的名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     取得值，指出是否已經針對這個外部索引鍵限制式提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     取得或設定這個外部索引鍵限制式的名稱。如果沒有提供名稱，則會計算預設名稱。</summary>
      <returns>限制式名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     取得或設定外部索引鍵限制式設為目標之資料表的名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>影響移轉記錄資料表之作業的通用基底類別。移轉記錄資料表是用來儲存已經套用至資料庫的移轉記錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     初始化 HistoryOperation 類別的新執行個體。</summary>
      <param name="table">移轉記錄資料表的名稱。</param>
      <param name="migrationId">受影響之移轉的名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     取得受影響之移轉的名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     取得移轉記錄資料表的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>影響索引之作業的通用基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     初始化 IndexOperation 類別的新執行個體。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     取得或設定進行索引的資料行。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     取得值，指出是否已經針對這個索引提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     取得或設定這個索引的名稱。如果沒有提供名稱，則會計算預設名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     取得或設定索引所屬的資料表。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>表示將新的記錄插入移轉記錄資料表中。移轉記錄資料表是用來儲存已經套用至資料庫的移轉記錄。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     初始化 InsertHistoryOperation 類別的新執行個體。</summary>
      <param name="table">移轉記錄資料表的名稱。</param>
      <param name="migrationId">要插入之移轉記錄的 ID。</param>
      <param name="model">要儲存在模型資料行中的值。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>取得 {在這裡插入文字}。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     取得要儲存在記錄資料表中的值，表示移轉的目標模型。</summary>
      <returns>傳回 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     取得要儲存在記錄資料表中的值，表示用來產生這個移轉的 Entity Framework 版本。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>表示要修改資料結構描述的作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     初始化 MigrationOperation 類別的新執行個體。</summary>
      <param name="anonymousArguments">       請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     取得提供者可處理的其他引數。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     取得將會還原此作業的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     取得值，指出這項作業是否會造成資料遺失。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>表示將資料表從某個結構描述移至另一個結構描述。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     初始化 MoveTableOperation 類別的新執行個體。</summary>
      <param name="name">要移動之資料表的名稱。</param>
      <param name="newSchema">要移動資料表之目標結構描述的名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     取得將資料表移回其原始結構描述的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     取得要移動之資料表的名稱。</summary>
      <returns>名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     取得要移動資料表之目標結構描述的名稱。</summary>
      <returns>結構描述名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>表示影響主索引鍵之作業的通用基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     初始化 PrimaryKeyOperation 類別的新執行個體。</summary>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     取得組成主索引鍵的資料行。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     取得值，指出是否已經針對這個主索引鍵提供特定名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     取得或設定這個主索引鍵的名稱。如果沒有提供名稱，則會計算預設名稱。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     取得或設定包含主索引鍵之資料表的名稱。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>表示重新命名現有的資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     初始化 RenameColumnOperation 類別的新執行個體。</summary>
      <param name="table">資料行所屬之資料表的名稱。</param>
      <param name="name">要重新命名之資料行的名稱。</param>
      <param name="newName">資料行的新名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     取得還原重新命名的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     取得要重新命名的資料行名稱。</summary>
      <returns>名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     取得資料行的新名稱。</summary>
      <returns>新名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     取得資料行所屬之資料表的名稱。</summary>
      <returns>資料表名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  表示重新命名現有的資料表。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     初始化 RenameTableOperation 類別的新執行個體。</summary>
      <param name="name">要重新命名之資料表的名稱。</param>
      <param name="newName">資料表的新名稱。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     取得還原重新命名的作業。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>取得值，指出變更是否為破壞性。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     取得要重新命名之資料表的名稱。</summary>
      <returns>名稱。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     取得資料表的新名稱。</summary>
      <returns>新名稱。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>表示要直接對目標資料庫執行的提供者特有 SQL 陳述式。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     初始化 SqlOperation 類別的新執行個體。</summary>
      <param name="sql">要執行的 SQL。</param>
      <param name="anonymousArguments">     提供者可處理的其他引數。請使用匿名型別語法來指定引數，例如 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>取得值，指出這項作業是否會造成資料遺失。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     取得要執行的 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     取得或設定值，指出是否應該在用來讓移轉處理序可交易的交易範圍以外執行此陳述式。如果設定為 true，系統就不會在移轉處理序失敗時回復此作業。</summary>
      <returns>如果系統不會在移轉處理序失敗時回復此作業，則為 true。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   將無從驗證提供者之移轉作業轉換成資料庫提供者特有 SQL 命令的提供者的通用基底類別。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     將一組移轉作業轉換成資料庫提供者特有的 SQL。</summary>
      <returns>為了進行移轉作業所執行的 SQL 陳述式清單。</returns>
      <param name="migrationOperations">要轉換的作業。</param>
      <param name="providerManifestToken">表示設為目標之資料庫版本的語彙基元。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>表示已經轉譯成 SQL 陳述式的移轉作業。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     取得或設定為了進行此移轉作業所執行的 SQL。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     取得或設定值，指出是否應該在用來讓移轉處理序可交易的交易範圍以外執行此陳述式。如果設定為 true，系統就不會在移轉處理序失敗時回復此作業。</summary>
      <returns>如果系統不會在移轉處理序失敗時回復此作業，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>表示要將無從驗證提供者之移轉作業轉換成 SQL 命令的提供者，這些命令可對 Microsoft SQL Server Compact Edition 執行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>建立目前提供者的空白連接。可讓衍生的提供者使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 以外的連接。</summary>
      <returns>目前提供者的空白連接。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="alterColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropIndexOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="moveTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="renameColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="renameTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 DateTime 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>產生 SQL 以建立資料庫結構描述。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="schema">要建立的資料庫結構描述。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>產生 SQL 以將資料表標示為系統資料表。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="createTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>產生引號名稱。提供的名稱不一定會包含結構描述。</summary>
      <returns>引號名稱。</returns>
      <param name="name">要加上引號的名稱。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>表示要將無從驗證提供者之移轉作業轉換成 SQL 命令的提供者，這些命令可對 Microsoft SQL Server 執行。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>產生 SQL 以指定資料行的資料型別。這個方法只會產生實際型別，而非建立資料行的 SQL。</summary>
      <returns>表示資料型別的 SQL。</returns>
      <param name="column">在其中產生 SQL 的資料行。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>建立目前提供者的空白連接。可讓衍生的提供者使用 <see cref="T:System.Data.SqlClient.SqlConnection" /> 以外的連接。</summary>
      <returns>目前提供者的空白連接。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 bool 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>產生 SQL 以指定針對資料行所設定的常數 byte[] 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>將一組移轉作業轉換成 Microsoft SQL Server 特有的 SQL。</summary>
      <returns>為了進行移轉作業所執行的 SQL 陳述式清單。</returns>
      <param name="migrationOperations">要轉換的作業。</param>
      <param name="providerManifestToken">表示設為目標之 SQL Server 版本的語彙基元 (亦即 "2005"、"2008")。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="addColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="addForeignKeyOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="addPrimaryKeyOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="alterColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="createIndexOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="createTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="deleteHistoryOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropForeignKeyOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropIndexOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropPrimaryKeyOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="dropTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="insertHistoryOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="moveTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="renameColumnOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="renameTableOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>產生 <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> 的 SQL。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="sqlOperation">要產生 SQL 的作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>產生 SQL 以指定針對資料行所設定的常數地理預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>產生 SQL 以指定針對資料行所設定的常數幾何預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 DateTime 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 DateTimeOffset 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 Guid 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>產生 SQL 以指定針對資料行所設定的常數預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>產生 SQL 以指定針對資料行所設定的常數字串預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>產生 SQL 以指定針對資料行所設定的常數 TimeSpan 預設值。這個方法只會產生實際值，而非設定預設值的 SQL。</summary>
      <returns>表示預設值的 SQL。</returns>
      <param name="defaultValue">要設定的值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>產生 SQL 以建立資料庫結構描述。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="schema">要建立的資料庫結構描述。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>產生 SQL 以將資料表標示為系統資料表。您應該使用 Statement 方法來加入產生的 SQL。</summary>
      <param name="createTableOperation">要標示為系統資料表的資料表。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>產生引號名稱。提供的名稱不一定會包含結構描述。</summary>
      <returns>產生的引號名稱。</returns>
      <param name="name">要加上引號的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>為 SQL Server 的識別項加上引號。</summary>
      <returns>SQL Server 的引號識別項。</returns>
      <param name="identifier">要加上引號的識別項。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>加入要對資料庫執行的新陳述式。</summary>
      <param name="writer">包含要執行之 SQL 的寫入器。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>加入要對資料庫執行的新陳述式。</summary>
      <param name="sql">要執行的陳述式。</param>
      <param name="suppressTransaction">值，指出是否應該在用來讓移轉處理序可交易的交易範圍以外執行此陳述式。如果設定為 true，系統就不會在移轉處理序失敗時回復此作業。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>取得可用來建置 SQL 的新 <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" />。這只是建立寫入器的 Helper 方法。寫入此寫入器不會讓 SQL 註冊為執行。您必須將產生的 SQL 傳遞給 Statement 方法。</summary>
      <returns>要用於 SQL 產生的空白文字寫入器。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>  與 T:System.CodeDom.Compiler.IndentedTextWriter 相同，但在部分信任下運作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     使用指定的文字寫入器和預設的定位點字串，初始化 IndentedTextWriter 類別的新執行個體。</summary>
      <param name="writer">要用於輸出的 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     使用指定的文字寫入器和定位點字串，初始化 IndentedTextWriter 類別的新執行個體。</summary>
      <param name="writer">要用於輸出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">要用於縮排的定位點字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     關閉正在寫入的文件。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     指定預設的定位點字串。這個欄位是常數。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     取得要使用的文字寫入器編碼方式。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     清除資料流。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     取得或設定要縮排的空格數。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     取得要使用的 <see cref="T:System.IO.TextWriter" />。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     取得或設定要使用的新行字元。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>     根據 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 屬性，針對每一層縮排輸出定位點字串一次。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     將布林值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     將字元寫入文字資料流。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     將字元的子陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入資料的來源字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     將 Double 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 Double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     將整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     將 8 位元組整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     將 Single 的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 Single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     將指定的字串寫入文字資料流。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入格式化字串的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     使用與指定語意相同的語意來寫出格式化字串。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     寫入行結束字元。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     依序將布林值的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的布林值。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     依序將字元以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的字元。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     依序將字元陣列以及行結束字元寫入文字資料流。</summary>
      <param name="buffer">要寫入的字元陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     依序將字元的子陣列以及行結束字元寫入文字資料流。</summary>
      <param name="buffer">要寫入資料的來源字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     依序將 Double 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 Double。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     依序將整數的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     依序將 8 位元組整數的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組整數。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     依序將物件的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     依序將 Single 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要寫入的 Single。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     依序將指定的字串以及行結束字元寫入文字資料流。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入格式化字串的物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg0">要寫入格式化字串的第一個物件。</param>
      <param name="arg1">要寫入格式化字串的第二個物件。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     使用與指定語意相同的語意，依序寫出格式化字串以及行結束字元。</summary>
      <param name="format">要使用的格式化字串。</param>
      <param name="arg">要輸出的引數陣列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     依序將 UInt32 的文字表示以及行結束字元寫入文字資料流。</summary>
      <param name="value">要輸出的 UInt32。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     將指定的字串寫入沒有定位點的一行。</summary>
      <param name="s">要寫入的字串。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> 允許針對模型中的複雜類型執行組態。可以藉由使用 <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" /> 方法來取得 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />，或是藉由使用 <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" /> 屬性來註冊衍生自 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> 的自訂型別。</summary>
      <typeparam name="TComplexType">要設定的複雜類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary> 初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>允許針對模型中的實體類型執行組態。可以藉由在 <see cref="T:System.Data.Entity.DbModelBuilder" /> 上使用 Entity 方法來取得 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />，或是藉由在 <see cref="T:System.Data.Entity.DbModelBuilder" /> 上使用 Configurations 屬性來註冊衍生自 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 的自訂型別。</summary>
      <typeparam name="TEntityType">表示實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> 設定要用於這個實體類型的實體集名稱。只能針對每一個實體集中的基底類型設定實體集名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entitySetName">實體集的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 為這個實體類型設定主索引鍵屬性。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyExpression"> Lambda 運算式，表示要當做主索引鍵使用的屬性。例如，C# 中的 t =&gt; t.Id     及 Visual Basic .Net 中的 Function(t) t.Id。如果主索引鍵是由多個屬性所組成，請指定匿名型別 (包括屬性)。例如，C# 中的 t =&gt; new { t.Id1, t.Id2 } 及 Visual Basic .Net 中的 Function(t) New From { t.Id1, t.Id2 }。</param>
      <typeparam name="TKey">索引鍵的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> 從此實體類型設定 many 關聯性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 從這個實體類型設定 optional 關聯性。此實體類型的執行個體將能夠儲存到資料庫中，而不必指定這個關聯性。資料庫中的外部索引鍵可為 Null。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 從這個實體類型設定 required 關聯性。此實體類型的執行個體將無法儲存到資料庫中，除非指定這個關聯性。資料庫中的外部索引鍵不可為 Null。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">關聯性另一端之實體的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> 允許有關衍生實體類型如何對應到資料庫結構描述的進階組態設定。這個方法的呼叫會加總，而且後續的呼叫將不會覆寫這個方法的先前呼叫已執行的組態。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="derivedTypeMapConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 執行組態的動作。</param>
      <typeparam name="TDerived">要設定的衍生實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> 允許有關此實體類型如何對應到資料庫結構描述的進階組態設定。根據預設，任何組態也會套用到衍生自這個實體類型的任何型別。若要設定衍生型別，可以使用這個方法的特定多載 (此方法會設定衍生型別)，或是針對衍生型別使用 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />。可以使用這個方法的多個呼叫，在多個資料表之間分割實體的屬性。呼叫會加總，而且後續的呼叫將不會覆寫這個方法的先前呼叫已執行的組態。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entityMappingConfigurationAction">針對 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 執行組態的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>設定這個實體類型所對應的資料表名稱。</summary>
      <param name="tableName">資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> 設定這個實體類型所對應的資料表名稱。</summary>
      <param name="tableName">資料表的名稱。</param>
      <param name="schemaName">資料表的資料庫結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> 當產生無效的模型時，<see cref="T:System.Data.Entity.DbModelBuilder" /> 在模型建立期間所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary> 初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 類別的新執行個體。</summary>
      <param name="info">序列化資訊。</param>
      <param name="context">內容。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary> 初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary> 初始化 <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> 用來執行關聯性之組態的基底類別。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> 用來設定實體類型或複雜類型的 <see cref="T:System.byte[]" /> 屬性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> 設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 BinaryPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">     用來針對資料庫中的屬性產生值的模式。設定 'null' 將會從此屬性中移除資料庫產生的模式 Facet。設定 'null' 將會產生與指定 'None' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value"> 此屬性的最大長度。設定 'null' 將會從此屬性中移除任何最大長度限制。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> 設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken"> 指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> 設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> 設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> 將此屬性設定為 optional。用來儲存這個屬性的資料庫資料行將會是 nullable。<see cref="T:System.byte[]" /> 屬性預設為選擇項。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> 將此屬性設定為 required。用來儲存這個屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> 設定此屬性為資料庫中的資料列版本。實際資料型別將會根據使用的資料庫提供者而異。將此屬性設定為資料列版本會自動將它設定為開放式並行存取 Token。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> 設定此屬性具有變動長度。根據預設，<see cref="T:System.byte[]" /> 屬性具有變動長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> 設定可以支援串聯刪除功能的關聯性。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> 針對關聯性設定串聯刪除為啟用狀態。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> 針對關聯性設定串聯刪除是否為啟用狀態。</summary>
      <param name="value">如果串聯刪除已啟用則為 true，否則為 false。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> 允許向 <see cref="T:System.Data.Entity.DbModelBuilder" /> 註冊實體和複雜類型的衍生組態類別。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary> 將 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> 加入至 <see cref="T:System.Data.Entity.DbModelBuilder" />。只能針對模型中的每一個型別加入一個 <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="complexTypeConfiguration">要加入的複雜類型組態</param>
      <typeparam name="TComplexType">正在設定的複雜類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary> 將 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 加入至 <see cref="T:System.Data.Entity.DbModelBuilder" />。只能針對模型中的每一個型別加入一個 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="entityTypeConfiguration">要加入的實體類型組態。</param>
      <typeparam name="TEntityType">正在設定的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary> 允許自訂 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體所使用的慣例。目前唯一支援的作業是移除一個或多個預設慣例。預設慣例可以在 <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 命名空間中找到。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>停用 <see cref="T:System.Data.Entity.DbModelBuilder" /> 的慣例。可供移除的預設慣例可以在 <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" /> 命名空間中找到。</summary>
      <typeparam name="TConvention">要停用之慣例的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> 用來設定實體類型或複雜類型的 <see cref="T:System.DateTime" /> 屬性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開。如需詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> 設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 DateTimePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">     用來針對資料庫中的屬性產生值的模式。設定 'null' 將會從此屬性中移除資料庫產生的模式 Facet。設定 'null' 將會產生與指定 'None' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> 設定此屬性的有效位數。如果資料庫提供者不支援此資料行之資料型別的有效位數，就會忽略這個值。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的有效位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> 設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken"> 指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> 將此屬性設定為 optional。用來儲存這個屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> 將此屬性設定為 required。用來儲存這個屬性的資料庫資料行將不會是 nullable。<see cref="T:System.DateTime" /> 屬性預設為必要項。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> 用來設定實體類型或複雜類型的 <see cref="T:System.decimal" /> 屬性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> 設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 DecimalPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">     用來針對資料庫中的屬性產生值的模式。設定 'null' 將會從此屬性中移除資料庫產生的模式 Facet。設定 'null' 將會產生與指定 'None' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> 設定此屬性的有效位數和小數位數。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="precision">此屬性的有效位數。</param>
      <param name="scale">此屬性的小數位數。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> 設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken"> 指出此屬性是否為並行 Token 的值。指定 'null' 將會從此屬性中移除並行 Token Facet。指定 'null' 將會產生與指定 'false' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> 將此屬性設定為 optional。用來儲存這個屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> 將此屬性設定為 required。用來儲存這個屬性的資料庫資料行將不會是 nullable。<see cref="T:System.decimal" /> 屬性預設為必要項。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> 設定可支援外部索引鍵屬性的關聯性，這些屬性會在物件模型中公開。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TDependentEntityType">相依實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 設定關聯性使用外部索引鍵屬性，這些屬性會在物件模型中公開。如果外部索引鍵屬性不會在物件模型中公開，則使用 Map 方法。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="foreignKeyExpression">Lambda 運算式，表示要當做外部索引鍵使用的屬性。如果外部索引鍵是由多個屬性所組成，則指定匿名型別 (包括屬性)。當使用多個外部索引鍵屬性時，必須使用之前為主體實體類型所設定之主索引鍵屬性的相同順序來指定這些屬性。</param>
      <typeparam name="TKey">索引鍵的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> 針對實體類型或是實體類型中的屬性子集來設定資料表和資料行對應。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
      <typeparam name="TEntityType">要對應的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> 重新對應繼承自基底類型的所有屬性。當設定衍生型別對應至個別資料表時，這會導致所有屬性都包含在資料表中，而不只是非繼承的屬性。這稱為「一實體類一表」(TPC) 對應。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 設定將會包含在這個對應片段中的屬性。如果未呼叫這個方法，將會設定尚未包含在對應片段中的所有屬性。</summary>
      <param name="propertiesExpression"> 匿名型別的 Lambda 運算式，該型別包含要對應的屬性。</param>
      <typeparam name="TObject">匿名型別，包括要對應的屬性。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 設定用來區別繼承階層架構中型別之間的鑑別子條件。</summary>
      <returns>用來進一步設定鑑別子條件的組態物件。</returns>
      <param name="property"> Lambda 運算式，表示用來區別型別的屬性。</param>
      <typeparam name="TProperty">用來區別型別之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> 設定用來區別繼承階層架構中型別之間的鑑別子資料行。</summary>
      <returns>用來進一步設定鑑別子資料行和值的組態物件。</returns>
      <param name="discriminator">鑑別子資料行的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> 設定要對應的目標資料表名稱。</summary>
      <param name="tableName">資料表名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> 設定要對應的目標資料表名稱和結構描述。</summary>
      <param name="tableName">資料表名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>表示外部索引鍵關聯的對應組態。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>判斷指定的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前物件比較的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件進行比較的物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> 為外部索引鍵設定資料行的名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames"> 外部索引鍵資料行名稱。使用多個外部索引鍵屬性時，您必須使用之前為目標實體類型設定主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>設定外部索引鍵資料行所在的資料表名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">要設定之資料表的名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>設定外部索引鍵資料行所在的資料表名稱和結構描述。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表的名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>設定只能支援外部索引鍵屬性的關聯性，這些屬性不會在物件模型中公開。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>設定關聯性使用外部索引鍵屬性，這些屬性不會在物件模型中公開。可藉由指定組態動作來自訂資料行和資料表。如果指定空的組態動作，則會依照慣例產生資料行名稱。如果在物件模型中公開外部索引鍵屬性，則使用 HasForeignKey 方法。並非所有關聯性都支援在物件模型中公開外部索引鍵屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="configurationAction">設定外部索引鍵資料行和資料表的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> 用來針對實體類型或複雜類型設定有長度 Facet 的資料行。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 設定此資料行具有指定的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value"> 資料行的最大長度。將此值設定為 null 將會從此資料行中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>設定此資料行具有固定長度。</summary>
      <returns>如果此資料行的長度固定則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> 設定此資料行允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> 設定此資料行具有變動長度。</summary>
      <returns>如果此資料行具有變動長度則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> 用來針對實體類型或複雜類型設定有長度 Facet 的屬性。這個組態功能是藉由使用 Code First Fluent 應用程式開發介面所取得，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> 設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value"> 此屬性的最大長度。將此值設定為 null 將會從此屬性中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> 設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> 設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> 設定此屬性具有變動長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> 從實體類型設定 many 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> 將關聯性設定為 many:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 將關聯性設定為 many:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> 將關聯性設定為 many:optional，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 many:optional，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> 將關聯性設定為 many:required，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 many:required，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> 設定 many:many 關聯性的資料表和資料行對應。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>判斷指定的 <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> 物件是否等於目前的物件。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="other">
        <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> 物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> 為左邊外部索引鍵設定資料行的名稱。左邊外部索引鍵表示 <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> 上的 HasMany 呼叫中指定的導覽屬性。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames"> 外部索引鍵資料行名稱。使用多個外部索引鍵屬性時，您必須使用之前為目標實體類型設定主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> 為右邊外部索引鍵設定資料行的名稱。右邊外部索引鍵表示 WithMany 呼叫中指定的導覽屬性。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="keyColumnNames"> 外部索引鍵資料行名稱。使用多個外部索引鍵屬性時，您必須使用之前為目標實體類型設定主索引鍵屬性的相同順序來指定這些屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> 設定關聯性的聯結資料表名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> 設定關聯性的聯結資料表名稱和結構描述。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="tableName">資料表名稱。</param>
      <param name="schemaName">資料表的結構描述。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> 設定 many:many 關聯性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> 設定用來儲存關聯性的外部索引鍵資料行和資料表。</summary>
      <param name="configurationAction">設定外部索引鍵資料行和資料表的動作。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> 根據指派給屬性的值，設定用來區別繼承階層架構中型別之間的條件。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> 設定在屬性中要求值的條件。如果資料列沒有任何值指派給這個屬性儲存所在的資料行，就會假設這些資料列具有這個實體類型的基底類型。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>從實體類型設定 optional 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> 將關聯性設定為 optional:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 將關聯性設定為 optional:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> 將關聯性設定為 optional:optional，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 optional:optional，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> 將關聯性設定為 optional:optional，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 optional:optional，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>將關聯性的指定端設定為 required，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>將關聯性的指定端設定為 required，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>從實體類型設定基本資料行。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之基本資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之基本資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>將基本資料行設定為 optional。</summary>
      <returns>如果此資料行為 optional 則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>將基本資料行設定為 required。</summary>
      <returns>如果此資料行為 required 則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> 用來設定實體類型或複雜類型的基本屬性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> 設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 PrimitivePropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">     用來針對資料庫中的屬性產生值的模式。設定 'null' 將會從此屬性中移除資料庫產生的模式 Facet。設定 'null' 將會產生與指定 'None' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> 設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken"> 指出此屬性是否為並行 Token 的值。指定 null 將會從此屬性中移除並行 Token Facet。指定 null 將會產生與指定 false 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> 將此屬性設定為 optional。用來儲存這個屬性的資料庫資料行將會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> 將此屬性設定為 required。用來儲存這個屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> 從實體類型設定 required 關聯性。</summary>
      <typeparam name="TEntityType">關聯性源自的實體類型。</typeparam>
      <typeparam name="TTargetEntityType">關聯性設為目標的實體類型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> 將關聯性設定為 required:many，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> 將關聯性設定為 required:many，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> 將關聯性設定為 required:optional，而且在關聯性的另一端沒有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 required:optional，而且在關聯性的另一端有導覽屬性。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> 將關聯性設定為 required:required，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 required:required，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是相依項，而且包含主體的外部索引鍵。關聯性所針對的實體類型將會是關聯性中的主體。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> 將關聯性設定為 required:required，而且在關聯性的另一端沒有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> 將關聯性設定為 required:required，而且在關聯性的另一端有導覽屬性。正在設定的實體類型將會是關聯性中的主體。關聯性所針對的實體類型將會是相依項，而且包含主體的外部索引鍵。</summary>
      <returns>可用來進一步設定關聯性的組態物件。</returns>
      <param name="navigationPropertyExpression"> Lambda 運算式，表示關聯性另一端的導覽屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .Net 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> 設定用來儲存字串值的資料庫資料行。這個組態功能是由 Code First Fluent 應用程式開發介面所公開。如需詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定資料庫資料行的順序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> 設定資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。將此值設定為 null 將會針對此資料行使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> 設定此資料行具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> 設定此資料行允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> 將此資料行設定為 optional。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> 將此資料行設定為 required。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> 設定此資料行支援 Unicode 字串內容。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> 設定此資料行是否支援 Unicode 字串內容。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="unicode"> 指出此資料行是否支援 Unicode 字串內容的值。指定 null 將會從此資料行中移除 Unicode Facet。指定 null 將會產生與指定 false 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> 設定此資料行具有變動長度。根據預設，資料行具有變動長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>用來設定實體類型或複雜類型的 <see cref="T:System.string" /> 屬性。這個組態功能是由 Code First Fluent 應用程式開發介面所公開，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>設定用來儲存此屬性的資料庫資料行名稱。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnName">資料行名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> 設定用來儲存此屬性之資料庫資料行的順序。當實體類型有複合索引鍵時，這個方法也會用來指定索引鍵排序。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnOrder">此資料行應該出現在資料庫資料表中的順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> 設定用來儲存此屬性之資料庫資料行的資料型別。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="columnType">資料庫提供者特有的資料型別名稱。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     設定資料庫如何產生此屬性的值。</summary>
      <returns>相同的 StringPropertyConfiguration 執行個體，以便鏈結多個呼叫。</returns>
      <param name="databaseGeneratedOption">     用來針對資料庫中的屬性產生值的模式。設定 'null' 將會從此屬性中移除資料庫產生的模式 Facet。設定 'null' 將會產生與指定 'None' 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>設定此屬性具有指定的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="value">此屬性的最大長度。將這個屬性設定為 null 將會從此屬性中移除任何最大長度限制，而且資料庫資料行將會使用預設長度。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> 設定此屬性當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> 設定此屬性是否當做開放式並行存取 Token 使用。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="concurrencyToken"> 指定此屬性是否為並行 Token。指定 null 將會從此屬性中移除並行 Token Facet。指定 null 將會產生與指定 false 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>設定此屬性具有固定長度。使用 HasMaxLength 設定此屬性的固定長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>設定此屬性允許資料庫提供者支援的最大長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>將此屬性設定為 optional。用來儲存這個屬性的資料庫資料行將會是 nullable。<see cref="T:System.string" /> 屬性預設為選擇項。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> 將此屬性設定為 required。用來儲存這個屬性的資料庫資料行將不會是 nullable。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>設定此屬性支援 Unicode 字串內容。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>設定此屬性是否支援 Unicode 字串內容。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
      <param name="unicode"> 指出此屬性是否支援 Unicode 字串內容的值。指定 null 將會從此屬性中移除 Unicode Facet。指定 null 將會產生與指定 false 相同的執行階段行為。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>設定此屬性具有變動長度。根據預設，<see cref="T:System.string" /> 屬性具有變動長度。</summary>
      <returns>相同的 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> 執行個體，以便鏈結多個呼叫。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>允許針對模型中的型別執行組態。</summary>
      <typeparam name="TStructuralType">要設定的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 從模型中排除屬性，好讓它不會對應到資料庫。</summary>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TProperty">要忽略之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.byte[]" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   設定在此型別上定義的 <see cref="T:DbGeography" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">   Lambda 運算式，表示要設定的屬性。C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   設定在此型別上定義的 <see cref="T:DbGeometry" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">   Lambda 運算式，表示要設定的屬性。C#: t =&amp;gt; t.MyProperty      VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.DateTime" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.DateTimeOffset" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.decimal" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> 設定在此型別上定義的 Nullable(<see cref="T:System.DateTime" />) 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> 設定在此型別上定義的 Nullable(<see cref="T:System.DateTimeOffset" />) 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> 設定在此型別上定義的 Nullable(<see cref="T:System.Decimal" />) 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> 設定在此型別上定義的 Nullable(<see cref="T:System.TimeSpan" />) 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> 設定在此型別上定義的 Nullable(<see cref="T:System.struct" />) 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="T">正在設定之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.string" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression">Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.TimeSpan" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> 設定在此型別上定義的 <see cref="T:System.struct" /> 屬性。</summary>
      <returns>可用來設定此屬性的組態物件。</returns>
      <param name="propertyExpression"> Lambda 運算式，表示要設定的屬性。例如，C# 中的 t =&gt; t.MyProperty 及 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="T">正在設定之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> 設定用來區別繼承階層架構中型別之間的鑑別子資料行。這個組態功能是由 Code First Fluent 應用程式開發介面所公開。如需詳細資訊，請參閱 <see cref="T:System.Data.Entity.DbModelBuilder" />。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。IntelliSense 會隱藏這個方法。</summary>
      <returns>如果物件相等則為 true，否則為 false。</returns>
      <param name="obj">物件。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>做為特定型別的雜湊函式。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前型別的雜湊碼。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>取得目前執行個體的型別。IntelliSense 會隱藏這個方法。</summary>
      <returns>目前執行個體的確切執行階段型別。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>設定用來識別正在設定的實體類型與繼承階層架構中其他型別的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
      <typeparam name="T">鑑別子值的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>設定用來識別正在設定的實體類型與繼承階層架構中其他型別的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> 設定用來識別正在設定的實體類型與繼承階層架構中其他型別的鑑別子值。</summary>
      <returns>設定用來儲存鑑別子值之資料行的組態物件。</returns>
      <param name="value">用來識別實體類型的值。</param>
      <typeparam name="T">鑑別子值的型別。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>傳回表示目前物件的字串。IntelliSense 會隱藏這個方法。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>偵測當相關型別之間只有一對導覽屬性存在時，互為反向之導覽屬性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> 使用資料註解或 <see cref="T:System.Data.Entity.DbModelBuilder" /> 應用程式開發介面將明確指定的任何資料型別轉換成小寫的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>在此模型的型別上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>當型別沒有主索引鍵、沒有對應的基底類型也沒有導覽屬性時，將此型別設定為複雜類型的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> 在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>針對十進位屬性將有效位數設定為 18 並將小數位數設定為 2 的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>移動主索引鍵屬性使其最先出現的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>根據外部索引鍵屬性之 CLR 可為 Null 的屬性來區別選擇性和必要關聯性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>在此模型的導覽屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>在此模型的外部索引鍵屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>識別可以從 <see cref="T:System.Data.Entity.DbModelBuilder" /> 執行個體中移除的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>偵測主索引鍵屬性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>在與多對多關聯性相關之兩個資料表的聯結資料表中加入串聯刪除的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>確定對應的繼承屬性不會建立無效或不支援的對應</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱為相依導覽屬性名稱與主體型別主索引鍵屬性名稱組合之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>在此模型的型別上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>針對任何必要的關聯性啟用串聯刪除的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>在一對一關聯性中將相依實體類型的主索引鍵設定為外部索引鍵的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>將實體集名稱設定為實體類型名稱之複數化版本的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>將資料表名稱設定為實體類型名稱之複數化版本的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱符合主體型別主索引鍵屬性名稱之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>針對支援長度 Facet 的屬性型別設定預設最大長度的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>在此模型的導覽屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>在此模型的基本屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>當 SqlCe 是提供者時，針對其型別支援長度 Facet 的屬性設定預設最大長度 4000。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>將整數主索引鍵設定為識別的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>在此模型的型別上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>在此模型的屬性上找到之處理 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> 執行個體的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>用來探索名稱為主體型別名稱與主體型別主索引鍵屬性名稱組合之外部索引鍵屬性的慣例。</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>當實體驗證失敗時，從 <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="entityValidationResults">驗證結果。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="entityValidationResults">驗證結果。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>傳回任何驗證錯誤。</summary>
      <returns>驗證錯誤 (如果有的話)。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>表示單一實體的驗證結果。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>建立 <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> 類別的執行個體。</summary>
      <param name="entry">套用結果的實體項目。絕對不會是 null。</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 執行個體的清單。這絕對不會是 null，但可以空白 (表示實體無效)。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>取得套用結果的 <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>取得指出實體是否有效的指標。</summary>
      <returns>如果實體有效則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>取得驗證錯誤。此屬性絕不會是 null。</summary>
      <returns>驗證錯誤。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>從驗證程式碼擲回例外狀況時，從 <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> 擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資訊和內容，初始化 <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 類別的新執行個體。</summary>
      <param name="info">序列化資訊。</param>
      <param name="context">資料流內容。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況訊息。</param>
      <param name="innerException">內部例外狀況。</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>驗證錯誤。可以是實體層級或屬性層級的驗證錯誤。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>建立 <see cref="T:System.Data.Entity.Validation.DbValidationError" /> 的執行個體。</summary>
      <param name="propertyName">無效屬性的名稱。可以是 null。</param>
      <param name="errorMessage">驗證錯誤訊息。可以是 null。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>取得驗證錯誤訊息。</summary>
      <returns>驗證錯誤訊息。</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>取得無效屬性的名稱。</summary>
      <returns>無效屬性的名稱。</returns>
    </member>
  </members>
</doc>